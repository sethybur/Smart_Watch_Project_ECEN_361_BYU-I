
Smart_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b388  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  0800b518  0800b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf7c  0800bf7c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf7c  0800bf7c  0001bf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf84  0800bf84  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf84  0800bf84  0001bf84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf88  0800bf88  0001bf88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800bf8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006b84  2000008c  0800c018  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006c10  0800c018  00026c10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002401a  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000492e  00000000  00000000  00044119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e48  00000000  00000000  00048a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000177f  00000000  00000000  0004a890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf32  00000000  00000000  0004c00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025842  00000000  00000000  00077f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001082f7  00000000  00000000  0009d783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008678  00000000  00000000  001a5a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001ae0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b500 	.word	0x0800b500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800b500 	.word	0x0800b500

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	//HAL_IncTick();
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfc:	f001 f9c8 	bl	8002190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e00:	f000 f87c 	bl	8000efc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e04:	f000 f9de 	bl	80011c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e08:	f000 f9ac 	bl	8001164 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000e0c:	f000 f90a 	bl	8001024 <MX_RTC_Init>
  MX_I2C1_Init();
 8000e10:	f000 f8c8 	bl	8000fa4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */




  ssd1306_Init();
 8000e14:	f000 ffba 	bl	8001d8c <ssd1306_Init>
  ssd1306_Fill(Black);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f001 f821 	bl	8001e60 <ssd1306_Fill>
  ssd1306_SetCursor(0,0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2000      	movs	r0, #0
 8000e22:	f001 f96b 	bl	80020fc <ssd1306_SetCursor>
  ssd1306_WriteString("BOOTING", Font_7x10 ,White);
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <main+0xb0>)
 8000e28:	2301      	movs	r3, #1
 8000e2a:	ca06      	ldmia	r2, {r1, r2}
 8000e2c:	481f      	ldr	r0, [pc, #124]	; (8000eac <main+0xb4>)
 8000e2e:	f001 f93f 	bl	80020b0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000e32:	f001 f839 	bl	8001ea8 <ssd1306_UpdateScreen>

  adxl_init (&hi2c1);
 8000e36:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <main+0xb8>)
 8000e38:	f000 ff00 	bl	8001c3c <adxl_init>


  setupMax30102(&max30102);
 8000e3c:	481d      	ldr	r0, [pc, #116]	; (8000eb4 <main+0xbc>)
 8000e3e:	f000 fa35 	bl	80012ac <setupMax30102>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e42:	f006 ff1b 	bl	8007c7c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of i2CMutex */
  i2CMutexHandle = osMutexNew(&i2CMutex_attributes);
 8000e46:	481c      	ldr	r0, [pc, #112]	; (8000eb8 <main+0xc0>)
 8000e48:	f007 f810 	bl	8007e6c <osMutexNew>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <main+0xc4>)
 8000e50:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of default_task */
  default_taskHandle = osThreadNew(start_default_task, NULL, &default_task_attributes);
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <main+0xc8>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	481b      	ldr	r0, [pc, #108]	; (8000ec4 <main+0xcc>)
 8000e58:	f006 ff5a 	bl	8007d10 <osThreadNew>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a1a      	ldr	r2, [pc, #104]	; (8000ec8 <main+0xd0>)
 8000e60:	6013      	str	r3, [r2, #0]

  /* creation of wright_to_displ */
  wright_to_displHandle = osThreadNew(start_wright_to_display_task, NULL, &wright_to_displ_attributes);
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <main+0xd4>)
 8000e64:	2100      	movs	r1, #0
 8000e66:	481a      	ldr	r0, [pc, #104]	; (8000ed0 <main+0xd8>)
 8000e68:	f006 ff52 	bl	8007d10 <osThreadNew>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <main+0xdc>)
 8000e70:	6013      	str	r3, [r2, #0]

  /* creation of read_heart_rate */
  read_heart_rateHandle = osThreadNew(start_read_heart_rate_task, NULL, &read_heart_rate_attributes);
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <main+0xe0>)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4819      	ldr	r0, [pc, #100]	; (8000edc <main+0xe4>)
 8000e78:	f006 ff4a 	bl	8007d10 <osThreadNew>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <main+0xe8>)
 8000e80:	6013      	str	r3, [r2, #0]

  /* creation of read_acceloroma */
  read_acceloromaHandle = osThreadNew(start_read_acceloromater_task, NULL, &read_acceloroma_attributes);
 8000e82:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <main+0xec>)
 8000e84:	2100      	movs	r1, #0
 8000e86:	4818      	ldr	r0, [pc, #96]	; (8000ee8 <main+0xf0>)
 8000e88:	f006 ff42 	bl	8007d10 <osThreadNew>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <main+0xf4>)
 8000e90:	6013      	str	r3, [r2, #0]

  /* creation of date_and_time_t */
  date_and_time_tHandle = osThreadNew(start_date_and_time_task, NULL, &date_and_time_t_attributes);
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <main+0xf8>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4817      	ldr	r0, [pc, #92]	; (8000ef4 <main+0xfc>)
 8000e98:	f006 ff3a 	bl	8007d10 <osThreadNew>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a16      	ldr	r2, [pc, #88]	; (8000ef8 <main+0x100>)
 8000ea0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ea2:	f006 ff0f 	bl	8007cc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <main+0xae>
 8000ea8:	20000028 	.word	0x20000028
 8000eac:	0800b574 	.word	0x0800b574
 8000eb0:	200000c0 	.word	0x200000c0
 8000eb4:	20001184 	.word	0x20001184
 8000eb8:	0800b68c 	.word	0x0800b68c
 8000ebc:	200001d4 	.word	0x200001d4
 8000ec0:	0800b5d8 	.word	0x0800b5d8
 8000ec4:	08001435 	.word	0x08001435
 8000ec8:	200001c0 	.word	0x200001c0
 8000ecc:	0800b5fc 	.word	0x0800b5fc
 8000ed0:	08001449 	.word	0x08001449
 8000ed4:	200001c4 	.word	0x200001c4
 8000ed8:	0800b620 	.word	0x0800b620
 8000edc:	0800157d 	.word	0x0800157d
 8000ee0:	200001c8 	.word	0x200001c8
 8000ee4:	0800b644 	.word	0x0800b644
 8000ee8:	080015d9 	.word	0x080015d9
 8000eec:	200001cc 	.word	0x200001cc
 8000ef0:	0800b668 	.word	0x0800b668
 8000ef4:	0800164d 	.word	0x0800164d
 8000ef8:	200001d0 	.word	0x200001d0

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b096      	sub	sp, #88	; 0x58
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2244      	movs	r2, #68	; 0x44
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f009 feca 	bl	800aca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f22:	f002 fced 	bl	8003900 <HAL_PWREx_ControlVoltageScaling>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f2c:	f000 fbf0 	bl	8001710 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f30:	230a      	movs	r3, #10
 8000f32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f42:	2302      	movs	r3, #2
 8000f44:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f46:	2302      	movs	r3, #2
 8000f48:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f52:	2307      	movs	r3, #7
 8000f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fd22 	bl	80039ac <HAL_RCC_OscConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000f6e:	f000 fbcf 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2303      	movs	r3, #3
 8000f78:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 f8ea 	bl	8004164 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f96:	f000 fbbb 	bl	8001710 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3758      	adds	r7, #88	; 0x58
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_I2C1_Init+0x74>)
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <MX_I2C1_Init+0x78>)
 8000fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <MX_I2C1_Init+0x7c>)
 8000fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <MX_I2C1_Init+0x74>)
 8000fe0:	f001 fbd6 	bl	8002790 <HAL_I2C_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fea:	f000 fb91 	bl	8001710 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <MX_I2C1_Init+0x74>)
 8000ff2:	f002 fbdf 	bl	80037b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ffc:	f000 fb88 	bl	8001710 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001000:	2100      	movs	r1, #0
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_I2C1_Init+0x74>)
 8001004:	f002 fc21 	bl	800384a <HAL_I2CEx_ConfigDigitalFilter>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800100e:	f000 fb7f 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000c0 	.word	0x200000c0
 800101c:	40005400 	.word	0x40005400
 8001020:	10909cec 	.word	0x10909cec

08001024 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b092      	sub	sp, #72	; 0x48
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800102a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	222c      	movs	r2, #44	; 0x2c
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f009 fe2d 	bl	800aca4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800104a:	4b44      	ldr	r3, [pc, #272]	; (800115c <MX_RTC_Init+0x138>)
 800104c:	4a44      	ldr	r2, [pc, #272]	; (8001160 <MX_RTC_Init+0x13c>)
 800104e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001050:	4b42      	ldr	r3, [pc, #264]	; (800115c <MX_RTC_Init+0x138>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001056:	4b41      	ldr	r3, [pc, #260]	; (800115c <MX_RTC_Init+0x138>)
 8001058:	227f      	movs	r2, #127	; 0x7f
 800105a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <MX_RTC_Init+0x138>)
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001062:	4b3e      	ldr	r3, [pc, #248]	; (800115c <MX_RTC_Init+0x138>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8001068:	4b3c      	ldr	r3, [pc, #240]	; (800115c <MX_RTC_Init+0x138>)
 800106a:	2202      	movs	r2, #2
 800106c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <MX_RTC_Init+0x138>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001074:	4b39      	ldr	r3, [pc, #228]	; (800115c <MX_RTC_Init+0x138>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800107a:	4838      	ldr	r0, [pc, #224]	; (800115c <MX_RTC_Init+0x138>)
 800107c:	f003 ff84 	bl	8004f88 <HAL_RTC_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001086:	f000 fb43 	bl	8001710 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 800108a:	2318      	movs	r3, #24
 800108c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001096:	2300      	movs	r3, #0
 8001098:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	482b      	ldr	r0, [pc, #172]	; (800115c <MX_RTC_Init+0x138>)
 80010ae:	f003 fff3 	bl	8005098 <HAL_RTC_SetTime>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80010b8:	f000 fb2a 	bl	8001710 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80010bc:	2303      	movs	r3, #3
 80010be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_DECEMBER;
 80010c2:	2312      	movs	r3, #18
 80010c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x11;
 80010c8:	2311      	movs	r3, #17
 80010ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	481f      	ldr	r0, [pc, #124]	; (800115c <MX_RTC_Init+0x138>)
 80010de:	f004 f8d4 	bl	800528a <HAL_RTC_SetDate>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80010e8:	f000 fb12 	bl	8001710 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 80010ec:	2303      	movs	r3, #3
 80010ee:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x3;
 80010f0:	2303      	movs	r3, #3
 80010f2:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001110:	2301      	movs	r3, #1
 8001112:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <MX_RTC_Init+0x138>)
 8001124:	f004 f986 	bl	8005434 <HAL_RTC_SetAlarm_IT>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 800112e:	f000 faef 	bl	8001710 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 8001132:	2100      	movs	r1, #0
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <MX_RTC_Init+0x138>)
 8001136:	f004 fbd9 	bl	80058ec <HAL_RTCEx_SetCalibrationOutPut>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_RTC_Init+0x120>
  {
    Error_Handler();
 8001140:	f000 fae6 	bl	8001710 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <MX_RTC_Init+0x138>)
 8001146:	f004 fc18 	bl	800597a <HAL_RTCEx_SetRefClock>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_RTC_Init+0x130>
  {
    Error_Handler();
 8001150:	f000 fade 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3748      	adds	r7, #72	; 0x48
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000114 	.word	0x20000114
 8001160:	40002800 	.word	0x40002800

08001164 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_USART2_UART_Init+0x58>)
 800116a:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <MX_USART2_UART_Init+0x5c>)
 800116c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_USART2_UART_Init+0x58>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART2_UART_Init+0x58>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART2_UART_Init+0x58>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART2_UART_Init+0x58>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART2_UART_Init+0x58>)
 80011a8:	f004 fee8 	bl	8005f7c <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011b2:	f000 faad 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000138 	.word	0x20000138
 80011c0:	40004400 	.word	0x40004400

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <MX_GPIO_Init+0xe0>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a31      	ldr	r2, [pc, #196]	; (80012a4 <MX_GPIO_Init+0xe0>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <MX_GPIO_Init+0xe0>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <MX_GPIO_Init+0xe0>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <MX_GPIO_Init+0xe0>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <MX_GPIO_Init+0xe0>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <MX_GPIO_Init+0xe0>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <MX_GPIO_Init+0xe0>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MX_GPIO_Init+0xe0>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <MX_GPIO_Init+0xe0>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <MX_GPIO_Init+0xe0>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_GPIO_Init+0xe0>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2120      	movs	r1, #32
 800123e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001242:	f001 fa8d 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800124c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4812      	ldr	r0, [pc, #72]	; (80012a8 <MX_GPIO_Init+0xe4>)
 800125e:	f001 f8d5 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : heartRateInterrupt_Pin */
  GPIO_InitStruct.Pin = heartRateInterrupt_Pin;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001266:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126c:	2301      	movs	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(heartRateInterrupt_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <MX_GPIO_Init+0xe4>)
 8001278:	f001 f8c8 	bl	800240c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800127c:	2320      	movs	r3, #32
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	2301      	movs	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f001 f8b9 	bl	800240c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000800 	.word	0x48000800

080012ac <setupMax30102>:

/* USER CODE BEGIN 4 */
void setupMax30102 (max30102_t *max30102)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]


	max30102_init(max30102, &hi2c1);
 80012b4:	491c      	ldr	r1, [pc, #112]	; (8001328 <setupMax30102+0x7c>)
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f005 fb7b 	bl	80069b2 <max30102_init>
	max30102_reset(max30102);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f005 fbef 	bl	8006aa0 <max30102_reset>
	max30102_clear_fifo(max30102);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f005 fd72 	bl	8006dac <max30102_clear_fifo>
	// FIFO configurations
	max30102_set_fifo_config(max30102, max30102_smp_ave_4, 1, 16);
 80012c8:	2310      	movs	r3, #16
 80012ca:	2201      	movs	r2, #1
 80012cc:	2102      	movs	r1, #2
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f005 fd32 	bl	8006d38 <max30102_set_fifo_config>
	max30102_set_mode(max30102, max30102_spo2);
 80012d4:	2103      	movs	r1, #3
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f005 fc4b 	bl	8006b72 <max30102_set_mode>
	// LED configurations
	max30102_set_led_pulse_width(max30102, max30102_pw_16_bit);
 80012dc:	2101      	movs	r1, #1
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f005 fc91 	bl	8006c06 <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(max30102, max30102_adc_4096);
 80012e4:	2101      	movs	r1, #1
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f005 fcb0 	bl	8006c4c <max30102_set_adc_resolution>
	max30102_set_sampling_rate(max30102, max30102_sr_400);
 80012ec:	2103      	movs	r1, #3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f005 fc65 	bl	8006bbe <max30102_set_sampling_rate>
	max30102_set_led_current_1(max30102, 10);
 80012f4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f005 fccd 	bl	8006c98 <max30102_set_led_current_1>
	max30102_set_led_current_2(max30102, 10);
 80012fe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f005 fcf0 	bl	8006ce8 <max30102_set_led_current_2>

	//max30102_set_multi_led_slot_1_2(max30102, max30102_led_red, max30102_led_off);
	//max30102_set_multi_led_slot_3_4(max30102, max30102_led_ir, max30102_led_off);

	// Enable FIFO_A_FULL interrupt
	max30102_set_a_full(max30102, 1);
 8001308:	2101      	movs	r1, #1
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f005 fbd9 	bl	8006ac2 <max30102_set_a_full>
	// Enable die temperature measurement
	max30102_set_die_temp_en(max30102, 1);
 8001310:	2101      	movs	r1, #1
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f005 fc15 	bl	8006b42 <max30102_set_die_temp_en>
	// Enable DIE_TEMP_RDY interrupt
	max30102_set_die_temp_rdy(max30102, 1);
 8001318:	2101      	movs	r1, #1
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f005 fbf9 	bl	8006b12 <max30102_set_die_temp_rdy>
	//max30102_set_ppg_rdy(max30102, 1);
	//max30102_set_alc_ovf(max30102, 1);


}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000c0 	.word	0x200000c0

0800132c <max30102_calculate_sample_data>:

void max30102_calculate_sample_data(int8_t num_samples)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	; 0x50
 8001330:	af04      	add	r7, sp, #16
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	/*
	uint8_t MSG[35] = {'\0'};
	sprintf(MSG, "  invalid bpm! %i", (unsigned int)bpm);
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG),HAL_MAX_DELAY);
	*/
	int8_t msg[35] = {'\0'};
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	221f      	movs	r2, #31
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f009 fcae 	bl	800aca4 <memset>

	for(int i = 0; i < num_samples; i++)
 8001348:	2300      	movs	r3, #0
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800134c:	e061      	b.n	8001412 <max30102_calculate_sample_data+0xe6>
	{
//		sprintf(msg, "%i : %i ", (int)max30102._ir_samples[i],(int)max30102._red_samples[i]);
//		HAL_UART_Transmit(&huart2, msg, sizeof(msg),HAL_MAX_DELAY);
		userHeartData.irBuffer[userHeartData.bufferCounter] = max30102._ir_samples[i];
 800134e:	4b36      	ldr	r3, [pc, #216]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b35      	ldr	r3, [pc, #212]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	441a      	add	r2, r3
 800135a:	4934      	ldr	r1, [pc, #208]	; (800142c <max30102_calculate_sample_data+0x100>)
 800135c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	6013      	str	r3, [r2, #0]
		userHeartData.redBuffer[userHeartData.bufferCounter] = max30102._red_samples[i];
 8001366:	4b30      	ldr	r3, [pc, #192]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	441a      	add	r2, r3
 8001372:	492e      	ldr	r1, [pc, #184]	; (800142c <max30102_calculate_sample_data+0x100>)
 8001374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001376:	3320      	adds	r3, #32
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	440b      	add	r3, r1
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	6013      	str	r3, [r2, #0]
		userHeartData.bufferCounter++;
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	3301      	adds	r3, #1
 8001386:	4a28      	ldr	r2, [pc, #160]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 8001388:	6093      	str	r3, [r2, #8]
		if(userHeartData.bufferCounter == BUFFER_SIZE)
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001392:	d134      	bne.n	80013fe <max30102_calculate_sample_data+0xd2>
		{
			memset(msg, 0, sizeof msg);
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	2223      	movs	r2, #35	; 0x23
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f009 fc81 	bl	800aca4 <memset>
			int32_t spo2;
			int8_t spo2V;
			int32_t bpm;
			int8_t bpmV;
			maxim_heart_rate_and_oxygen_saturation(userHeartData.irBuffer, userHeartData.redBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLING_RATE,
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	f107 030b 	add.w	r3, r7, #11
 80013ae:	9303      	str	r3, [sp, #12]
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	f107 0313 	add.w	r3, r7, #19
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	2300      	movs	r3, #0
 80013c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80013c8:	f005 fd76 	bl	8006eb8 <maxim_heart_rate_and_oxygen_saturation>
					0, &spo2, &spo2V, &bpm, &bpmV);
	        if(spo2V)
 80013cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <max30102_calculate_sample_data+0xb0>
	        {
	        	userData.spO2 = spo2;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	4a16      	ldr	r2, [pc, #88]	; (8001430 <max30102_calculate_sample_data+0x104>)
 80013d8:	6113      	str	r3, [r2, #16]
 80013da:	e002      	b.n	80013e2 <max30102_calculate_sample_data+0xb6>
	        }
	        else{
	        	userData.spO2 = 0;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <max30102_calculate_sample_data+0x104>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
	        }

	        if(bpmV)
 80013e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <max30102_calculate_sample_data+0xc6>
	        {

	        	userData.bpm = bpm;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4a10      	ldr	r2, [pc, #64]	; (8001430 <max30102_calculate_sample_data+0x104>)
 80013ee:	60d3      	str	r3, [r2, #12]
 80013f0:	e002      	b.n	80013f8 <max30102_calculate_sample_data+0xcc>

	        }
	        else{
	        	userData.bpm = 0;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <max30102_calculate_sample_data+0x104>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	60da      	str	r2, [r3, #12]
	        }
	        userHeartData.bufferCounter = 0;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <max30102_calculate_sample_data+0xfc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
		}

		memset(msg, 0, sizeof msg);
 80013fe:	f107 0318 	add.w	r3, r7, #24
 8001402:	2223      	movs	r2, #35	; 0x23
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f009 fc4c 	bl	800aca4 <memset>
	for(int i = 0; i < num_samples; i++)
 800140c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800140e:	3301      	adds	r3, #1
 8001410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001418:	429a      	cmp	r2, r3
 800141a:	db98      	blt.n	800134e <max30102_calculate_sample_data+0x22>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3740      	adds	r7, #64	; 0x40
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000018 	.word	0x20000018
 800142c:	20001184 	.word	0x20001184
 8001430:	20000000 	.word	0x20000000

08001434 <start_default_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_default_task */
void start_default_task(void *argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800143c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001440:	f006 fcf9 	bl	8007e36 <osDelay>
 8001444:	e7fa      	b.n	800143c <start_default_task+0x8>
	...

08001448 <start_wright_to_display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_wright_to_display_task */
void start_wright_to_display_task(void *argument)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b098      	sub	sp, #96	; 0x60
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_wright_to_display_task */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 8001450:	4b41      	ldr	r3, [pc, #260]	; (8001558 <start_wright_to_display_task+0x110>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	4618      	mov	r0, r3
 800145a:	f007 fa79 	bl	8008950 <xQueueSemaphoreTake>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d174      	bne.n	800154e <start_wright_to_display_task+0x106>
	  {

		  ssd1306_Fill(Black);
 8001464:	2000      	movs	r0, #0
 8001466:	f000 fcfb 	bl	8001e60 <ssd1306_Fill>
		  ssd1306_SetCursor(0,0);
 800146a:	2100      	movs	r1, #0
 800146c:	2000      	movs	r0, #0
 800146e:	f000 fe45 	bl	80020fc <ssd1306_SetCursor>

		  char temp [4][19];
		  //"     hh-mm PM     ";
		  char *ampm = ((userData.am) ? "AM" : "PM");
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <start_wright_to_display_task+0x114>)
 8001474:	7a1b      	ldrb	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <start_wright_to_display_task+0x36>
 800147a:	4b39      	ldr	r3, [pc, #228]	; (8001560 <start_wright_to_display_task+0x118>)
 800147c:	e000      	b.n	8001480 <start_wright_to_display_task+0x38>
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <start_wright_to_display_task+0x11c>)
 8001480:	657b      	str	r3, [r7, #84]	; 0x54
		  snprintf(temp[0], 19, "     %02i-%02i %.2s     " ,userData.hour ,userData.min ,ampm);
 8001482:	4b36      	ldr	r3, [pc, #216]	; (800155c <start_wright_to_display_task+0x114>)
 8001484:	6819      	ldr	r1, [r3, #0]
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <start_wright_to_display_task+0x114>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f107 0008 	add.w	r0, r7, #8
 800148e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001490:	9201      	str	r2, [sp, #4]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	460b      	mov	r3, r1
 8001496:	4a34      	ldr	r2, [pc, #208]	; (8001568 <start_wright_to_display_task+0x120>)
 8001498:	2113      	movs	r1, #19
 800149a:	f009 fbcf 	bl	800ac3c <sniprintf>
		  ssd1306_WriteString(temp[0], Font_7x10 ,White);
 800149e:	4a33      	ldr	r2, [pc, #204]	; (800156c <start_wright_to_display_task+0x124>)
 80014a0:	f107 0008 	add.w	r0, r7, #8
 80014a4:	2301      	movs	r3, #1
 80014a6:	ca06      	ldmia	r2, {r1, r2}
 80014a8:	f000 fe02 	bl	80020b0 <ssd1306_WriteString>

		  ssd1306_SetCursor(0,20);
 80014ac:	2114      	movs	r1, #20
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 fe24 	bl	80020fc <ssd1306_SetCursor>
		  snprintf(temp[1], 19, "BPM: %i", userData.bpm);
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <start_wright_to_display_task+0x114>)
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	f103 0013 	add.w	r0, r3, #19
 80014c0:	4613      	mov	r3, r2
 80014c2:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <start_wright_to_display_task+0x128>)
 80014c4:	2113      	movs	r1, #19
 80014c6:	f009 fbb9 	bl	800ac3c <sniprintf>
		  ssd1306_WriteString(temp[1], Font_7x10, White);
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <start_wright_to_display_task+0x124>)
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	f103 0013 	add.w	r0, r3, #19
 80014d4:	2301      	movs	r3, #1
 80014d6:	ca06      	ldmia	r2, {r1, r2}
 80014d8:	f000 fdea 	bl	80020b0 <ssd1306_WriteString>


		  ssd1306_SetCursor(0,30);
 80014dc:	211e      	movs	r1, #30
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 fe0c 	bl	80020fc <ssd1306_SetCursor>
		  snprintf(temp[2], 19, "BO2: %i%%", userData.spO2);
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <start_wright_to_display_task+0x114>)
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80014f0:	4613      	mov	r3, r2
 80014f2:	4a20      	ldr	r2, [pc, #128]	; (8001574 <start_wright_to_display_task+0x12c>)
 80014f4:	2113      	movs	r1, #19
 80014f6:	f009 fba1 	bl	800ac3c <sniprintf>
		  ssd1306_WriteString(temp[2], Font_7x10, White);
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <start_wright_to_display_task+0x124>)
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8001504:	2301      	movs	r3, #1
 8001506:	ca06      	ldmia	r2, {r1, r2}
 8001508:	f000 fdd2 	bl	80020b0 <ssd1306_WriteString>


		  ssd1306_SetCursor(0,40);
 800150c:	2128      	movs	r1, #40	; 0x28
 800150e:	2000      	movs	r0, #0
 8001510:	f000 fdf4 	bl	80020fc <ssd1306_SetCursor>
		  snprintf(temp[3], 19, "Steps: %i", userData.steps);
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <start_wright_to_display_task+0x114>)
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	f107 0308 	add.w	r3, r7, #8
 800151c:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8001520:	4613      	mov	r3, r2
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <start_wright_to_display_task+0x130>)
 8001524:	2113      	movs	r1, #19
 8001526:	f009 fb89 	bl	800ac3c <sniprintf>
		  ssd1306_WriteString(temp[3], Font_7x10, White);
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <start_wright_to_display_task+0x124>)
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8001534:	2301      	movs	r3, #1
 8001536:	ca06      	ldmia	r2, {r1, r2}
 8001538:	f000 fdba 	bl	80020b0 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 800153c:	f000 fcb4 	bl	8001ea8 <ssd1306_UpdateScreen>

	  xSemaphoreGive(i2CMutexHandle);
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <start_wright_to_display_task+0x110>)
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	2300      	movs	r3, #0
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	f006 ff87 	bl	800845c <xQueueGenericSend>
	  }

	  osDelay(1000);
 800154e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001552:	f006 fc70 	bl	8007e36 <osDelay>
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 8001556:	e77b      	b.n	8001450 <start_wright_to_display_task+0x8>
 8001558:	200001d4 	.word	0x200001d4
 800155c:	20000000 	.word	0x20000000
 8001560:	0800b57c 	.word	0x0800b57c
 8001564:	0800b580 	.word	0x0800b580
 8001568:	0800b584 	.word	0x0800b584
 800156c:	20000028 	.word	0x20000028
 8001570:	0800b5a0 	.word	0x0800b5a0
 8001574:	0800b5a8 	.word	0x0800b5a8
 8001578:	0800b5b4 	.word	0x0800b5b4

0800157c <start_read_heart_rate_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_heart_rate_task */
void start_read_heart_rate_task(void *argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	//if(max30102_has_interrupt(&max30102))
	//{
		//taskENTER_CRITICAL();

		if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <start_read_heart_rate_task+0x54>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	4618      	mov	r0, r3
 800158e:	f007 f9df 	bl	8008950 <xQueueSemaphoreTake>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d116      	bne.n	80015c6 <start_read_heart_rate_task+0x4a>
		{
			uint8_t reg[2] = {0x00};
 8001598:	2300      	movs	r3, #0
 800159a:	81bb      	strh	r3, [r7, #12]
			    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
			    max30102_read(&max30102, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 800159c:	f107 020c 	add.w	r2, r7, #12
 80015a0:	2302      	movs	r3, #2
 80015a2:	2100      	movs	r1, #0
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <start_read_heart_rate_task+0x58>)
 80015a6:	f005 fa56 	bl	8006a56 <max30102_read>

			    if (!(reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 80015aa:	7b3b      	ldrb	r3, [r7, #12]
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db02      	blt.n	80015b8 <start_read_heart_rate_task+0x3c>
			    {

			        // FIFO almost full
			        max30102_read_fifo(&max30102);
 80015b2:	4808      	ldr	r0, [pc, #32]	; (80015d4 <start_read_heart_rate_task+0x58>)
 80015b4:	f005 fc19 	bl	8006dea <max30102_read_fifo>
			    }
			//max30102_interrupt_handler(&max30102);
			xSemaphoreGive(i2CMutexHandle);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <start_read_heart_rate_task+0x54>)
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	2300      	movs	r3, #0
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	f006 ff4b 	bl	800845c <xQueueGenericSend>



		//taskEXIT_CRITICAL();
	//}
    osDelay(50);
 80015c6:	2032      	movs	r0, #50	; 0x32
 80015c8:	f006 fc35 	bl	8007e36 <osDelay>
		if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 80015cc:	e7da      	b.n	8001584 <start_read_heart_rate_task+0x8>
 80015ce:	bf00      	nop
 80015d0:	200001d4 	.word	0x200001d4
 80015d4:	20001184 	.word	0x20001184

080015d8 <start_read_acceloromater_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_acceloromater_task */
void start_read_acceloromater_task(void *argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_read_acceloromater_task */
  /* Infinite loop */
  for(;;)
  {

	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <start_read_acceloromater_task+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	4618      	mov	r0, r3
 80015ea:	f007 f9b1 	bl	8008950 <xQueueSemaphoreTake>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d11e      	bne.n	8001632 <start_read_acceloromater_task+0x5a>
	  	  {
		  	 adxl_retrive_data(&hi2c1, &pedometerData);
 80015f4:	4912      	ldr	r1, [pc, #72]	; (8001640 <start_read_acceloromater_task+0x68>)
 80015f6:	4813      	ldr	r0, [pc, #76]	; (8001644 <start_read_acceloromater_task+0x6c>)
 80015f8:	f000 fb3a 	bl	8001c70 <adxl_retrive_data>

		  	 if(pedometerData.x + pedometerData.y >= 4)
 80015fc:	4b10      	ldr	r3, [pc, #64]	; (8001640 <start_read_acceloromater_task+0x68>)
 80015fe:	ed93 7a00 	vldr	s14, [r3]
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <start_read_acceloromater_task+0x68>)
 8001604:	edd3 7a01 	vldr	s15, [r3, #4]
 8001608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	db04      	blt.n	8001624 <start_read_acceloromater_task+0x4c>
		  	 {
		  		 userData.steps++;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <start_read_acceloromater_task+0x70>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	4a09      	ldr	r2, [pc, #36]	; (8001648 <start_read_acceloromater_task+0x70>)
 8001622:	6153      	str	r3, [r2, #20]
		  	 }

			 xSemaphoreGive(i2CMutexHandle);
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <start_read_acceloromater_task+0x64>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	f006 ff15 	bl	800845c <xQueueGenericSend>
	  	  }

    osDelay(1252);
 8001632:	f240 40e4 	movw	r0, #1252	; 0x4e4
 8001636:	f006 fbfe 	bl	8007e36 <osDelay>
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 800163a:	e7d1      	b.n	80015e0 <start_read_acceloromater_task+0x8>
 800163c:	200001d4 	.word	0x200001d4
 8001640:	200001d8 	.word	0x200001d8
 8001644:	200000c0 	.word	0x200000c0
 8001648:	20000000 	.word	0x20000000

0800164c <start_date_and_time_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_date_and_time_task */
void start_date_and_time_task(void *argument)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_date_and_time_task */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <start_date_and_time_task+0x8c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	4618      	mov	r0, r3
 800165e:	f007 f977 	bl	8008950 <xQueueSemaphoreTake>
 8001662:	4603      	mov	r3, r0
 8001664:	2b01      	cmp	r3, #1
 8001666:	d132      	bne.n	80016ce <start_date_and_time_task+0x82>
	  {
		 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001668:	2200      	movs	r2, #0
 800166a:	491c      	ldr	r1, [pc, #112]	; (80016dc <start_date_and_time_task+0x90>)
 800166c:	481c      	ldr	r0, [pc, #112]	; (80016e0 <start_date_and_time_task+0x94>)
 800166e:	f003 fe93 	bl	8005398 <HAL_RTC_GetDate>
		 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001672:	2200      	movs	r2, #0
 8001674:	491b      	ldr	r1, [pc, #108]	; (80016e4 <start_date_and_time_task+0x98>)
 8001676:	481a      	ldr	r0, [pc, #104]	; (80016e0 <start_date_and_time_task+0x94>)
 8001678:	f003 fdab 	bl	80051d2 <HAL_RTC_GetTime>
		 if(sTime.Hours < 12){
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <start_date_and_time_task+0x98>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b0b      	cmp	r3, #11
 8001682:	d810      	bhi.n	80016a6 <start_date_and_time_task+0x5a>
			 userData.am = 1;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <start_date_and_time_task+0x9c>)
 8001686:	2201      	movs	r2, #1
 8001688:	721a      	strb	r2, [r3, #8]
			 if(sTime.Hours == 0){
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <start_date_and_time_task+0x98>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <start_date_and_time_task+0x4e>
				 userData.hour = 12;
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <start_date_and_time_task+0x9c>)
 8001694:	220c      	movs	r2, #12
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e00d      	b.n	80016b6 <start_date_and_time_task+0x6a>
			 } else {
				 userData.hour = sTime.Hours;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <start_date_and_time_task+0x98>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <start_date_and_time_task+0x9c>)
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e007      	b.n	80016b6 <start_date_and_time_task+0x6a>
			 }

		 } else {
		 	userData.am = 0;
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <start_date_and_time_task+0x9c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	721a      	strb	r2, [r3, #8]
		 	userData.hour = sTime.Hours - 12;
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <start_date_and_time_task+0x98>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	3b0c      	subs	r3, #12
 80016b2:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <start_date_and_time_task+0x9c>)
 80016b4:	6013      	str	r3, [r2, #0]
		 }

		 	  userData.min = sTime.Minutes;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <start_date_and_time_task+0x98>)
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <start_date_and_time_task+0x9c>)
 80016be:	605a      	str	r2, [r3, #4]
		 	  xSemaphoreGive(i2CMutexHandle);
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <start_date_and_time_task+0x8c>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	f006 fec7 	bl	800845c <xQueueGenericSend>
	  }

	  osDelay(1000);
 80016ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d2:	f006 fbb0 	bl	8007e36 <osDelay>
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 80016d6:	e7bd      	b.n	8001654 <start_date_and_time_task+0x8>
 80016d8:	200001d4 	.word	0x200001d4
 80016dc:	200000bc 	.word	0x200000bc
 80016e0:	20000114 	.word	0x20000114
 80016e4:	200000a8 	.word	0x200000a8
 80016e8:	20000000 	.word	0x20000000

080016ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016fe:	f000 fd5f 	bl	80021c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40001000 	.word	0x40001000

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	e7fe      	b.n	8001718 <Error_Handler+0x8>
	...

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_MspInit+0x4c>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_MspInit+0x4c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6613      	str	r3, [r2, #96]	; 0x60
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_MspInit+0x4c>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_MspInit+0x4c>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_MspInit+0x4c>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_MspInit+0x4c>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	210f      	movs	r1, #15
 8001756:	f06f 0001 	mvn.w	r0, #1
 800175a:	f000 fe2d 	bl	80023b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0ac      	sub	sp, #176	; 0xb0
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2288      	movs	r2, #136	; 0x88
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f009 fa89 	bl	800aca4 <memset>
  if(hi2c->Instance==I2C1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a21      	ldr	r2, [pc, #132]	; (800181c <HAL_I2C_MspInit+0xb0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d13b      	bne.n	8001814 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800179c:	2340      	movs	r3, #64	; 0x40
 800179e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 ff31 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017b4:	f7ff ffac 	bl	8001710 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	4a18      	ldr	r2, [pc, #96]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 80017c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ea:	2304      	movs	r3, #4
 80017ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017f4:	4619      	mov	r1, r3
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <HAL_I2C_MspInit+0xb8>)
 80017f8:	f000 fe08 	bl	800240c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 8001802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_I2C_MspInit+0xb4>)
 800180a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001814:	bf00      	nop
 8001816:	37b0      	adds	r7, #176	; 0xb0
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40005400 	.word	0x40005400
 8001820:	40021000 	.word	0x40021000
 8001824:	48000400 	.word	0x48000400

08001828 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0aa      	sub	sp, #168	; 0xa8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	2288      	movs	r2, #136	; 0x88
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f009 fa2b 	bl	800aca4 <memset>
  if(hrtc->Instance==RTC)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a25      	ldr	r2, [pc, #148]	; (80018e8 <HAL_RTC_MspInit+0xc0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d142      	bne.n	80018de <HAL_RTC_MspInit+0xb6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800185c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800185e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fed0 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8001876:	f7ff ff4b 	bl	8001710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_RTC_MspInit+0xc4>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_RTC_MspInit+0xc4>)
 8001882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_RTC_MspInit+0xc4>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_RTC_MspInit+0xc4>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_RTC_MspInit+0xc4>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80018a2:	f248 0304 	movw	r3, #32772	; 0x8004
 80018a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018c6:	4619      	mov	r1, r3
 80018c8:	4809      	ldr	r0, [pc, #36]	; (80018f0 <HAL_RTC_MspInit+0xc8>)
 80018ca:	f000 fd9f 	bl	800240c <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2105      	movs	r1, #5
 80018d2:	2029      	movs	r0, #41	; 0x29
 80018d4:	f000 fd70 	bl	80023b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80018d8:	2029      	movs	r0, #41	; 0x29
 80018da:	f000 fd89 	bl	80023f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	37a8      	adds	r7, #168	; 0xa8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40002800 	.word	0x40002800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400

080018f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0ac      	sub	sp, #176	; 0xb0
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2288      	movs	r2, #136	; 0x88
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f009 f9c5 	bl	800aca4 <memset>
  if(huart->Instance==USART2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a21      	ldr	r2, [pc, #132]	; (80019a4 <HAL_UART_MspInit+0xb0>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d13b      	bne.n	800199c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001928:	2300      	movs	r3, #0
 800192a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fe6d 	bl	8004610 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800193c:	f7ff fee8 	bl	8001710 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_UART_MspInit+0xb4>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <HAL_UART_MspInit+0xb4>)
 8001946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194a:	6593      	str	r3, [r2, #88]	; 0x58
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_UART_MspInit+0xb4>)
 800194e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_UART_MspInit+0xb4>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_UART_MspInit+0xb4>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_UART_MspInit+0xb4>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001970:	230c      	movs	r3, #12
 8001972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001988:	2307      	movs	r3, #7
 800198a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001998:	f000 fd38 	bl	800240c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	37b0      	adds	r7, #176	; 0xb0
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_InitTick+0xe0>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	4a33      	ldr	r2, [pc, #204]	; (8001a8c <HAL_InitTick+0xe0>)
 80019c0:	f043 0310 	orr.w	r3, r3, #16
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_InitTick+0xe0>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019d2:	f107 0210 	add.w	r2, r7, #16
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fd85 	bl	80044ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d103      	bne.n	80019f4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ec:	f002 fd52 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 80019f0:	6378      	str	r0, [r7, #52]	; 0x34
 80019f2:	e004      	b.n	80019fe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019f4:	f002 fd4e 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 80019f8:	4603      	mov	r3, r0
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a00:	4a23      	ldr	r2, [pc, #140]	; (8001a90 <HAL_InitTick+0xe4>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9b      	lsrs	r3, r3, #18
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_InitTick+0xe8>)
 8001a0e:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <HAL_InitTick+0xec>)
 8001a10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_InitTick+0xe8>)
 8001a14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_InitTick+0xe8>)
 8001a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_InitTick+0xe8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_InitTick+0xe8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_InitTick+0xe8>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a32:	4818      	ldr	r0, [pc, #96]	; (8001a94 <HAL_InitTick+0xe8>)
 8001a34:	f003 ffef 	bl	8005a16 <HAL_TIM_Base_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11b      	bne.n	8001a7e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <HAL_InitTick+0xe8>)
 8001a48:	f004 f846 	bl	8005ad8 <HAL_TIM_Base_Start_IT>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d111      	bne.n	8001a7e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a5a:	2036      	movs	r0, #54	; 0x36
 8001a5c:	f000 fcc8 	bl	80023f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	d808      	bhi.n	8001a78 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a66:	2200      	movs	r2, #0
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	2036      	movs	r0, #54	; 0x36
 8001a6c:	f000 fca4 	bl	80023b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_InitTick+0xf0>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e002      	b.n	8001a7e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3738      	adds	r7, #56	; 0x38
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	431bde83 	.word	0x431bde83
 8001a94:	2000128c 	.word	0x2000128c
 8001a98:	40001000 	.word	0x40001000
 8001a9c:	20000030 	.word	0x20000030

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <HardFault_Handler+0x4>

08001aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <MemManage_Handler+0x4>

08001ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <BusFault_Handler+0x4>

08001ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <UsageFault_Handler+0x4>

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ad0:	4802      	ldr	r0, [pc, #8]	; (8001adc <RTC_Alarm_IRQHandler+0x10>)
 8001ad2:	f003 fdeb 	bl	80056ac <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000114 	.word	0x20000114

08001ae0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <TIM6_DAC_IRQHandler+0x10>)
 8001ae6:	f004 f867 	bl	8005bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	2000128c 	.word	0x2000128c

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f009 f92c 	bl	800ad80 <__errno>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20018000 	.word	0x20018000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	200012d8 	.word	0x200012d8
 8001b5c:	20006c10 	.word	0x20006c10

08001b60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <SystemInit+0x20>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <SystemInit+0x20>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b88:	f7ff ffea 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b8e:	490d      	ldr	r1, [pc, #52]	; (8001bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b90:	4a0d      	ldr	r2, [pc, #52]	; (8001bc8 <LoopForever+0xe>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b94:	e002      	b.n	8001b9c <LoopCopyDataInit>

08001b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9a:	3304      	adds	r3, #4

08001b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba0:	d3f9      	bcc.n	8001b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ba4:	4c0a      	ldr	r4, [pc, #40]	; (8001bd0 <LoopForever+0x16>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba8:	e001      	b.n	8001bae <LoopFillZerobss>

08001baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bac:	3204      	adds	r2, #4

08001bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb0:	d3fb      	bcc.n	8001baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bb2:	f009 f8eb 	bl	800ad8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bb6:	f7ff f91f 	bl	8000df8 <main>

08001bba <LoopForever>:

LoopForever:
    b LoopForever
 8001bba:	e7fe      	b.n	8001bba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001bc8:	0800bf8c 	.word	0x0800bf8c
  ldr r2, =_sbss
 8001bcc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001bd0:	20006c10 	.word	0x20006c10

08001bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bd4:	e7fe      	b.n	8001bd4 <ADC1_2_IRQHandler>

08001bd6 <adxl_write>:
 *
 *      Author: Everett
 */
#include "stm32_ADXL345_Driver.h"

void adxl_write (I2C_HandleTypeDef *hi2cl, uint8_t reg, uint8_t value){
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af02      	add	r7, sp, #8
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]
 8001be2:	4613      	mov	r3, r2
 8001be4:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2];
	data[0] = reg;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 8001bea:	78bb      	ldrb	r3, [r7, #2]
 8001bec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (hi2cl, ADXL345_I2C_ADDRESS, data, 2,10);
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	21a6      	movs	r1, #166	; 0xa6
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fe64 	bl	80028c8 <HAL_I2C_Master_Transmit>
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <adxl_read>:

void adxl_read (I2C_HandleTypeDef *hi2cl, uint8_t reg, uint8_t value, uint8_t * data_rec){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	72fb      	strb	r3, [r7, #11]
 8001c16:	4613      	mov	r3, r2
 8001c18:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Mem_Read(hi2cl, ADXL345_I2C_ADDRESS, reg, 1,data_rec, 6, 100);
 8001c1a:	7afb      	ldrb	r3, [r7, #11]
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	9302      	str	r3, [sp, #8]
 8001c22:	2306      	movs	r3, #6
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	21a6      	movs	r1, #166	; 0xa6
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f001 f96c 	bl	8002f0c <HAL_I2C_Mem_Read>
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <adxl_init>:

void adxl_init (I2C_HandleTypeDef * hi2cl)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	//reset everything
	adxl_write (hi2cl, 0x2d, 0);
 8001c44:	2200      	movs	r2, #0
 8001c46:	212d      	movs	r1, #45	; 0x2d
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffc4 	bl	8001bd6 <adxl_write>


	adxl_write(hi2cl, 0x2d, 0x08); // measure bit 1, wakeup 0, 0 at 8hz
 8001c4e:	2208      	movs	r2, #8
 8001c50:	212d      	movs	r1, #45	; 0x2d
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffbf 	bl	8001bd6 <adxl_write>

	adxl_write (hi2cl, 0x31, 0x01); // +- 4g range
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2131      	movs	r1, #49	; 0x31
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ffba 	bl	8001bd6 <adxl_write>

}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	0000      	movs	r0, r0
 8001c6c:	0000      	movs	r0, r0
	...

08001c70 <adxl_retrive_data>:

void adxl_retrive_data (I2C_HandleTypeDef *hi2cl, ADXL_Data_t *data)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
	uint8_t rec[6];
	adxl_read(hi2cl, 0x32, 6, rec);
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2206      	movs	r2, #6
 8001c80:	2132      	movs	r1, #50	; 0x32
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffc0 	bl	8001c08 <adxl_read>

	data->x = (rec[1]<<8 | rec[0]) * .0078;
 8001c88:	7a7b      	ldrb	r3, [r7, #9]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	7a3a      	ldrb	r2, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc3f 	bl	8000514 <__aeabi_i2d>
 8001c96:	a31e      	add	r3, pc, #120	; (adr r3, 8001d10 <adxl_retrive_data+0xa0>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fca4 	bl	80005e8 <__aeabi_dmul>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7fe fed0 	bl	8000a4c <__aeabi_d2f>
 8001cac:	4602      	mov	r2, r0
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	601a      	str	r2, [r3, #0]
	data->y = (rec[3]<<8 | rec[2]) * .0078;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	7aba      	ldrb	r2, [r7, #10]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc2a 	bl	8000514 <__aeabi_i2d>
 8001cc0:	a313      	add	r3, pc, #76	; (adr r3, 8001d10 <adxl_retrive_data+0xa0>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fc8f 	bl	80005e8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7fe febb 	bl	8000a4c <__aeabi_d2f>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	605a      	str	r2, [r3, #4]
	data->z = (rec[5]<<8 | rec[4]) * .0078;
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	021b      	lsls	r3, r3, #8
 8001ce0:	7b3a      	ldrb	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc15 	bl	8000514 <__aeabi_i2d>
 8001cea:	a309      	add	r3, pc, #36	; (adr r3, 8001d10 <adxl_retrive_data+0xa0>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fc7a 	bl	80005e8 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7fe fea6 	bl	8000a4c <__aeabi_d2f>
 8001d00:	4602      	mov	r2, r0
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	609a      	str	r2, [r3, #8]


}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	8e8a71de 	.word	0x8e8a71de
 8001d14:	3f7ff2e4 	.word	0x3f7ff2e4

08001d18 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af04      	add	r7, sp, #16
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	9302      	str	r3, [sp, #8]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2301      	movs	r3, #1
 8001d42:	2200      	movs	r2, #0
 8001d44:	2178      	movs	r1, #120	; 0x78
 8001d46:	4803      	ldr	r0, [pc, #12]	; (8001d54 <ssd1306_WriteCommand+0x2c>)
 8001d48:	f000 ffcc 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200000c0 	.word	0x200000c0

08001d58 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af04      	add	r7, sp, #16
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6a:	9202      	str	r2, [sp, #8]
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	2178      	movs	r1, #120	; 0x78
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <ssd1306_WriteData+0x30>)
 8001d7a:	f000 ffb3 	bl	8002ce4 <HAL_I2C_Mem_Write>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200000c0 	.word	0x200000c0

08001d8c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001d90:	f7ff ffc2 	bl	8001d18 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	f000 fa33 	bl	8002200 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f9da 	bl	8002154 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001da0:	2020      	movs	r0, #32
 8001da2:	f7ff ffc1 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff ffbe 	bl	8001d28 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001dac:	20b0      	movs	r0, #176	; 0xb0
 8001dae:	f7ff ffbb 	bl	8001d28 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001db2:	20c8      	movs	r0, #200	; 0xc8
 8001db4:	f7ff ffb8 	bl	8001d28 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff ffb5 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001dbe:	2010      	movs	r0, #16
 8001dc0:	f7ff ffb2 	bl	8001d28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001dc4:	2040      	movs	r0, #64	; 0x40
 8001dc6:	f7ff ffaf 	bl	8001d28 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001dca:	20ff      	movs	r0, #255	; 0xff
 8001dcc:	f000 f9ae 	bl	800212c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001dd0:	20a1      	movs	r0, #161	; 0xa1
 8001dd2:	f7ff ffa9 	bl	8001d28 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001dd6:	20a6      	movs	r0, #166	; 0xa6
 8001dd8:	f7ff ffa6 	bl	8001d28 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ddc:	20a8      	movs	r0, #168	; 0xa8
 8001dde:	f7ff ffa3 	bl	8001d28 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001de2:	203f      	movs	r0, #63	; 0x3f
 8001de4:	f7ff ffa0 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001de8:	20a4      	movs	r0, #164	; 0xa4
 8001dea:	f7ff ff9d 	bl	8001d28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001dee:	20d3      	movs	r0, #211	; 0xd3
 8001df0:	f7ff ff9a 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff ff97 	bl	8001d28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001dfa:	20d5      	movs	r0, #213	; 0xd5
 8001dfc:	f7ff ff94 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001e00:	20f0      	movs	r0, #240	; 0xf0
 8001e02:	f7ff ff91 	bl	8001d28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001e06:	20d9      	movs	r0, #217	; 0xd9
 8001e08:	f7ff ff8e 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001e0c:	2022      	movs	r0, #34	; 0x22
 8001e0e:	f7ff ff8b 	bl	8001d28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001e12:	20da      	movs	r0, #218	; 0xda
 8001e14:	f7ff ff88 	bl	8001d28 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001e18:	2012      	movs	r0, #18
 8001e1a:	f7ff ff85 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001e1e:	20db      	movs	r0, #219	; 0xdb
 8001e20:	f7ff ff82 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001e24:	2020      	movs	r0, #32
 8001e26:	f7ff ff7f 	bl	8001d28 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001e2a:	208d      	movs	r0, #141	; 0x8d
 8001e2c:	f7ff ff7c 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001e30:	2014      	movs	r0, #20
 8001e32:	f7ff ff79 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001e36:	2001      	movs	r0, #1
 8001e38:	f000 f98c 	bl	8002154 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 f80f 	bl	8001e60 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001e42:	f000 f831 	bl	8001ea8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <ssd1306_Init+0xd0>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <ssd1306_Init+0xd0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001e52:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <ssd1306_Init+0xd0>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	711a      	strb	r2, [r3, #4]
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200016dc 	.word	0x200016dc

08001e60 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e00d      	b.n	8001e8c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <ssd1306_Fill+0x1a>
 8001e76:	2100      	movs	r1, #0
 8001e78:	e000      	b.n	8001e7c <ssd1306_Fill+0x1c>
 8001e7a:	21ff      	movs	r1, #255	; 0xff
 8001e7c:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <ssd1306_Fill+0x44>)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4413      	add	r3, r2
 8001e82:	460a      	mov	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d3ed      	bcc.n	8001e70 <ssd1306_Fill+0x10>
    }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	200012dc 	.word	0x200012dc

08001ea8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e016      	b.n	8001ee2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	3b50      	subs	r3, #80	; 0x50
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff34 	bl	8001d28 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff ff31 	bl	8001d28 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001ec6:	2010      	movs	r0, #16
 8001ec8:	f7ff ff2e 	bl	8001d28 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	01db      	lsls	r3, r3, #7
 8001ed0:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <ssd1306_UpdateScreen+0x4c>)
 8001ed2:	4413      	add	r3, r2
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff3e 	bl	8001d58 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d9e5      	bls.n	8001eb4 <ssd1306_UpdateScreen+0xc>
    }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200012dc 	.word	0x200012dc

08001ef8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	460b      	mov	r3, r1
 8001f04:	71bb      	strb	r3, [r7, #6]
 8001f06:	4613      	mov	r3, r2
 8001f08:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db3d      	blt.n	8001f8e <ssd1306_DrawPixel+0x96>
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	2b3f      	cmp	r3, #63	; 0x3f
 8001f16:	d83a      	bhi.n	8001f8e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d11a      	bne.n	8001f54 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	08db      	lsrs	r3, r3, #3
 8001f24:	b2d8      	uxtb	r0, r3
 8001f26:	4603      	mov	r3, r0
 8001f28:	01db      	lsls	r3, r3, #7
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <ssd1306_DrawPixel+0xa4>)
 8001f2e:	5cd3      	ldrb	r3, [r2, r3]
 8001f30:	b25a      	sxtb	r2, r3
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	2101      	movs	r1, #1
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	b25b      	sxtb	r3, r3
 8001f40:	4313      	orrs	r3, r2
 8001f42:	b259      	sxtb	r1, r3
 8001f44:	79fa      	ldrb	r2, [r7, #7]
 8001f46:	4603      	mov	r3, r0
 8001f48:	01db      	lsls	r3, r3, #7
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2c9      	uxtb	r1, r1
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <ssd1306_DrawPixel+0xa4>)
 8001f50:	54d1      	strb	r1, [r2, r3]
 8001f52:	e01d      	b.n	8001f90 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f54:	79fa      	ldrb	r2, [r7, #7]
 8001f56:	79bb      	ldrb	r3, [r7, #6]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	b2d8      	uxtb	r0, r3
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	01db      	lsls	r3, r3, #7
 8001f60:	4413      	add	r3, r2
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <ssd1306_DrawPixel+0xa4>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	b25a      	sxtb	r2, r3
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	b259      	sxtb	r1, r3
 8001f7e:	79fa      	ldrb	r2, [r7, #7]
 8001f80:	4603      	mov	r3, r0
 8001f82:	01db      	lsls	r3, r3, #7
 8001f84:	4413      	add	r3, r2
 8001f86:	b2c9      	uxtb	r1, r1
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <ssd1306_DrawPixel+0xa4>)
 8001f8a:	54d1      	strb	r1, [r2, r3]
 8001f8c:	e000      	b.n	8001f90 <ssd1306_DrawPixel+0x98>
        return;
 8001f8e:	bf00      	nop
    }
}
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200012dc 	.word	0x200012dc

08001fa0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	1d38      	adds	r0, r7, #4
 8001faa:	e880 0006 	stmia.w	r0, {r1, r2}
 8001fae:	461a      	mov	r2, r3
 8001fb0:	4623      	mov	r3, r4
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	2b1f      	cmp	r3, #31
 8001fbc:	d902      	bls.n	8001fc4 <ssd1306_WriteChar+0x24>
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	2b7e      	cmp	r3, #126	; 0x7e
 8001fc2:	d901      	bls.n	8001fc8 <ssd1306_WriteChar+0x28>
        return 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e06d      	b.n	80020a4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001fc8:	4b38      	ldr	r3, [pc, #224]	; (80020ac <ssd1306_WriteChar+0x10c>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	793b      	ldrb	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	2b80      	cmp	r3, #128	; 0x80
 8001fd4:	dc06      	bgt.n	8001fe4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001fd6:	4b35      	ldr	r3, [pc, #212]	; (80020ac <ssd1306_WriteChar+0x10c>)
 8001fd8:	885b      	ldrh	r3, [r3, #2]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	797b      	ldrb	r3, [r7, #5]
 8001fde:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001fe0:	2b40      	cmp	r3, #64	; 0x40
 8001fe2:	dd01      	ble.n	8001fe8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e05d      	b.n	80020a4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	e04c      	b.n	8002088 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	3b20      	subs	r3, #32
 8001ff4:	7979      	ldrb	r1, [r7, #5]
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	440b      	add	r3, r1
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e034      	b.n	8002078 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d012      	beq.n	8002044 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <ssd1306_WriteChar+0x10c>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	4413      	add	r3, r2
 800202a:	b2d8      	uxtb	r0, r3
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <ssd1306_WriteChar+0x10c>)
 800202e:	885b      	ldrh	r3, [r3, #2]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	b2db      	uxtb	r3, r3
 8002036:	4413      	add	r3, r2
 8002038:	b2db      	uxtb	r3, r3
 800203a:	7bba      	ldrb	r2, [r7, #14]
 800203c:	4619      	mov	r1, r3
 800203e:	f7ff ff5b 	bl	8001ef8 <ssd1306_DrawPixel>
 8002042:	e016      	b.n	8002072 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <ssd1306_WriteChar+0x10c>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4413      	add	r3, r2
 8002050:	b2d8      	uxtb	r0, r3
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <ssd1306_WriteChar+0x10c>)
 8002054:	885b      	ldrh	r3, [r3, #2]
 8002056:	b2da      	uxtb	r2, r3
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4413      	add	r3, r2
 800205e:	b2d9      	uxtb	r1, r3
 8002060:	7bbb      	ldrb	r3, [r7, #14]
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf0c      	ite	eq
 8002066:	2301      	moveq	r3, #1
 8002068:	2300      	movne	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	f7ff ff43 	bl	8001ef8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3301      	adds	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	793b      	ldrb	r3, [r7, #4]
 800207a:	461a      	mov	r2, r3
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	4293      	cmp	r3, r2
 8002080:	d3c5      	bcc.n	800200e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	797b      	ldrb	r3, [r7, #5]
 800208a:	461a      	mov	r2, r3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4293      	cmp	r3, r2
 8002090:	d3ad      	bcc.n	8001fee <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <ssd1306_WriteChar+0x10c>)
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	793b      	ldrb	r3, [r7, #4]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4413      	add	r3, r2
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b03      	ldr	r3, [pc, #12]	; (80020ac <ssd1306_WriteChar+0x10c>)
 80020a0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3724      	adds	r7, #36	; 0x24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	200016dc 	.word	0x200016dc

080020b0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	1d38      	adds	r0, r7, #4
 80020ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80020be:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80020c0:	e012      	b.n	80020e8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	7818      	ldrb	r0, [r3, #0]
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	1d3a      	adds	r2, r7, #4
 80020ca:	ca06      	ldmia	r2, {r1, r2}
 80020cc:	f7ff ff68 	bl	8001fa0 <ssd1306_WriteChar>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d002      	beq.n	80020e2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	e008      	b.n	80020f4 <ssd1306_WriteString+0x44>
        }
        str++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e8      	bne.n	80020c2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	781b      	ldrb	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	460a      	mov	r2, r1
 8002106:	71fb      	strb	r3, [r7, #7]
 8002108:	4613      	mov	r3, r2
 800210a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <ssd1306_SetCursor+0x2c>)
 8002112:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002114:	79bb      	ldrb	r3, [r7, #6]
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <ssd1306_SetCursor+0x2c>)
 800211a:	805a      	strh	r2, [r3, #2]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	200016dc 	.word	0x200016dc

0800212c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002136:	2381      	movs	r3, #129	; 0x81
 8002138:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fdf3 	bl	8001d28 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fdef 	bl	8001d28 <ssd1306_WriteCommand>
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002164:	23af      	movs	r3, #175	; 0xaf
 8002166:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <ssd1306_SetDisplayOn+0x38>)
 800216a:	2201      	movs	r2, #1
 800216c:	715a      	strb	r2, [r3, #5]
 800216e:	e004      	b.n	800217a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002170:	23ae      	movs	r3, #174	; 0xae
 8002172:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <ssd1306_SetDisplayOn+0x38>)
 8002176:	2200      	movs	r2, #0
 8002178:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fdd3 	bl	8001d28 <ssd1306_WriteCommand>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200016dc 	.word	0x200016dc

08002190 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800219a:	2003      	movs	r0, #3
 800219c:	f000 f901 	bl	80023a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a0:	200f      	movs	r0, #15
 80021a2:	f7ff fc03 	bl	80019ac <HAL_InitTick>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	71fb      	strb	r3, [r7, #7]
 80021b0:	e001      	b.n	80021b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021b2:	f7ff fab3 	bl	800171c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021b6:	79fb      	ldrb	r3, [r7, #7]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000034 	.word	0x20000034
 80021e4:	200016e4 	.word	0x200016e4

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200016e4 	.word	0x200016e4

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff ffee 	bl	80021e8 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffde 	bl	80021e8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000034 	.word	0x20000034

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	; (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	; (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	; (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	; 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff4c 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023ca:	f7ff ff61 	bl	8002290 <__NVIC_GetPriorityGrouping>
 80023ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	6978      	ldr	r0, [r7, #20]
 80023d6:	f7ff ffb1 	bl	800233c <NVIC_EncodePriority>
 80023da:	4602      	mov	r2, r0
 80023dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff80 	bl	80022e8 <__NVIC_SetPriority>
}
 80023e8:	bf00      	nop
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff54 	bl	80022ac <__NVIC_EnableIRQ>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800241a:	e17f      	b.n	800271c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	2101      	movs	r1, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	4013      	ands	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8171 	beq.w	8002716 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d005      	beq.n	800244c <HAL_GPIO_Init+0x40>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d130      	bne.n	80024ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002482:	2201      	movs	r2, #1
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 0201 	and.w	r2, r3, #1
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d118      	bne.n	80024ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d017      	beq.n	8002528 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d123      	bne.n	800257c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	6939      	ldr	r1, [r7, #16]
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80ac 	beq.w	8002716 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	4b5f      	ldr	r3, [pc, #380]	; (800273c <HAL_GPIO_Init+0x330>)
 80025c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c2:	4a5e      	ldr	r2, [pc, #376]	; (800273c <HAL_GPIO_Init+0x330>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ca:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_GPIO_Init+0x330>)
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025d6:	4a5a      	ldr	r2, [pc, #360]	; (8002740 <HAL_GPIO_Init+0x334>)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002600:	d025      	beq.n	800264e <HAL_GPIO_Init+0x242>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4f      	ldr	r2, [pc, #316]	; (8002744 <HAL_GPIO_Init+0x338>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01f      	beq.n	800264a <HAL_GPIO_Init+0x23e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4e      	ldr	r2, [pc, #312]	; (8002748 <HAL_GPIO_Init+0x33c>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x23a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4d      	ldr	r2, [pc, #308]	; (800274c <HAL_GPIO_Init+0x340>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x236>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4c      	ldr	r2, [pc, #304]	; (8002750 <HAL_GPIO_Init+0x344>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x232>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <HAL_GPIO_Init+0x348>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x22e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4a      	ldr	r2, [pc, #296]	; (8002758 <HAL_GPIO_Init+0x34c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x22a>
 8002632:	2306      	movs	r3, #6
 8002634:	e00c      	b.n	8002650 <HAL_GPIO_Init+0x244>
 8002636:	2307      	movs	r3, #7
 8002638:	e00a      	b.n	8002650 <HAL_GPIO_Init+0x244>
 800263a:	2305      	movs	r3, #5
 800263c:	e008      	b.n	8002650 <HAL_GPIO_Init+0x244>
 800263e:	2304      	movs	r3, #4
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x244>
 8002642:	2303      	movs	r3, #3
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x244>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x244>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x244>
 800264e:	2300      	movs	r3, #0
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002660:	4937      	ldr	r1, [pc, #220]	; (8002740 <HAL_GPIO_Init+0x334>)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_GPIO_Init+0x350>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002692:	4a32      	ldr	r2, [pc, #200]	; (800275c <HAL_GPIO_Init+0x350>)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_GPIO_Init+0x350>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026bc:	4a27      	ldr	r2, [pc, #156]	; (800275c <HAL_GPIO_Init+0x350>)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_GPIO_Init+0x350>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026e6:	4a1d      	ldr	r2, [pc, #116]	; (800275c <HAL_GPIO_Init+0x350>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_GPIO_Init+0x350>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <HAL_GPIO_Init+0x350>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	3301      	adds	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	f47f ae78 	bne.w	800241c <HAL_GPIO_Init+0x10>
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40010000 	.word	0x40010000
 8002744:	48000400 	.word	0x48000400
 8002748:	48000800 	.word	0x48000800
 800274c:	48000c00 	.word	0x48000c00
 8002750:	48001000 	.word	0x48001000
 8002754:	48001400 	.word	0x48001400
 8002758:	48001800 	.word	0x48001800
 800275c:	40010400 	.word	0x40010400

08002760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
 800276c:	4613      	mov	r3, r2
 800276e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800277c:	e002      	b.n	8002784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e08d      	b.n	80028be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe ffd8 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	e006      	b.n	8002818 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002816:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d108      	bne.n	8002832 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	e007      	b.n	8002842 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002840:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002854:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002864:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69d9      	ldr	r1, [r3, #28]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1a      	ldr	r2, [r3, #32]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	f040 80fd 	bne.w	8002ae4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_I2C_Master_Transmit+0x30>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e0f6      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x21e>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002900:	f7ff fc72 	bl	80021e8 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2319      	movs	r3, #25
 800290c:	2201      	movs	r2, #1
 800290e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fce0 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0e1      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2221      	movs	r2, #33	; 0x21
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2210      	movs	r2, #16
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	893a      	ldrh	r2, [r7, #8]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	2bff      	cmp	r3, #255	; 0xff
 8002952:	d906      	bls.n	8002962 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	22ff      	movs	r2, #255	; 0xff
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800295a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	e007      	b.n	8002972 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800296c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002970:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d024      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	4b4e      	ldr	r3, [pc, #312]	; (8002af0 <HAL_I2C_Master_Transmit+0x228>)
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fec7 	bl	8003750 <I2C_TransferConfig>
 80029c2:	e066      	b.n	8002a92 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	8979      	ldrh	r1, [r7, #10]
 80029cc:	4b48      	ldr	r3, [pc, #288]	; (8002af0 <HAL_I2C_Master_Transmit+0x228>)
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 febc 	bl	8003750 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80029d8:	e05b      	b.n	8002a92 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	6a39      	ldr	r1, [r7, #32]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fcc9 	bl	8003376 <I2C_WaitOnTXISFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07b      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d034      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0x1ca>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d130      	bne.n	8002a92 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2200      	movs	r2, #0
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fc4c 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e04d      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2bff      	cmp	r3, #255	; 0xff
 8002a52:	d90e      	bls.n	8002a72 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	22ff      	movs	r2, #255	; 0xff
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	8979      	ldrh	r1, [r7, #10]
 8002a62:	2300      	movs	r3, #0
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fe70 	bl	8003750 <I2C_TransferConfig>
 8002a70:	e00f      	b.n	8002a92 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	8979      	ldrh	r1, [r7, #10]
 8002a84:	2300      	movs	r3, #0
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fe5f 	bl	8003750 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d19e      	bne.n	80029da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	6a39      	ldr	r1, [r7, #32]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fcaf 	bl	8003404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e01a      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_I2C_Master_Transmit+0x22c>)
 8002ac4:	400b      	ands	r3, r1
 8002ac6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	80002000 	.word	0x80002000
 8002af4:	fe00e800 	.word	0xfe00e800

08002af8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	461a      	mov	r2, r3
 8002b04:	460b      	mov	r3, r1
 8002b06:	817b      	strh	r3, [r7, #10]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	f040 80db 	bne.w	8002cd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_I2C_Master_Receive+0x30>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e0d4      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x1da>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b30:	f7ff fb5a 	bl	80021e8 <HAL_GetTick>
 8002b34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	2319      	movs	r3, #25
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fbc8 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e0bf      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2222      	movs	r2, #34	; 0x22
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2bff      	cmp	r3, #255	; 0xff
 8002b82:	d90e      	bls.n	8002ba2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <HAL_I2C_Master_Receive+0x1e4>)
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fdd8 	bl	8003750 <I2C_TransferConfig>
 8002ba0:	e06d      	b.n	8002c7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <HAL_I2C_Master_Receive+0x1e4>)
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fdc7 	bl	8003750 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002bc2:	e05c      	b.n	8002c7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6a39      	ldr	r1, [r7, #32]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fc5f 	bl	800348c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e07c      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d034      	beq.n	8002c7e <HAL_I2C_Master_Receive+0x186>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d130      	bne.n	8002c7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2200      	movs	r2, #0
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fb56 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e04d      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2bff      	cmp	r3, #255	; 0xff
 8002c3e:	d90e      	bls.n	8002c5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	22ff      	movs	r2, #255	; 0xff
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	8979      	ldrh	r1, [r7, #10]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fd7a 	bl	8003750 <I2C_TransferConfig>
 8002c5c:	e00f      	b.n	8002c7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	8979      	ldrh	r1, [r7, #10]
 8002c70:	2300      	movs	r3, #0
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fd69 	bl	8003750 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d19d      	bne.n	8002bc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	6a39      	ldr	r1, [r7, #32]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fbb9 	bl	8003404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e01a      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_I2C_Master_Receive+0x1e8>)
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e000      	b.n	8002cd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	80002400 	.word	0x80002400
 8002ce0:	fe00e800 	.word	0xfe00e800

08002ce4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	4608      	mov	r0, r1
 8002cee:	4611      	mov	r1, r2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	817b      	strh	r3, [r7, #10]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	813b      	strh	r3, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	f040 80f9 	bne.w	8002efe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_I2C_Mem_Write+0x34>
 8002d12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0ed      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_I2C_Mem_Write+0x4e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0e6      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d3a:	f7ff fa55 	bl	80021e8 <HAL_GetTick>
 8002d3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2319      	movs	r3, #25
 8002d46:	2201      	movs	r2, #1
 8002d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fac3 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0d1      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2221      	movs	r2, #33	; 0x21
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2240      	movs	r2, #64	; 0x40
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d84:	88f8      	ldrh	r0, [r7, #6]
 8002d86:	893a      	ldrh	r2, [r7, #8]
 8002d88:	8979      	ldrh	r1, [r7, #10]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	4603      	mov	r3, r0
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f9d3 	bl	8003140 <I2C_RequestMemoryWrite>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0a9      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2bff      	cmp	r3, #255	; 0xff
 8002db4:	d90e      	bls.n	8002dd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	8979      	ldrh	r1, [r7, #10]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fcbf 	bl	8003750 <I2C_TransferConfig>
 8002dd2:	e00f      	b.n	8002df4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	2300      	movs	r3, #0
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fcae 	bl	8003750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fabc 	bl	8003376 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e07b      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	781a      	ldrb	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d034      	beq.n	8002eac <HAL_I2C_Mem_Write+0x1c8>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d130      	bne.n	8002eac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	2200      	movs	r2, #0
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fa3f 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e04d      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2bff      	cmp	r3, #255	; 0xff
 8002e6c:	d90e      	bls.n	8002e8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	22ff      	movs	r2, #255	; 0xff
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	8979      	ldrh	r1, [r7, #10]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fc63 	bl	8003750 <I2C_TransferConfig>
 8002e8a:	e00f      	b.n	8002eac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	8979      	ldrh	r1, [r7, #10]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fc52 	bl	8003750 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d19e      	bne.n	8002df4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 faa2 	bl	8003404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e01a      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_I2C_Mem_Write+0x224>)
 8002ede:	400b      	ands	r3, r1
 8002ee0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	e000      	b.n	8002f00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	fe00e800 	.word	0xfe00e800

08002f0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	4608      	mov	r0, r1
 8002f16:	4611      	mov	r1, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	817b      	strh	r3, [r7, #10]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	813b      	strh	r3, [r7, #8]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	f040 80fd 	bne.w	800312e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x34>
 8002f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0f1      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_I2C_Mem_Read+0x4e>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0ea      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f62:	f7ff f941 	bl	80021e8 <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2319      	movs	r3, #25
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f9af 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0d5      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2222      	movs	r2, #34	; 0x22
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2240      	movs	r2, #64	; 0x40
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fac:	88f8      	ldrh	r0, [r7, #6]
 8002fae:	893a      	ldrh	r2, [r7, #8]
 8002fb0:	8979      	ldrh	r1, [r7, #10]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4603      	mov	r3, r0
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f913 	bl	80031e8 <I2C_RequestMemoryRead>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0ad      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2bff      	cmp	r3, #255	; 0xff
 8002fdc:	d90e      	bls.n	8002ffc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	22ff      	movs	r2, #255	; 0xff
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	8979      	ldrh	r1, [r7, #10]
 8002fec:	4b52      	ldr	r3, [pc, #328]	; (8003138 <HAL_I2C_Mem_Read+0x22c>)
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fbab 	bl	8003750 <I2C_TransferConfig>
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	b2da      	uxtb	r2, r3
 800300c:	8979      	ldrh	r1, [r7, #10]
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_I2C_Mem_Read+0x22c>)
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fb9a 	bl	8003750 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	2200      	movs	r2, #0
 8003024:	2104      	movs	r1, #4
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f956 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e07c      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	b2d2      	uxtb	r2, r2
 8003042:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d034      	beq.n	80030dc <HAL_I2C_Mem_Read+0x1d0>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	2b00      	cmp	r3, #0
 8003078:	d130      	bne.n	80030dc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f927 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e04d      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2bff      	cmp	r3, #255	; 0xff
 800309c:	d90e      	bls.n	80030bc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	22ff      	movs	r2, #255	; 0xff
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	8979      	ldrh	r1, [r7, #10]
 80030ac:	2300      	movs	r3, #0
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fb4b 	bl	8003750 <I2C_TransferConfig>
 80030ba:	e00f      	b.n	80030dc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	8979      	ldrh	r1, [r7, #10]
 80030ce:	2300      	movs	r3, #0
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fb3a 	bl	8003750 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d19a      	bne.n	800301c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f98a 	bl	8003404 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e01a      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_I2C_Mem_Read+0x230>)
 800310e:	400b      	ands	r3, r1
 8003110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	80002400 	.word	0x80002400
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	4608      	mov	r0, r1
 800314a:	4611      	mov	r1, r2
 800314c:	461a      	mov	r2, r3
 800314e:	4603      	mov	r3, r0
 8003150:	817b      	strh	r3, [r7, #10]
 8003152:	460b      	mov	r3, r1
 8003154:	813b      	strh	r3, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	8979      	ldrh	r1, [r7, #10]
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <I2C_RequestMemoryWrite+0xa4>)
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 faf1 	bl	8003750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	69b9      	ldr	r1, [r7, #24]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f8ff 	bl	8003376 <I2C_WaitOnTXISFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e02c      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003188:	893b      	ldrh	r3, [r7, #8]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
 8003192:	e015      	b.n	80031c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	69b9      	ldr	r1, [r7, #24]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f8e5 	bl	8003376 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e012      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b6:	893b      	ldrh	r3, [r7, #8]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2200      	movs	r2, #0
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f884 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	80002000 	.word	0x80002000

080031e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	8979      	ldrh	r1, [r7, #10]
 8003208:	4b20      	ldr	r3, [pc, #128]	; (800328c <I2C_RequestMemoryRead+0xa4>)
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 fa9e 	bl	8003750 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	69b9      	ldr	r1, [r7, #24]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f8ac 	bl	8003376 <I2C_WaitOnTXISFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e02c      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d105      	bne.n	800323a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
 8003238:	e015      	b.n	8003266 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800323a:	893b      	ldrh	r3, [r7, #8]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	b29b      	uxth	r3, r3
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f892 	bl	8003376 <I2C_WaitOnTXISFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e012      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2200      	movs	r2, #0
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f831 	bl	80032d8 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	80002000 	.word	0x80002000

08003290 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d103      	bne.n	80032ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d007      	beq.n	80032cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	619a      	str	r2, [r3, #24]
  }
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e8:	e031      	b.n	800334e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f0:	d02d      	beq.n	800334e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f2:	f7fe ff79 	bl	80021e8 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d122      	bne.n	800334e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4013      	ands	r3, r2
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	429a      	cmp	r2, r3
 8003324:	d113      	bne.n	800334e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	f043 0220 	orr.w	r2, r3, #32
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e00f      	b.n	800336e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	429a      	cmp	r2, r3
 800336a:	d0be      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003382:	e033      	b.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f901 	bl	8003590 <I2C_IsErrorOccurred>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e031      	b.n	80033fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d025      	beq.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a0:	f7fe ff22 	bl	80021e8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d302      	bcc.n	80033b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d11a      	bne.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d013      	beq.n	80033ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e007      	b.n	80033fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d1c4      	bne.n	8003384 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003410:	e02f      	b.n	8003472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8ba 	bl	8003590 <I2C_IsErrorOccurred>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e02d      	b.n	8003482 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fe fedf 	bl	80021e8 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d11a      	bne.n	8003472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	d013      	beq.n	8003472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e007      	b.n	8003482 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	d1c8      	bne.n	8003412 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003498:	e06b      	b.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68b9      	ldr	r1, [r7, #8]
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f876 	bl	8003590 <I2C_IsErrorOccurred>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e069      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d138      	bne.n	800352e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d105      	bne.n	80034d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e055      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d107      	bne.n	80034f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2210      	movs	r2, #16
 80034ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2204      	movs	r2, #4
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
 80034f2:	e002      	b.n	80034fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2220      	movs	r2, #32
 8003500:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800350e:	400b      	ands	r3, r1
 8003510:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e029      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fe fe5b 	bl	80021e8 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d116      	bne.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b04      	cmp	r3, #4
 8003550:	d00f      	beq.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e007      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d18c      	bne.n	800349a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	fe00e800 	.word	0xfe00e800

08003590 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d068      	beq.n	800368e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2210      	movs	r2, #16
 80035c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035c4:	e049      	b.n	800365a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d045      	beq.n	800365a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe fe0b 	bl	80021e8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_IsErrorOccurred+0x54>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d13a      	bne.n	800365a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003606:	d121      	bne.n	800364c <I2C_IsErrorOccurred+0xbc>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800360e:	d01d      	beq.n	800364c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b20      	cmp	r3, #32
 8003614:	d01a      	beq.n	800364c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003624:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003626:	f7fe fddf 	bl	80021e8 <HAL_GetTick>
 800362a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800362c:	e00e      	b.n	800364c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800362e:	f7fe fddb 	bl	80021e8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b19      	cmp	r3, #25
 800363a:	d907      	bls.n	800364c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f043 0320 	orr.w	r3, r3, #32
 8003642:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800364a:	e006      	b.n	800365a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b20      	cmp	r3, #32
 8003658:	d1e9      	bne.n	800362e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0320 	and.w	r3, r3, #32
 8003664:	2b20      	cmp	r3, #32
 8003666:	d003      	beq.n	8003670 <I2C_IsErrorOccurred+0xe0>
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0aa      	beq.n	80035c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003674:	2b00      	cmp	r3, #0
 8003676:	d103      	bne.n	8003680 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2220      	movs	r2, #32
 800367e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f043 0308 	orr.w	r3, r3, #8
 80036c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01c      	beq.n	800373e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff fdc3 	bl	8003290 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <I2C_IsErrorOccurred+0x1bc>)
 8003716:	400b      	ands	r3, r1
 8003718:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	431a      	orrs	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800373e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003742:	4618      	mov	r0, r3
 8003744:	3728      	adds	r7, #40	; 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	fe00e800 	.word	0xfe00e800

08003750 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	817b      	strh	r3, [r7, #10]
 800375e:	4613      	mov	r3, r2
 8003760:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003768:	7a7b      	ldrb	r3, [r7, #9]
 800376a:	041b      	lsls	r3, r3, #16
 800376c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003770:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	4313      	orrs	r3, r2
 800377a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800377e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	0d5b      	lsrs	r3, r3, #21
 800378a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <I2C_TransferConfig+0x60>)
 8003790:	430b      	orrs	r3, r1
 8003792:	43db      	mvns	r3, r3
 8003794:	ea02 0103 	and.w	r1, r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	03ff63ff 	.word	0x03ff63ff

080037b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d138      	bne.n	800383c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e032      	b.n	800383e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2224      	movs	r2, #36	; 0x24
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003806:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	e000      	b.n	800383e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2302      	movs	r3, #2
  }
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b20      	cmp	r3, #32
 800385e:	d139      	bne.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800386a:	2302      	movs	r3, #2
 800386c:	e033      	b.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2224      	movs	r2, #36	; 0x24
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800389c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <HAL_PWREx_GetVoltageRange+0x18>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40007000 	.word	0x40007000

08003900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800390e:	d130      	bne.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003910:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d038      	beq.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003926:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800392c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2232      	movs	r2, #50	; 0x32
 8003934:	fb02 f303 	mul.w	r3, r2, r3
 8003938:	4a1b      	ldr	r2, [pc, #108]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0c9b      	lsrs	r3, r3, #18
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003944:	e002      	b.n	800394c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3b01      	subs	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003958:	d102      	bne.n	8003960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f2      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396c:	d110      	bne.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e00f      	b.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800397a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800397e:	d007      	beq.n	8003990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003988:	4a05      	ldr	r2, [pc, #20]	; (80039a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800398e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40007000 	.word	0x40007000
 80039a4:	20000024 	.word	0x20000024
 80039a8:	431bde83 	.word	0x431bde83

080039ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e3ca      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039be:	4b97      	ldr	r3, [pc, #604]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c8:	4b94      	ldr	r3, [pc, #592]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80e4 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <HAL_RCC_OscConfig+0x4a>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	f040 808b 	bne.w	8003b04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	f040 8087 	bne.w	8003b04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039f6:	4b89      	ldr	r3, [pc, #548]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <HAL_RCC_OscConfig+0x62>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e3a2      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1a      	ldr	r2, [r3, #32]
 8003a12:	4b82      	ldr	r3, [pc, #520]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d004      	beq.n	8003a28 <HAL_RCC_OscConfig+0x7c>
 8003a1e:	4b7f      	ldr	r3, [pc, #508]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a26:	e005      	b.n	8003a34 <HAL_RCC_OscConfig+0x88>
 8003a28:	4b7c      	ldr	r3, [pc, #496]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d223      	bcs.n	8003a80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fd87 	bl	8004550 <RCC_SetFlashLatencyFromMSIRange>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e383      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a4c:	4b73      	ldr	r3, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a72      	ldr	r2, [pc, #456]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a52:	f043 0308 	orr.w	r3, r3, #8
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b70      	ldr	r3, [pc, #448]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	496d      	ldr	r1, [pc, #436]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6a:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	4968      	ldr	r1, [pc, #416]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
 8003a7e:	e025      	b.n	8003acc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a80:	4b66      	ldr	r3, [pc, #408]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a65      	ldr	r2, [pc, #404]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a86:	f043 0308 	orr.w	r3, r3, #8
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b63      	ldr	r3, [pc, #396]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	4960      	ldr	r1, [pc, #384]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a9e:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	495b      	ldr	r1, [pc, #364]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fd47 	bl	8004550 <RCC_SetFlashLatencyFromMSIRange>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e343      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003acc:	f000 fc4a 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	4950      	ldr	r1, [pc, #320]	; (8003c20 <HAL_RCC_OscConfig+0x274>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	4a4e      	ldr	r2, [pc, #312]	; (8003c24 <HAL_RCC_OscConfig+0x278>)
 8003aea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aec:	4b4e      	ldr	r3, [pc, #312]	; (8003c28 <HAL_RCC_OscConfig+0x27c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fd ff5b 	bl	80019ac <HAL_InitTick>
 8003af6:	4603      	mov	r3, r0
 8003af8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d052      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	e327      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d032      	beq.n	8003b72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b0c:	4b43      	ldr	r3, [pc, #268]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a42      	ldr	r2, [pc, #264]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b18:	f7fe fb66 	bl	80021e8 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b20:	f7fe fb62 	bl	80021e8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e310      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b32:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b3e:	4b37      	ldr	r3, [pc, #220]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a36      	ldr	r2, [pc, #216]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b44:	f043 0308 	orr.w	r3, r3, #8
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4931      	ldr	r1, [pc, #196]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b5c:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	492c      	ldr	r1, [pc, #176]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	e01a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a29      	ldr	r2, [pc, #164]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b78:	f023 0301 	bic.w	r3, r3, #1
 8003b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fb33 	bl	80021e8 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b86:	f7fe fb2f 	bl	80021e8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e2dd      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b98:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x1da>
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d074      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d005      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x21a>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b0c      	cmp	r3, #12
 8003bbe:	d10e      	bne.n	8003bde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d10b      	bne.n	8003bde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d064      	beq.n	8003c9c <HAL_RCC_OscConfig+0x2f0>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d160      	bne.n	8003c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e2ba      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x24a>
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0b      	ldr	r2, [pc, #44]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e026      	b.n	8003c44 <HAL_RCC_OscConfig+0x298>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfe:	d115      	bne.n	8003c2c <HAL_RCC_OscConfig+0x280>
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a05      	ldr	r2, [pc, #20]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a02      	ldr	r2, [pc, #8]	; (8003c1c <HAL_RCC_OscConfig+0x270>)
 8003c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e014      	b.n	8003c44 <HAL_RCC_OscConfig+0x298>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	0800b69c 	.word	0x0800b69c
 8003c24:	20000024 	.word	0x20000024
 8003c28:	20000030 	.word	0x20000030
 8003c2c:	4ba0      	ldr	r3, [pc, #640]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a9f      	ldr	r2, [pc, #636]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b9d      	ldr	r3, [pc, #628]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a9c      	ldr	r2, [pc, #624]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fe facc 	bl	80021e8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe fac8 	bl	80021e8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e276      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c66:	4b92      	ldr	r3, [pc, #584]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x2a8>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fe fab8 	bl	80021e8 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fe fab4 	bl	80021e8 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e262      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8e:	4b88      	ldr	r3, [pc, #544]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2d0>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d060      	beq.n	8003d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_OscConfig+0x310>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d119      	bne.n	8003cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d116      	bne.n	8003cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cbc:	4b7c      	ldr	r3, [pc, #496]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x328>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e23f      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b76      	ldr	r3, [pc, #472]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	4973      	ldr	r1, [pc, #460]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce8:	e040      	b.n	8003d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d023      	beq.n	8003d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf2:	4b6f      	ldr	r3, [pc, #444]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6e      	ldr	r2, [pc, #440]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fe fa73 	bl	80021e8 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fe fa6f 	bl	80021e8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e21d      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d18:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b62      	ldr	r3, [pc, #392]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	495f      	ldr	r1, [pc, #380]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	e018      	b.n	8003d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3a:	4b5d      	ldr	r3, [pc, #372]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fe fa4f 	bl	80021e8 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fe fa4b 	bl	80021e8 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1f9      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d60:	4b53      	ldr	r3, [pc, #332]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01c      	beq.n	8003dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d80:	4b4b      	ldr	r3, [pc, #300]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d86:	4a4a      	ldr	r2, [pc, #296]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fe fa2a 	bl	80021e8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe fa26 	bl	80021e8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1d4      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003daa:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ef      	beq.n	8003d98 <HAL_RCC_OscConfig+0x3ec>
 8003db8:	e01b      	b.n	8003df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc0:	4a3b      	ldr	r2, [pc, #236]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe fa0d 	bl	80021e8 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fe fa09 	bl	80021e8 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1b7      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de4:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ef      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80a6 	beq.w	8003f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e00:	2300      	movs	r3, #0
 8003e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e04:	4b2a      	ldr	r3, [pc, #168]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e10:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e14:	4a26      	ldr	r2, [pc, #152]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1c:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2c:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d118      	bne.n	8003e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e38:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e44:	f7fe f9d0 	bl	80021e8 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4c:	f7fe f9cc 	bl	80021e8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e17a      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_RCC_OscConfig+0x508>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d108      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4d8>
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e78:	4a0d      	ldr	r2, [pc, #52]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e82:	e029      	b.n	8003ed8 <HAL_RCC_OscConfig+0x52c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b05      	cmp	r3, #5
 8003e8a:	d115      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x50c>
 8003e8c:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	4a07      	ldr	r2, [pc, #28]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	4a03      	ldr	r2, [pc, #12]	; (8003eb0 <HAL_RCC_OscConfig+0x504>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eac:	e014      	b.n	8003ed8 <HAL_RCC_OscConfig+0x52c>
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	4b9c      	ldr	r3, [pc, #624]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	4a9b      	ldr	r2, [pc, #620]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec8:	4b98      	ldr	r3, [pc, #608]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	4a97      	ldr	r2, [pc, #604]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d016      	beq.n	8003f0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fe f982 	bl	80021e8 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee8:	f7fe f97e 	bl	80021e8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e12a      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efe:	4b8b      	ldr	r3, [pc, #556]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ed      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x53c>
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fe f96b 	bl	80021e8 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f14:	e00a      	b.n	8003f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f16:	f7fe f967 	bl	80021e8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e113      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f2c:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ed      	bne.n	8003f16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3a:	7ffb      	ldrb	r3, [r7, #31]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b7a      	ldr	r3, [pc, #488]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	4a79      	ldr	r2, [pc, #484]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80fe 	beq.w	8004152 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	f040 80d0 	bne.w	8004100 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f60:	4b72      	ldr	r3, [pc, #456]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 0203 	and.w	r2, r3, #3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d130      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d127      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d11f      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fa0:	2a07      	cmp	r2, #7
 8003fa2:	bf14      	ite	ne
 8003fa4:	2201      	movne	r2, #1
 8003fa6:	2200      	moveq	r2, #0
 8003fa8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d113      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d109      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d06e      	beq.n	80040b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b0c      	cmp	r3, #12
 8003fda:	d069      	beq.n	80040b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e0ad      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8003ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004002:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004004:	f7fe f8f0 	bl	80021e8 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fe f8ec 	bl	80021e8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e09a      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401e:	4b43      	ldr	r3, [pc, #268]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800402a:	4b40      	ldr	r3, [pc, #256]	; (800412c <HAL_RCC_OscConfig+0x780>)
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	4b40      	ldr	r3, [pc, #256]	; (8004130 <HAL_RCC_OscConfig+0x784>)
 8004030:	4013      	ands	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800403a:	3a01      	subs	r2, #1
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004044:	0212      	lsls	r2, r2, #8
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800404c:	0852      	lsrs	r2, r2, #1
 800404e:	3a01      	subs	r2, #1
 8004050:	0552      	lsls	r2, r2, #21
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004058:	0852      	lsrs	r2, r2, #1
 800405a:	3a01      	subs	r2, #1
 800405c:	0652      	lsls	r2, r2, #25
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004064:	0912      	lsrs	r2, r2, #4
 8004066:	0452      	lsls	r2, r2, #17
 8004068:	430a      	orrs	r2, r1
 800406a:	4930      	ldr	r1, [pc, #192]	; (800412c <HAL_RCC_OscConfig+0x780>)
 800406c:	4313      	orrs	r3, r2
 800406e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004070:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2d      	ldr	r2, [pc, #180]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800407a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x780>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a2a      	ldr	r2, [pc, #168]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004086:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004088:	f7fe f8ae 	bl	80021e8 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004090:	f7fe f8aa 	bl	80021e8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e058      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_OscConfig+0x780>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ae:	e050      	b.n	8004152 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e04f      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCC_OscConfig+0x780>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d148      	bne.n	8004152 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <HAL_RCC_OscConfig+0x780>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_RCC_OscConfig+0x780>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040cc:	4b17      	ldr	r3, [pc, #92]	; (800412c <HAL_RCC_OscConfig+0x780>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_RCC_OscConfig+0x780>)
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040d8:	f7fe f886 	bl	80021e8 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fe f882 	bl	80021e8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e030      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <HAL_RCC_OscConfig+0x780>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x734>
 80040fe:	e028      	b.n	8004152 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d023      	beq.n	800414e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x780>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <HAL_RCC_OscConfig+0x780>)
 800410c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004112:	f7fe f869 	bl	80021e8 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004118:	e00c      	b.n	8004134 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411a:	f7fe f865 	bl	80021e8 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d905      	bls.n	8004134 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e013      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
 800412c:	40021000 	.word	0x40021000
 8004130:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_OscConfig+0x7b0>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ec      	bne.n	800411a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCC_OscConfig+0x7b0>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	4905      	ldr	r1, [pc, #20]	; (800415c <HAL_RCC_OscConfig+0x7b0>)
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <HAL_RCC_OscConfig+0x7b4>)
 8004148:	4013      	ands	r3, r2
 800414a:	60cb      	str	r3, [r1, #12]
 800414c:	e001      	b.n	8004152 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40021000 	.word	0x40021000
 8004160:	feeefffc 	.word	0xfeeefffc

08004164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0e7      	b.n	8004348 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004178:	4b75      	ldr	r3, [pc, #468]	; (8004350 <HAL_RCC_ClockConfig+0x1ec>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d910      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004186:	4b72      	ldr	r3, [pc, #456]	; (8004350 <HAL_RCC_ClockConfig+0x1ec>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 0207 	bic.w	r2, r3, #7
 800418e:	4970      	ldr	r1, [pc, #448]	; (8004350 <HAL_RCC_ClockConfig+0x1ec>)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	4313      	orrs	r3, r2
 8004194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b6e      	ldr	r3, [pc, #440]	; (8004350 <HAL_RCC_ClockConfig+0x1ec>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0cf      	b.n	8004348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d010      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	4b66      	ldr	r3, [pc, #408]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d908      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b63      	ldr	r3, [pc, #396]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4960      	ldr	r1, [pc, #384]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04c      	beq.n	800427c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ea:	4b5a      	ldr	r3, [pc, #360]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d121      	bne.n	800423a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0a6      	b.n	8004348 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d107      	bne.n	8004212 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004202:	4b54      	ldr	r3, [pc, #336]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d115      	bne.n	800423a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e09a      	b.n	8004348 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800421a:	4b4e      	ldr	r3, [pc, #312]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e08e      	b.n	8004348 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800422a:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e086      	b.n	8004348 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800423a:	4b46      	ldr	r3, [pc, #280]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f023 0203 	bic.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4943      	ldr	r1, [pc, #268]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800424c:	f7fd ffcc 	bl	80021e8 <HAL_GetTick>
 8004250:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004252:	e00a      	b.n	800426a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004254:	f7fd ffc8 	bl	80021e8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e06e      	b.n	8004348 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 020c 	and.w	r2, r3, #12
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	429a      	cmp	r2, r3
 800427a:	d1eb      	bne.n	8004254 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d010      	beq.n	80042aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004294:	429a      	cmp	r2, r3
 8004296:	d208      	bcs.n	80042aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004298:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	492b      	ldr	r1, [pc, #172]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042aa:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_RCC_ClockConfig+0x1ec>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d210      	bcs.n	80042da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b8:	4b25      	ldr	r3, [pc, #148]	; (8004350 <HAL_RCC_ClockConfig+0x1ec>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 0207 	bic.w	r2, r3, #7
 80042c0:	4923      	ldr	r1, [pc, #140]	; (8004350 <HAL_RCC_ClockConfig+0x1ec>)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <HAL_RCC_ClockConfig+0x1ec>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d001      	beq.n	80042da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e036      	b.n	8004348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e6:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	4918      	ldr	r1, [pc, #96]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004304:	4b13      	ldr	r3, [pc, #76]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4910      	ldr	r1, [pc, #64]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004318:	f000 f824 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <HAL_RCC_ClockConfig+0x1f0>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	490b      	ldr	r1, [pc, #44]	; (8004358 <HAL_RCC_ClockConfig+0x1f4>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
 8004334:	4a09      	ldr	r2, [pc, #36]	; (800435c <HAL_RCC_ClockConfig+0x1f8>)
 8004336:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_ClockConfig+0x1fc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fd fb35 	bl	80019ac <HAL_InitTick>
 8004342:	4603      	mov	r3, r0
 8004344:	72fb      	strb	r3, [r7, #11]

  return status;
 8004346:	7afb      	ldrb	r3, [r7, #11]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40022000 	.word	0x40022000
 8004354:	40021000 	.word	0x40021000
 8004358:	0800b69c 	.word	0x0800b69c
 800435c:	20000024 	.word	0x20000024
 8004360:	20000030 	.word	0x20000030

08004364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	; 0x24
 8004368:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	2300      	movs	r3, #0
 8004370:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004372:	4b3e      	ldr	r3, [pc, #248]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800437c:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x34>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d121      	bne.n	80043d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d11e      	bne.n	80043d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004398:	4b34      	ldr	r3, [pc, #208]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043a4:	4b31      	ldr	r3, [pc, #196]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 80043a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043aa:	0a1b      	lsrs	r3, r3, #8
 80043ac:	f003 030f 	and.w	r3, r3, #15
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	e005      	b.n	80043c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043b4:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043c0:	4a2b      	ldr	r2, [pc, #172]	; (8004470 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10d      	bne.n	80043ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d4:	e00a      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d102      	bne.n	80043e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043dc:	4b25      	ldr	r3, [pc, #148]	; (8004474 <HAL_RCC_GetSysClockFreq+0x110>)
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e004      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043e8:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_RCC_GetSysClockFreq+0x114>)
 80043ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b0c      	cmp	r3, #12
 80043f0:	d134      	bne.n	800445c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043f2:	4b1e      	ldr	r3, [pc, #120]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d003      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0xa6>
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d003      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0xac>
 8004408:	e005      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800440a:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <HAL_RCC_GetSysClockFreq+0x110>)
 800440c:	617b      	str	r3, [r7, #20]
      break;
 800440e:	e005      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_RCC_GetSysClockFreq+0x114>)
 8004412:	617b      	str	r3, [r7, #20]
      break;
 8004414:	e002      	b.n	800441c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	617b      	str	r3, [r7, #20]
      break;
 800441a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	3301      	adds	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	fb03 f202 	mul.w	r2, r3, r2
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <HAL_RCC_GetSysClockFreq+0x108>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	0e5b      	lsrs	r3, r3, #25
 8004448:	f003 0303 	and.w	r3, r3, #3
 800444c:	3301      	adds	r3, #1
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800445c:	69bb      	ldr	r3, [r7, #24]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3724      	adds	r7, #36	; 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40021000 	.word	0x40021000
 8004470:	0800b6b4 	.word	0x0800b6b4
 8004474:	00f42400 	.word	0x00f42400
 8004478:	007a1200 	.word	0x007a1200

0800447c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004480:	4b03      	ldr	r3, [pc, #12]	; (8004490 <HAL_RCC_GetHCLKFreq+0x14>)
 8004482:	681b      	ldr	r3, [r3, #0]
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	20000024 	.word	0x20000024

08004494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004498:	f7ff fff0 	bl	800447c <HAL_RCC_GetHCLKFreq>
 800449c:	4602      	mov	r2, r0
 800449e:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	4904      	ldr	r1, [pc, #16]	; (80044bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80044aa:	5ccb      	ldrb	r3, [r1, r3]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000
 80044bc:	0800b6ac 	.word	0x0800b6ac

080044c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044c4:	f7ff ffda 	bl	800447c <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	0adb      	lsrs	r3, r3, #11
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4904      	ldr	r1, [pc, #16]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	0800b6ac 	.word	0x0800b6ac

080044ec <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	220f      	movs	r2, #15
 80044fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <HAL_RCC_GetClockConfig+0x5c>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0203 	and.w	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <HAL_RCC_GetClockConfig+0x5c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <HAL_RCC_GetClockConfig+0x5c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCC_GetClockConfig+0x5c>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	08db      	lsrs	r3, r3, #3
 8004526:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800452e:	4b07      	ldr	r3, [pc, #28]	; (800454c <HAL_RCC_GetClockConfig+0x60>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0207 	and.w	r2, r3, #7
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	40022000 	.word	0x40022000

08004550 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800455c:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004568:	f7ff f9bc 	bl	80038e4 <HAL_PWREx_GetVoltageRange>
 800456c:	6178      	str	r0, [r7, #20]
 800456e:	e014      	b.n	800459a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004574:	4a24      	ldr	r2, [pc, #144]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457a:	6593      	str	r3, [r2, #88]	; 0x58
 800457c:	4b22      	ldr	r3, [pc, #136]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004588:	f7ff f9ac 	bl	80038e4 <HAL_PWREx_GetVoltageRange>
 800458c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800458e:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004598:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a0:	d10b      	bne.n	80045ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d919      	bls.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2ba0      	cmp	r3, #160	; 0xa0
 80045ac:	d902      	bls.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ae:	2302      	movs	r3, #2
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e013      	b.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045b4:	2301      	movs	r3, #1
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	e010      	b.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b80      	cmp	r3, #128	; 0x80
 80045be:	d902      	bls.n	80045c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045c0:	2303      	movs	r3, #3
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e00a      	b.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d102      	bne.n	80045d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045cc:	2302      	movs	r3, #2
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	e004      	b.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b70      	cmp	r3, #112	; 0x70
 80045d6:	d101      	bne.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d8:	2301      	movs	r3, #1
 80045da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f023 0207 	bic.w	r2, r3, #7
 80045e4:	4909      	ldr	r1, [pc, #36]	; (800460c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d001      	beq.n	80045fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	40022000 	.word	0x40022000

08004610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004618:	2300      	movs	r3, #0
 800461a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800461c:	2300      	movs	r3, #0
 800461e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004628:	2b00      	cmp	r3, #0
 800462a:	d041      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004630:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004634:	d02a      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004636:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800463a:	d824      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800463c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004640:	d008      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004646:	d81e      	bhi.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800464c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004650:	d010      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004652:	e018      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004654:	4b86      	ldr	r3, [pc, #536]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a85      	ldr	r2, [pc, #532]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004660:	e015      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3304      	adds	r3, #4
 8004666:	2100      	movs	r1, #0
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fabb 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004672:	e00c      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	3320      	adds	r3, #32
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fba6 	bl	8004dcc <RCCEx_PLLSAI2_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004684:	e003      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	74fb      	strb	r3, [r7, #19]
      break;
 800468a:	e000      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800468c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10b      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004694:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800469a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a2:	4973      	ldr	r1, [pc, #460]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046aa:	e001      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
 80046ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d041      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046c4:	d02a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046ca:	d824      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046d6:	d81e      	bhi.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00a      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046e0:	d010      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046e2:	e018      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046e4:	4b62      	ldr	r3, [pc, #392]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4a61      	ldr	r2, [pc, #388]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046f0:	e015      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3304      	adds	r3, #4
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fa73 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004702:	e00c      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3320      	adds	r3, #32
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f000 fb5e 	bl	8004dcc <RCCEx_PLLSAI2_Config>
 8004710:	4603      	mov	r3, r0
 8004712:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004714:	e003      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	74fb      	strb	r3, [r7, #19]
      break;
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800471c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800471e:	7cfb      	ldrb	r3, [r7, #19]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004724:	4b52      	ldr	r3, [pc, #328]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004732:	494f      	ldr	r1, [pc, #316]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800473a:	e001      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80a0 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004752:	4b47      	ldr	r3, [pc, #284]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004762:	2300      	movs	r3, #0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004768:	4b41      	ldr	r3, [pc, #260]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476c:	4a40      	ldr	r2, [pc, #256]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004772:	6593      	str	r3, [r2, #88]	; 0x58
 8004774:	4b3e      	ldr	r3, [pc, #248]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004780:	2301      	movs	r3, #1
 8004782:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004784:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a3a      	ldr	r2, [pc, #232]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800478a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800478e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004790:	f7fd fd2a 	bl	80021e8 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004796:	e009      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004798:	f7fd fd26 	bl	80021e8 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d902      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	74fb      	strb	r3, [r7, #19]
        break;
 80047aa:	e005      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ac:	4b31      	ldr	r3, [pc, #196]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ef      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d15c      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047be:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01f      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d019      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047dc:	4b24      	ldr	r3, [pc, #144]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047e8:	4b21      	ldr	r3, [pc, #132]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ee:	4a20      	ldr	r2, [pc, #128]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fe:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004808:	4a19      	ldr	r2, [pc, #100]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fd fce5 	bl	80021e8 <HAL_GetTick>
 800481e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004820:	e00b      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fd fce1 	bl	80021e8 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d902      	bls.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	74fb      	strb	r3, [r7, #19]
            break;
 8004838:	e006      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ec      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	4904      	ldr	r1, [pc, #16]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004866:	e009      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	74bb      	strb	r3, [r7, #18]
 800486c:	e006      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000
 8004874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487c:	7c7b      	ldrb	r3, [r7, #17]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b9e      	ldr	r3, [pc, #632]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	4a9d      	ldr	r2, [pc, #628]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800489a:	4b98      	ldr	r3, [pc, #608]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f023 0203 	bic.w	r2, r3, #3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	4994      	ldr	r1, [pc, #592]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048bc:	4b8f      	ldr	r3, [pc, #572]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f023 020c 	bic.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ca:	498c      	ldr	r1, [pc, #560]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048de:	4b87      	ldr	r3, [pc, #540]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	4983      	ldr	r1, [pc, #524]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004900:	4b7e      	ldr	r3, [pc, #504]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	497b      	ldr	r1, [pc, #492]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0310 	and.w	r3, r3, #16
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004922:	4b76      	ldr	r3, [pc, #472]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004930:	4972      	ldr	r1, [pc, #456]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004944:	4b6d      	ldr	r3, [pc, #436]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	496a      	ldr	r1, [pc, #424]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004966:	4b65      	ldr	r3, [pc, #404]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004974:	4961      	ldr	r1, [pc, #388]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004988:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	4959      	ldr	r1, [pc, #356]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049aa:	4b54      	ldr	r3, [pc, #336]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b8:	4950      	ldr	r1, [pc, #320]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049cc:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	4948      	ldr	r1, [pc, #288]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ee:	4b43      	ldr	r3, [pc, #268]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fc:	493f      	ldr	r1, [pc, #252]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d028      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a10:	4b3a      	ldr	r3, [pc, #232]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1e:	4937      	ldr	r1, [pc, #220]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a30:	4b32      	ldr	r3, [pc, #200]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a31      	ldr	r2, [pc, #196]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a3a:	60d3      	str	r3, [r2, #12]
 8004a3c:	e011      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a46:	d10c      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f8c8 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a58:	7cfb      	ldrb	r3, [r7, #19]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a5e:	7cfb      	ldrb	r3, [r7, #19]
 8004a60:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d028      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	491f      	ldr	r1, [pc, #124]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a8c:	d106      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a98:	60d3      	str	r3, [r2, #12]
 8004a9a:	e011      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	2101      	movs	r1, #1
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 f899 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02b      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ada:	4908      	ldr	r1, [pc, #32]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aea:	d109      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a02      	ldr	r2, [pc, #8]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af6:	60d3      	str	r3, [r2, #12]
 8004af8:	e014      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 f867 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02f      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b30:	4b2b      	ldr	r3, [pc, #172]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	4928      	ldr	r1, [pc, #160]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b4e:	d10d      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	2102      	movs	r1, #2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f844 	bl	8004be4 <RCCEx_PLLSAI1_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d014      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	74bb      	strb	r3, [r7, #18]
 8004b6a:	e011      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3320      	adds	r3, #32
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f925 	bl	8004dcc <RCCEx_PLLSAI2_Config>
 8004b82:	4603      	mov	r3, r0
 8004b84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
 8004b8e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00a      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004baa:	490d      	ldr	r1, [pc, #52]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00b      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bce:	4904      	ldr	r1, [pc, #16]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bd6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000

08004be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bf2:	4b75      	ldr	r3, [pc, #468]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d018      	beq.n	8004c30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bfe:	4b72      	ldr	r3, [pc, #456]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0203 	and.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d10d      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
       ||
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c16:	4b6c      	ldr	r3, [pc, #432]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
       ||
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d047      	beq.n	8004cba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
 8004c2e:	e044      	b.n	8004cba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d018      	beq.n	8004c6a <RCCEx_PLLSAI1_Config+0x86>
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d825      	bhi.n	8004c88 <RCCEx_PLLSAI1_Config+0xa4>
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d002      	beq.n	8004c46 <RCCEx_PLLSAI1_Config+0x62>
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d009      	beq.n	8004c58 <RCCEx_PLLSAI1_Config+0x74>
 8004c44:	e020      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c46:	4b60      	ldr	r3, [pc, #384]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d11d      	bne.n	8004c8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c56:	e01a      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c58:	4b5b      	ldr	r3, [pc, #364]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d116      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c68:	e013      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c6a:	4b57      	ldr	r3, [pc, #348]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10f      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c76:	4b54      	ldr	r3, [pc, #336]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c86:	e006      	b.n	8004c96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e004      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e002      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	430b      	orrs	r3, r1
 8004cb4:	4944      	ldr	r1, [pc, #272]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d17d      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cc0:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a40      	ldr	r2, [pc, #256]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ccc:	f7fd fa8c 	bl	80021e8 <HAL_GetTick>
 8004cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cd2:	e009      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cd4:	f7fd fa88 	bl	80021e8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d902      	bls.n	8004ce8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce6:	e005      	b.n	8004cf4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ce8:	4b37      	ldr	r3, [pc, #220]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ef      	bne.n	8004cd4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d160      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d111      	bne.n	8004d24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d00:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6892      	ldr	r2, [r2, #8]
 8004d10:	0211      	lsls	r1, r2, #8
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	68d2      	ldr	r2, [r2, #12]
 8004d16:	0912      	lsrs	r2, r2, #4
 8004d18:	0452      	lsls	r2, r2, #17
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	492a      	ldr	r1, [pc, #168]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	610b      	str	r3, [r1, #16]
 8004d22:	e027      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d112      	bne.n	8004d50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d2a:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6892      	ldr	r2, [r2, #8]
 8004d3a:	0211      	lsls	r1, r2, #8
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6912      	ldr	r2, [r2, #16]
 8004d40:	0852      	lsrs	r2, r2, #1
 8004d42:	3a01      	subs	r2, #1
 8004d44:	0552      	lsls	r2, r2, #21
 8004d46:	430a      	orrs	r2, r1
 8004d48:	491f      	ldr	r1, [pc, #124]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	610b      	str	r3, [r1, #16]
 8004d4e:	e011      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6892      	ldr	r2, [r2, #8]
 8004d60:	0211      	lsls	r1, r2, #8
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6952      	ldr	r2, [r2, #20]
 8004d66:	0852      	lsrs	r2, r2, #1
 8004d68:	3a01      	subs	r2, #1
 8004d6a:	0652      	lsls	r2, r2, #25
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d74:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fd fa32 	bl	80021e8 <HAL_GetTick>
 8004d84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d86:	e009      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d88:	f7fd fa2e 	bl	80021e8 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d902      	bls.n	8004d9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	73fb      	strb	r3, [r7, #15]
          break;
 8004d9a:	e005      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ef      	beq.n	8004d88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4904      	ldr	r1, [pc, #16]	; (8004dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40021000 	.word	0x40021000

08004dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dda:	4b6a      	ldr	r3, [pc, #424]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004de6:	4b67      	ldr	r3, [pc, #412]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0203 	and.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d10d      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dfe:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d047      	beq.n	8004ea2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e044      	b.n	8004ea2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	d018      	beq.n	8004e52 <RCCEx_PLLSAI2_Config+0x86>
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d825      	bhi.n	8004e70 <RCCEx_PLLSAI2_Config+0xa4>
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d002      	beq.n	8004e2e <RCCEx_PLLSAI2_Config+0x62>
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d009      	beq.n	8004e40 <RCCEx_PLLSAI2_Config+0x74>
 8004e2c:	e020      	b.n	8004e70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e2e:	4b55      	ldr	r3, [pc, #340]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11d      	bne.n	8004e76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3e:	e01a      	b.n	8004e76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e40:	4b50      	ldr	r3, [pc, #320]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d116      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e50:	e013      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e52:	4b4c      	ldr	r3, [pc, #304]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10f      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e5e:	4b49      	ldr	r3, [pc, #292]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e6e:	e006      	b.n	8004e7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
      break;
 8004e74:	e004      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e76:	bf00      	nop
 8004e78:	e002      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e86:	4b3f      	ldr	r3, [pc, #252]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	4939      	ldr	r1, [pc, #228]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d167      	bne.n	8004f78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ea8:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb4:	f7fd f998 	bl	80021e8 <HAL_GetTick>
 8004eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eba:	e009      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ebc:	f7fd f994 	bl	80021e8 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d902      	bls.n	8004ed0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ece:	e005      	b.n	8004edc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ed0:	4b2c      	ldr	r3, [pc, #176]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ef      	bne.n	8004ebc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d14a      	bne.n	8004f78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d111      	bne.n	8004f0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ee8:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	0211      	lsls	r1, r2, #8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68d2      	ldr	r2, [r2, #12]
 8004efe:	0912      	lsrs	r2, r2, #4
 8004f00:	0452      	lsls	r2, r2, #17
 8004f02:	430a      	orrs	r2, r1
 8004f04:	491f      	ldr	r1, [pc, #124]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	614b      	str	r3, [r1, #20]
 8004f0a:	e011      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f0c:	4b1d      	ldr	r3, [pc, #116]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6892      	ldr	r2, [r2, #8]
 8004f1c:	0211      	lsls	r1, r2, #8
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6912      	ldr	r2, [r2, #16]
 8004f22:	0852      	lsrs	r2, r2, #1
 8004f24:	3a01      	subs	r2, #1
 8004f26:	0652      	lsls	r2, r2, #25
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	4916      	ldr	r1, [pc, #88]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f30:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f3c:	f7fd f954 	bl	80021e8 <HAL_GetTick>
 8004f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f42:	e009      	b.n	8004f58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f44:	f7fd f950 	bl	80021e8 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d902      	bls.n	8004f58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	73fb      	strb	r3, [r7, #15]
          break;
 8004f56:	e005      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ef      	beq.n	8004f44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f6a:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6c:	695a      	ldr	r2, [r3, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	4904      	ldr	r1, [pc, #16]	; (8004f84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000

08004f88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d079      	beq.n	800508e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fc fc3a 	bl	8001828 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b10      	cmp	r3, #16
 8004fc8:	d058      	beq.n	800507c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	22ca      	movs	r2, #202	; 0xca
 8004fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2253      	movs	r2, #83	; 0x53
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fbda 	bl	8005794 <RTC_EnterInitMode>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d127      	bne.n	800503a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6899      	ldr	r1, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	68d2      	ldr	r2, [r2, #12]
 8005024:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6919      	ldr	r1, [r3, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	041a      	lsls	r2, r3, #16
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fbde 	bl	80057fc <RTC_ExitInitMode>
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d113      	bne.n	8005072 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 0203 	bic.w	r2, r2, #3
 8005058:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	22ff      	movs	r2, #255	; 0xff
 8005078:	625a      	str	r2, [r3, #36]	; 0x24
 800507a:	e001      	b.n	8005080 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800508e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_RTC_SetTime+0x1a>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e08b      	b.n	80051ca <HAL_RTC_SetTime+0x132>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	22ca      	movs	r2, #202	; 0xca
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2253      	movs	r2, #83	; 0x53
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fb5e 	bl	8005794 <RTC_EnterInitMode>
 80050d8:	4603      	mov	r3, r0
 80050da:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d163      	bne.n	80051aa <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d126      	bne.n	8005136 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2200      	movs	r2, #0
 80050fa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fbb9 	bl	8005878 <RTC_ByteToBcd2>
 8005106:	4603      	mov	r3, r0
 8005108:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fbb2 	bl	8005878 <RTC_ByteToBcd2>
 8005114:	4603      	mov	r3, r0
 8005116:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005118:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	789b      	ldrb	r3, [r3, #2]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 fbaa 	bl	8005878 <RTC_ByteToBcd2>
 8005124:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005126:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	78db      	ldrb	r3, [r3, #3]
 800512e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e018      	b.n	8005168 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2200      	movs	r2, #0
 8005148:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005156:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800515c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	78db      	ldrb	r3, [r3, #3]
 8005162:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005172:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005176:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005186:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6899      	ldr	r1, [r3, #8]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	431a      	orrs	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fb2b 	bl	80057fc <RTC_ExitInitMode>
 80051a6:	4603      	mov	r3, r0
 80051a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	22ff      	movs	r2, #255	; 0xff
 80051b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80051b2:	7cfb      	ldrb	r3, [r7, #19]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d103      	bne.n	80051c0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80051c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd90      	pop	{r4, r7, pc}

080051d2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005200:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005204:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005210:	b2da      	uxtb	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	0a1b      	lsrs	r3, r3, #8
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005220:	b2da      	uxtb	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	0d9b      	lsrs	r3, r3, #22
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11a      	bne.n	8005280 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fb32 	bl	80058b8 <RTC_Bcd2ToByte>
 8005254:	4603      	mov	r3, r0
 8005256:	461a      	mov	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	4618      	mov	r0, r3
 8005262:	f000 fb29 	bl	80058b8 <RTC_Bcd2ToByte>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	789b      	ldrb	r3, [r3, #2]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fb20 	bl	80058b8 <RTC_Bcd2ToByte>
 8005278:	4603      	mov	r3, r0
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800528a:	b590      	push	{r4, r7, lr}
 800528c:	b087      	sub	sp, #28
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_RTC_SetDate+0x1a>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e075      	b.n	8005390 <HAL_RTC_SetDate+0x106>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10e      	bne.n	80052d8 <HAL_RTC_SetDate+0x4e>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	f003 0310 	and.w	r3, r3, #16
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	785b      	ldrb	r3, [r3, #1]
 80052ca:	f023 0310 	bic.w	r3, r3, #16
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	330a      	adds	r3, #10
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d11c      	bne.n	8005318 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	78db      	ldrb	r3, [r3, #3]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fac8 	bl	8005878 <RTC_ByteToBcd2>
 80052e8:	4603      	mov	r3, r0
 80052ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	785b      	ldrb	r3, [r3, #1]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fac1 	bl	8005878 <RTC_ByteToBcd2>
 80052f6:	4603      	mov	r3, r0
 80052f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80052fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	789b      	ldrb	r3, [r3, #2]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fab9 	bl	8005878 <RTC_ByteToBcd2>
 8005306:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005308:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005312:	4313      	orrs	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e00e      	b.n	8005336 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	78db      	ldrb	r3, [r3, #3]
 800531c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005324:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800532a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	22ca      	movs	r2, #202	; 0xca
 800533c:	625a      	str	r2, [r3, #36]	; 0x24
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2253      	movs	r2, #83	; 0x53
 8005344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 fa24 	bl	8005794 <RTC_EnterInitMode>
 800534c:	4603      	mov	r3, r0
 800534e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005360:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005364:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 fa48 	bl	80057fc <RTC_ExitInitMode>
 800536c:	4603      	mov	r3, r0
 800536e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	22ff      	movs	r2, #255	; 0xff
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d103      	bne.n	8005386 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800538e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bd90      	pop	{r4, r7, pc}

08005398 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	b2da      	uxtb	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	0b5b      	lsrs	r3, r3, #13
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11a      	bne.n	8005428 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fa5e 	bl	80058b8 <RTC_Bcd2ToByte>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	4618      	mov	r0, r3
 800540a:	f000 fa55 	bl	80058b8 <RTC_Bcd2ToByte>
 800540e:	4603      	mov	r3, r0
 8005410:	461a      	mov	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	789b      	ldrb	r3, [r3, #2]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fa4c 	bl	80058b8 <RTC_Bcd2ToByte>
 8005420:	4603      	mov	r3, r0
 8005422:	461a      	mov	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005434:	b590      	push	{r4, r7, lr}
 8005436:	b089      	sub	sp, #36	; 0x24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_RTC_SetAlarm_IT+0x1a>
 800544a:	2302      	movs	r3, #2
 800544c:	e127      	b.n	800569e <HAL_RTC_SetAlarm_IT+0x26a>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d137      	bne.n	80054d4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d102      	bne.n	8005478 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2200      	movs	r2, #0
 8005476:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f9fb 	bl	8005878 <RTC_ByteToBcd2>
 8005482:	4603      	mov	r3, r0
 8005484:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	785b      	ldrb	r3, [r3, #1]
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f9f4 	bl	8005878 <RTC_ByteToBcd2>
 8005490:	4603      	mov	r3, r0
 8005492:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005494:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	789b      	ldrb	r3, [r3, #2]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f9ec 	bl	8005878 <RTC_ByteToBcd2>
 80054a0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054a2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054ac:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f9de 	bl	8005878 <RTC_ByteToBcd2>
 80054bc:	4603      	mov	r3, r0
 80054be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054c0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80054c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	e023      	b.n	800551c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d102      	bne.n	80054e8 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2200      	movs	r2, #0
 80054e6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80054f4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80054fa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	78db      	ldrb	r3, [r3, #3]
 8005500:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005502:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800550a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800550c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005512:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005518:	4313      	orrs	r3, r2
 800551a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	22ca      	movs	r2, #202	; 0xca
 800552e:	625a      	str	r2, [r3, #36]	; 0x24
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2253      	movs	r2, #83	; 0x53
 8005536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005540:	d14a      	bne.n	80055d8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005550:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005562:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005564:	f7fc fe40 	bl	80021e8 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800556a:	e015      	b.n	8005598 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800556c:	f7fc fe3c 	bl	80021e8 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800557a:	d90d      	bls.n	8005598 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	22ff      	movs	r2, #255	; 0xff
 8005582:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2203      	movs	r2, #3
 8005588:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e082      	b.n	800569e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0e2      	beq.n	800556c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055c4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	e049      	b.n	800566c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055e6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80055f8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80055fa:	f7fc fdf5 	bl	80021e8 <HAL_GetTick>
 80055fe:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005600:	e015      	b.n	800562e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005602:	f7fc fdf1 	bl	80021e8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005610:	d90d      	bls.n	800562e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	22ff      	movs	r2, #255	; 0xff
 8005618:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2203      	movs	r2, #3
 800561e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e037      	b.n	800569e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d0e2      	beq.n	8005602 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800566a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800566c:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005676:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005678:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4a0a      	ldr	r2, [pc, #40]	; (80056a8 <HAL_RTC_SetAlarm_IT+0x274>)
 800567e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005682:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	22ff      	movs	r2, #255	; 0xff
 800568a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3724      	adds	r7, #36	; 0x24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40010400 	.word	0x40010400

080056ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80056b4:	4b1f      	ldr	r3, [pc, #124]	; (8005734 <HAL_RTC_AlarmIRQHandler+0x88>)
 80056b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80056ba:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d012      	beq.n	80056f0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80056e8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f824 	bl	8005738 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d012      	beq.n	8005724 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f462 7220 	orn	r2, r2, #640	; 0x280
 800571c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f96f 	bl	8005a02 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40010400 	.word	0x40010400

08005738 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0d      	ldr	r2, [pc, #52]	; (8005790 <HAL_RTC_WaitForSynchro+0x44>)
 800575a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800575c:	f7fc fd44 	bl	80021e8 <HAL_GetTick>
 8005760:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005762:	e009      	b.n	8005778 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005764:	f7fc fd40 	bl	80021e8 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005772:	d901      	bls.n	8005778 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e007      	b.n	8005788 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0ee      	beq.n	8005764 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	0003ff5f 	.word	0x0003ff5f

08005794 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d120      	bne.n	80057f0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f04f 32ff 	mov.w	r2, #4294967295
 80057b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80057b8:	f7fc fd16 	bl	80021e8 <HAL_GetTick>
 80057bc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80057be:	e00d      	b.n	80057dc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80057c0:	f7fc fd12 	bl	80021e8 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ce:	d905      	bls.n	80057dc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2203      	movs	r2, #3
 80057d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <RTC_EnterInitMode+0x5c>
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d1e7      	bne.n	80057c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005808:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <RTC_ExitInitMode+0x78>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4a19      	ldr	r2, [pc, #100]	; (8005874 <RTC_ExitInitMode+0x78>)
 800580e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005812:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005814:	4b17      	ldr	r3, [pc, #92]	; (8005874 <RTC_ExitInitMode+0x78>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10c      	bne.n	800583a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff ff93 	bl	800574c <HAL_RTC_WaitForSynchro>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01e      	beq.n	800586a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2203      	movs	r2, #3
 8005830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	73fb      	strb	r3, [r7, #15]
 8005838:	e017      	b.n	800586a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800583a:	4b0e      	ldr	r3, [pc, #56]	; (8005874 <RTC_ExitInitMode+0x78>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	4a0d      	ldr	r2, [pc, #52]	; (8005874 <RTC_ExitInitMode+0x78>)
 8005840:	f023 0320 	bic.w	r3, r3, #32
 8005844:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff ff80 	bl	800574c <HAL_RTC_WaitForSynchro>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2203      	movs	r2, #3
 8005856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <RTC_ExitInitMode+0x78>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	4a04      	ldr	r2, [pc, #16]	; (8005874 <RTC_ExitInitMode+0x78>)
 8005864:	f043 0320 	orr.w	r3, r3, #32
 8005868:	6093      	str	r3, [r2, #8]
  }

  return status;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40002800 	.word	0x40002800

08005878 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800588a:	e005      	b.n	8005898 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005892:	7afb      	ldrb	r3, [r7, #11]
 8005894:	3b0a      	subs	r3, #10
 8005896:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005898:	7afb      	ldrb	r3, [r7, #11]
 800589a:	2b09      	cmp	r3, #9
 800589c:	d8f6      	bhi.n	800588c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	7afb      	ldrb	r3, [r7, #11]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	b2db      	uxtb	r3, r3
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	0092      	lsls	r2, r2, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	4413      	add	r3, r2
 80058de:	b2db      	uxtb	r3, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8005900:	2302      	movs	r3, #2
 8005902:	e034      	b.n	800596e <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	22ca      	movs	r2, #202	; 0xca
 800591a:	625a      	str	r2, [r3, #36]	; 0x24
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2253      	movs	r2, #83	; 0x53
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8005932:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6899      	ldr	r1, [r3, #8]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005952:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	22ff      	movs	r2, #255	; 0xff
 800595a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_RTCEx_SetRefClock+0x16>
 800598c:	2302      	movs	r3, #2
 800598e:	e034      	b.n	80059fa <HAL_RTCEx_SetRefClock+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	22ca      	movs	r2, #202	; 0xca
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2253      	movs	r2, #83	; 0x53
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff feef 	bl	8005794 <RTC_EnterInitMode>
 80059b6:	4603      	mov	r3, r0
 80059b8:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10c      	bne.n	80059da <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0210 	orr.w	r2, r2, #16
 80059ce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff ff13 	bl	80057fc <RTC_ExitInitMode>
 80059d6:	4603      	mov	r3, r0
 80059d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	22ff      	movs	r2, #255	; 0xff
 80059e0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b082      	sub	sp, #8
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e049      	b.n	8005abc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f841 	bl	8005ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	4619      	mov	r1, r3
 8005a54:	4610      	mov	r0, r2
 8005a56:	f000 f9d9 	bl	8005e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d001      	beq.n	8005af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e04f      	b.n	8005b90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d01d      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x76>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1a:	d018      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x76>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1f      	ldr	r2, [pc, #124]	; (8005ba0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x76>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ba4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d00e      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x76>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a1c      	ldr	r2, [pc, #112]	; (8005ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d009      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x76>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <HAL_TIM_Base_Start_IT+0xd4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d004      	beq.n	8005b4e <HAL_TIM_Base_Start_IT+0x76>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a19      	ldr	r2, [pc, #100]	; (8005bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d115      	bne.n	8005b7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b06      	cmp	r3, #6
 8005b5e:	d015      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0xb4>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b66:	d011      	beq.n	8005b8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b78:	e008      	b.n	8005b8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e000      	b.n	8005b8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40000c00 	.word	0x40000c00
 8005bac:	40013400 	.word	0x40013400
 8005bb0:	40014000 	.word	0x40014000
 8005bb4:	00010007 	.word	0x00010007

08005bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d020      	beq.n	8005c1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f06f 0202 	mvn.w	r2, #2
 8005bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f8e4 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
 8005c08:	e005      	b.n	8005c16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f8d6 	bl	8005dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f8e7 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d020      	beq.n	8005c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01b      	beq.n	8005c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0204 	mvn.w	r2, #4
 8005c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f8be 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
 8005c54:	e005      	b.n	8005c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f8b0 	bl	8005dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f8c1 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d020      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0208 	mvn.w	r2, #8
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f898 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f88a 	bl	8005dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f89b 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d020      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01b      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0210 	mvn.w	r2, #16
 8005cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f872 	bl	8005dd0 <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f864 	bl	8005dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f875 	bl	8005de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0201 	mvn.w	r2, #1
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fb fce4 	bl	80016ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f906 	bl	8005f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00c      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f8fe 	bl	8005f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00c      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f834 	bl	8005df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0220 	mvn.w	r2, #32
 8005dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f8c6 	bl	8005f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a40      	ldr	r2, [pc, #256]	; (8005f20 <TIM_Base_SetConfig+0x114>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d013      	beq.n	8005e4c <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2a:	d00f      	beq.n	8005e4c <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a3d      	ldr	r2, [pc, #244]	; (8005f24 <TIM_Base_SetConfig+0x118>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d00b      	beq.n	8005e4c <TIM_Base_SetConfig+0x40>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a3c      	ldr	r2, [pc, #240]	; (8005f28 <TIM_Base_SetConfig+0x11c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d007      	beq.n	8005e4c <TIM_Base_SetConfig+0x40>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a3b      	ldr	r2, [pc, #236]	; (8005f2c <TIM_Base_SetConfig+0x120>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_Base_SetConfig+0x40>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a3a      	ldr	r2, [pc, #232]	; (8005f30 <TIM_Base_SetConfig+0x124>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d108      	bne.n	8005e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2f      	ldr	r2, [pc, #188]	; (8005f20 <TIM_Base_SetConfig+0x114>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01f      	beq.n	8005ea6 <TIM_Base_SetConfig+0x9a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6c:	d01b      	beq.n	8005ea6 <TIM_Base_SetConfig+0x9a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a2c      	ldr	r2, [pc, #176]	; (8005f24 <TIM_Base_SetConfig+0x118>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d017      	beq.n	8005ea6 <TIM_Base_SetConfig+0x9a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2b      	ldr	r2, [pc, #172]	; (8005f28 <TIM_Base_SetConfig+0x11c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <TIM_Base_SetConfig+0x9a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2a      	ldr	r2, [pc, #168]	; (8005f2c <TIM_Base_SetConfig+0x120>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00f      	beq.n	8005ea6 <TIM_Base_SetConfig+0x9a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a29      	ldr	r2, [pc, #164]	; (8005f30 <TIM_Base_SetConfig+0x124>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00b      	beq.n	8005ea6 <TIM_Base_SetConfig+0x9a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a28      	ldr	r2, [pc, #160]	; (8005f34 <TIM_Base_SetConfig+0x128>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <TIM_Base_SetConfig+0x9a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a27      	ldr	r2, [pc, #156]	; (8005f38 <TIM_Base_SetConfig+0x12c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d003      	beq.n	8005ea6 <TIM_Base_SetConfig+0x9a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a26      	ldr	r2, [pc, #152]	; (8005f3c <TIM_Base_SetConfig+0x130>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d108      	bne.n	8005eb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <TIM_Base_SetConfig+0x114>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00f      	beq.n	8005f04 <TIM_Base_SetConfig+0xf8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <TIM_Base_SetConfig+0x124>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00b      	beq.n	8005f04 <TIM_Base_SetConfig+0xf8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a11      	ldr	r2, [pc, #68]	; (8005f34 <TIM_Base_SetConfig+0x128>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d007      	beq.n	8005f04 <TIM_Base_SetConfig+0xf8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <TIM_Base_SetConfig+0x12c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_Base_SetConfig+0xf8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a0f      	ldr	r2, [pc, #60]	; (8005f3c <TIM_Base_SetConfig+0x130>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d103      	bne.n	8005f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	615a      	str	r2, [r3, #20]
}
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40000400 	.word	0x40000400
 8005f28:	40000800 	.word	0x40000800
 8005f2c:	40000c00 	.word	0x40000c00
 8005f30:	40013400 	.word	0x40013400
 8005f34:	40014000 	.word	0x40014000
 8005f38:	40014400 	.word	0x40014400
 8005f3c:	40014800 	.word	0x40014800

08005f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e040      	b.n	8006010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fb fca8 	bl	80018f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2224      	movs	r2, #36	; 0x24
 8005fa8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fae0 	bl	8006588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f825 	bl	8006018 <UART_SetConfig>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e01b      	b.n	8006010 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f042 0201 	orr.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 fb5f 	bl	80066cc <UART_CheckIdleState>
 800600e:	4603      	mov	r3, r0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800601c:	b08a      	sub	sp, #40	; 0x28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	431a      	orrs	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	431a      	orrs	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	4313      	orrs	r3, r2
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4ba4      	ldr	r3, [pc, #656]	; (80062d8 <UART_SetConfig+0x2c0>)
 8006048:	4013      	ands	r3, r2
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006050:	430b      	orrs	r3, r1
 8006052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a99      	ldr	r2, [pc, #612]	; (80062dc <UART_SetConfig+0x2c4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006080:	4313      	orrs	r3, r2
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a90      	ldr	r2, [pc, #576]	; (80062e0 <UART_SetConfig+0x2c8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d126      	bne.n	80060f0 <UART_SetConfig+0xd8>
 80060a2:	4b90      	ldr	r3, [pc, #576]	; (80062e4 <UART_SetConfig+0x2cc>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b03      	cmp	r3, #3
 80060ae:	d81b      	bhi.n	80060e8 <UART_SetConfig+0xd0>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <UART_SetConfig+0xa0>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060d9 	.word	0x080060d9
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080060e1 	.word	0x080060e1
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ce:	e116      	b.n	80062fe <UART_SetConfig+0x2e6>
 80060d0:	2302      	movs	r3, #2
 80060d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060d6:	e112      	b.n	80062fe <UART_SetConfig+0x2e6>
 80060d8:	2304      	movs	r3, #4
 80060da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060de:	e10e      	b.n	80062fe <UART_SetConfig+0x2e6>
 80060e0:	2308      	movs	r3, #8
 80060e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060e6:	e10a      	b.n	80062fe <UART_SetConfig+0x2e6>
 80060e8:	2310      	movs	r3, #16
 80060ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ee:	e106      	b.n	80062fe <UART_SetConfig+0x2e6>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a7c      	ldr	r2, [pc, #496]	; (80062e8 <UART_SetConfig+0x2d0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d138      	bne.n	800616c <UART_SetConfig+0x154>
 80060fa:	4b7a      	ldr	r3, [pc, #488]	; (80062e4 <UART_SetConfig+0x2cc>)
 80060fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006100:	f003 030c 	and.w	r3, r3, #12
 8006104:	2b0c      	cmp	r3, #12
 8006106:	d82d      	bhi.n	8006164 <UART_SetConfig+0x14c>
 8006108:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <UART_SetConfig+0xf8>)
 800610a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610e:	bf00      	nop
 8006110:	08006145 	.word	0x08006145
 8006114:	08006165 	.word	0x08006165
 8006118:	08006165 	.word	0x08006165
 800611c:	08006165 	.word	0x08006165
 8006120:	08006155 	.word	0x08006155
 8006124:	08006165 	.word	0x08006165
 8006128:	08006165 	.word	0x08006165
 800612c:	08006165 	.word	0x08006165
 8006130:	0800614d 	.word	0x0800614d
 8006134:	08006165 	.word	0x08006165
 8006138:	08006165 	.word	0x08006165
 800613c:	08006165 	.word	0x08006165
 8006140:	0800615d 	.word	0x0800615d
 8006144:	2300      	movs	r3, #0
 8006146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800614a:	e0d8      	b.n	80062fe <UART_SetConfig+0x2e6>
 800614c:	2302      	movs	r3, #2
 800614e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006152:	e0d4      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006154:	2304      	movs	r3, #4
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615a:	e0d0      	b.n	80062fe <UART_SetConfig+0x2e6>
 800615c:	2308      	movs	r3, #8
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006162:	e0cc      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006164:	2310      	movs	r3, #16
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616a:	e0c8      	b.n	80062fe <UART_SetConfig+0x2e6>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a5e      	ldr	r2, [pc, #376]	; (80062ec <UART_SetConfig+0x2d4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d125      	bne.n	80061c2 <UART_SetConfig+0x1aa>
 8006176:	4b5b      	ldr	r3, [pc, #364]	; (80062e4 <UART_SetConfig+0x2cc>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006180:	2b30      	cmp	r3, #48	; 0x30
 8006182:	d016      	beq.n	80061b2 <UART_SetConfig+0x19a>
 8006184:	2b30      	cmp	r3, #48	; 0x30
 8006186:	d818      	bhi.n	80061ba <UART_SetConfig+0x1a2>
 8006188:	2b20      	cmp	r3, #32
 800618a:	d00a      	beq.n	80061a2 <UART_SetConfig+0x18a>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d814      	bhi.n	80061ba <UART_SetConfig+0x1a2>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <UART_SetConfig+0x182>
 8006194:	2b10      	cmp	r3, #16
 8006196:	d008      	beq.n	80061aa <UART_SetConfig+0x192>
 8006198:	e00f      	b.n	80061ba <UART_SetConfig+0x1a2>
 800619a:	2300      	movs	r3, #0
 800619c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a0:	e0ad      	b.n	80062fe <UART_SetConfig+0x2e6>
 80061a2:	2302      	movs	r3, #2
 80061a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a8:	e0a9      	b.n	80062fe <UART_SetConfig+0x2e6>
 80061aa:	2304      	movs	r3, #4
 80061ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b0:	e0a5      	b.n	80062fe <UART_SetConfig+0x2e6>
 80061b2:	2308      	movs	r3, #8
 80061b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b8:	e0a1      	b.n	80062fe <UART_SetConfig+0x2e6>
 80061ba:	2310      	movs	r3, #16
 80061bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c0:	e09d      	b.n	80062fe <UART_SetConfig+0x2e6>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a4a      	ldr	r2, [pc, #296]	; (80062f0 <UART_SetConfig+0x2d8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d125      	bne.n	8006218 <UART_SetConfig+0x200>
 80061cc:	4b45      	ldr	r3, [pc, #276]	; (80062e4 <UART_SetConfig+0x2cc>)
 80061ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061d6:	2bc0      	cmp	r3, #192	; 0xc0
 80061d8:	d016      	beq.n	8006208 <UART_SetConfig+0x1f0>
 80061da:	2bc0      	cmp	r3, #192	; 0xc0
 80061dc:	d818      	bhi.n	8006210 <UART_SetConfig+0x1f8>
 80061de:	2b80      	cmp	r3, #128	; 0x80
 80061e0:	d00a      	beq.n	80061f8 <UART_SetConfig+0x1e0>
 80061e2:	2b80      	cmp	r3, #128	; 0x80
 80061e4:	d814      	bhi.n	8006210 <UART_SetConfig+0x1f8>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <UART_SetConfig+0x1d8>
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d008      	beq.n	8006200 <UART_SetConfig+0x1e8>
 80061ee:	e00f      	b.n	8006210 <UART_SetConfig+0x1f8>
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f6:	e082      	b.n	80062fe <UART_SetConfig+0x2e6>
 80061f8:	2302      	movs	r3, #2
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fe:	e07e      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006200:	2304      	movs	r3, #4
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006206:	e07a      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006208:	2308      	movs	r3, #8
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620e:	e076      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006210:	2310      	movs	r3, #16
 8006212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006216:	e072      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a35      	ldr	r2, [pc, #212]	; (80062f4 <UART_SetConfig+0x2dc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d12a      	bne.n	8006278 <UART_SetConfig+0x260>
 8006222:	4b30      	ldr	r3, [pc, #192]	; (80062e4 <UART_SetConfig+0x2cc>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006230:	d01a      	beq.n	8006268 <UART_SetConfig+0x250>
 8006232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006236:	d81b      	bhi.n	8006270 <UART_SetConfig+0x258>
 8006238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623c:	d00c      	beq.n	8006258 <UART_SetConfig+0x240>
 800623e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006242:	d815      	bhi.n	8006270 <UART_SetConfig+0x258>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <UART_SetConfig+0x238>
 8006248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624c:	d008      	beq.n	8006260 <UART_SetConfig+0x248>
 800624e:	e00f      	b.n	8006270 <UART_SetConfig+0x258>
 8006250:	2300      	movs	r3, #0
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006256:	e052      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006258:	2302      	movs	r3, #2
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625e:	e04e      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006260:	2304      	movs	r3, #4
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e04a      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006268:	2308      	movs	r3, #8
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e046      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006270:	2310      	movs	r3, #16
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e042      	b.n	80062fe <UART_SetConfig+0x2e6>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a17      	ldr	r2, [pc, #92]	; (80062dc <UART_SetConfig+0x2c4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d13a      	bne.n	80062f8 <UART_SetConfig+0x2e0>
 8006282:	4b18      	ldr	r3, [pc, #96]	; (80062e4 <UART_SetConfig+0x2cc>)
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800628c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006290:	d01a      	beq.n	80062c8 <UART_SetConfig+0x2b0>
 8006292:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006296:	d81b      	bhi.n	80062d0 <UART_SetConfig+0x2b8>
 8006298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629c:	d00c      	beq.n	80062b8 <UART_SetConfig+0x2a0>
 800629e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a2:	d815      	bhi.n	80062d0 <UART_SetConfig+0x2b8>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <UART_SetConfig+0x298>
 80062a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ac:	d008      	beq.n	80062c0 <UART_SetConfig+0x2a8>
 80062ae:	e00f      	b.n	80062d0 <UART_SetConfig+0x2b8>
 80062b0:	2300      	movs	r3, #0
 80062b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b6:	e022      	b.n	80062fe <UART_SetConfig+0x2e6>
 80062b8:	2302      	movs	r3, #2
 80062ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062be:	e01e      	b.n	80062fe <UART_SetConfig+0x2e6>
 80062c0:	2304      	movs	r3, #4
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c6:	e01a      	b.n	80062fe <UART_SetConfig+0x2e6>
 80062c8:	2308      	movs	r3, #8
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ce:	e016      	b.n	80062fe <UART_SetConfig+0x2e6>
 80062d0:	2310      	movs	r3, #16
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d6:	e012      	b.n	80062fe <UART_SetConfig+0x2e6>
 80062d8:	efff69f3 	.word	0xefff69f3
 80062dc:	40008000 	.word	0x40008000
 80062e0:	40013800 	.word	0x40013800
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40004400 	.word	0x40004400
 80062ec:	40004800 	.word	0x40004800
 80062f0:	40004c00 	.word	0x40004c00
 80062f4:	40005000 	.word	0x40005000
 80062f8:	2310      	movs	r3, #16
 80062fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a9f      	ldr	r2, [pc, #636]	; (8006580 <UART_SetConfig+0x568>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d17a      	bne.n	80063fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800630c:	2b08      	cmp	r3, #8
 800630e:	d824      	bhi.n	800635a <UART_SetConfig+0x342>
 8006310:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <UART_SetConfig+0x300>)
 8006312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006316:	bf00      	nop
 8006318:	0800633d 	.word	0x0800633d
 800631c:	0800635b 	.word	0x0800635b
 8006320:	08006345 	.word	0x08006345
 8006324:	0800635b 	.word	0x0800635b
 8006328:	0800634b 	.word	0x0800634b
 800632c:	0800635b 	.word	0x0800635b
 8006330:	0800635b 	.word	0x0800635b
 8006334:	0800635b 	.word	0x0800635b
 8006338:	08006353 	.word	0x08006353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800633c:	f7fe f8aa 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 8006340:	61f8      	str	r0, [r7, #28]
        break;
 8006342:	e010      	b.n	8006366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006344:	4b8f      	ldr	r3, [pc, #572]	; (8006584 <UART_SetConfig+0x56c>)
 8006346:	61fb      	str	r3, [r7, #28]
        break;
 8006348:	e00d      	b.n	8006366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634a:	f7fe f80b 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 800634e:	61f8      	str	r0, [r7, #28]
        break;
 8006350:	e009      	b.n	8006366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006356:	61fb      	str	r3, [r7, #28]
        break;
 8006358:	e005      	b.n	8006366 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80fb 	beq.w	8006564 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	429a      	cmp	r2, r3
 800637c:	d305      	bcc.n	800638a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	429a      	cmp	r2, r3
 8006388:	d903      	bls.n	8006392 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006390:	e0e8      	b.n	8006564 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2200      	movs	r2, #0
 8006396:	461c      	mov	r4, r3
 8006398:	4615      	mov	r5, r2
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	022b      	lsls	r3, r5, #8
 80063a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063a8:	0222      	lsls	r2, r4, #8
 80063aa:	68f9      	ldr	r1, [r7, #12]
 80063ac:	6849      	ldr	r1, [r1, #4]
 80063ae:	0849      	lsrs	r1, r1, #1
 80063b0:	2000      	movs	r0, #0
 80063b2:	4688      	mov	r8, r1
 80063b4:	4681      	mov	r9, r0
 80063b6:	eb12 0a08 	adds.w	sl, r2, r8
 80063ba:	eb43 0b09 	adc.w	fp, r3, r9
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	603b      	str	r3, [r7, #0]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	f7fa fb8c 	bl	8000aec <__aeabi_uldivmod>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4613      	mov	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e2:	d308      	bcc.n	80063f6 <UART_SetConfig+0x3de>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ea:	d204      	bcs.n	80063f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	60da      	str	r2, [r3, #12]
 80063f4:	e0b6      	b.n	8006564 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063fc:	e0b2      	b.n	8006564 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006406:	d15e      	bne.n	80064c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006408:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800640c:	2b08      	cmp	r3, #8
 800640e:	d828      	bhi.n	8006462 <UART_SetConfig+0x44a>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <UART_SetConfig+0x400>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	0800643d 	.word	0x0800643d
 800641c:	08006445 	.word	0x08006445
 8006420:	0800644d 	.word	0x0800644d
 8006424:	08006463 	.word	0x08006463
 8006428:	08006453 	.word	0x08006453
 800642c:	08006463 	.word	0x08006463
 8006430:	08006463 	.word	0x08006463
 8006434:	08006463 	.word	0x08006463
 8006438:	0800645b 	.word	0x0800645b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800643c:	f7fe f82a 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 8006440:	61f8      	str	r0, [r7, #28]
        break;
 8006442:	e014      	b.n	800646e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006444:	f7fe f83c 	bl	80044c0 <HAL_RCC_GetPCLK2Freq>
 8006448:	61f8      	str	r0, [r7, #28]
        break;
 800644a:	e010      	b.n	800646e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800644c:	4b4d      	ldr	r3, [pc, #308]	; (8006584 <UART_SetConfig+0x56c>)
 800644e:	61fb      	str	r3, [r7, #28]
        break;
 8006450:	e00d      	b.n	800646e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006452:	f7fd ff87 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8006456:	61f8      	str	r0, [r7, #28]
        break;
 8006458:	e009      	b.n	800646e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	61fb      	str	r3, [r7, #28]
        break;
 8006460:	e005      	b.n	800646e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800646c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d077      	beq.n	8006564 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	005a      	lsls	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	085b      	lsrs	r3, r3, #1
 800647e:	441a      	add	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b0f      	cmp	r3, #15
 800648e:	d916      	bls.n	80064be <UART_SetConfig+0x4a6>
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006496:	d212      	bcs.n	80064be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f023 030f 	bic.w	r3, r3, #15
 80064a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	085b      	lsrs	r3, r3, #1
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	8afb      	ldrh	r3, [r7, #22]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	8afa      	ldrh	r2, [r7, #22]
 80064ba:	60da      	str	r2, [r3, #12]
 80064bc:	e052      	b.n	8006564 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064c4:	e04e      	b.n	8006564 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d827      	bhi.n	800651e <UART_SetConfig+0x506>
 80064ce:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <UART_SetConfig+0x4bc>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	080064f9 	.word	0x080064f9
 80064d8:	08006501 	.word	0x08006501
 80064dc:	08006509 	.word	0x08006509
 80064e0:	0800651f 	.word	0x0800651f
 80064e4:	0800650f 	.word	0x0800650f
 80064e8:	0800651f 	.word	0x0800651f
 80064ec:	0800651f 	.word	0x0800651f
 80064f0:	0800651f 	.word	0x0800651f
 80064f4:	08006517 	.word	0x08006517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f8:	f7fd ffcc 	bl	8004494 <HAL_RCC_GetPCLK1Freq>
 80064fc:	61f8      	str	r0, [r7, #28]
        break;
 80064fe:	e014      	b.n	800652a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006500:	f7fd ffde 	bl	80044c0 <HAL_RCC_GetPCLK2Freq>
 8006504:	61f8      	str	r0, [r7, #28]
        break;
 8006506:	e010      	b.n	800652a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006508:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <UART_SetConfig+0x56c>)
 800650a:	61fb      	str	r3, [r7, #28]
        break;
 800650c:	e00d      	b.n	800652a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650e:	f7fd ff29 	bl	8004364 <HAL_RCC_GetSysClockFreq>
 8006512:	61f8      	str	r0, [r7, #28]
        break;
 8006514:	e009      	b.n	800652a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651a:	61fb      	str	r3, [r7, #28]
        break;
 800651c:	e005      	b.n	800652a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006528:	bf00      	nop
    }

    if (pclk != 0U)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d019      	beq.n	8006564 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	085a      	lsrs	r2, r3, #1
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	441a      	add	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006542:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b0f      	cmp	r3, #15
 8006548:	d909      	bls.n	800655e <UART_SetConfig+0x546>
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006550:	d205      	bcs.n	800655e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	b29a      	uxth	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60da      	str	r2, [r3, #12]
 800655c:	e002      	b.n	8006564 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006570:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006574:	4618      	mov	r0, r3
 8006576:	3728      	adds	r7, #40	; 0x28
 8006578:	46bd      	mov	sp, r7
 800657a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800657e:	bf00      	nop
 8006580:	40008000 	.word	0x40008000
 8006584:	00f42400 	.word	0x00f42400

08006588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d10a      	bne.n	800669e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b098      	sub	sp, #96	; 0x60
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066dc:	f7fb fd84 	bl	80021e8 <HAL_GetTick>
 80066e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d12e      	bne.n	800674e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f88c 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d021      	beq.n	800674e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671e:	653b      	str	r3, [r7, #80]	; 0x50
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
 800672a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800672e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e6      	bne.n	800670a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e062      	b.n	8006814 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b04      	cmp	r3, #4
 800675a:	d149      	bne.n	80067f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006764:	2200      	movs	r2, #0
 8006766:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f856 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d03c      	beq.n	80067f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	623b      	str	r3, [r7, #32]
   return(result);
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	633b      	str	r3, [r7, #48]	; 0x30
 8006796:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800679a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	617b      	str	r3, [r7, #20]
   return(result);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e5      	bne.n	80067a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e011      	b.n	8006814 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3758      	adds	r7, #88	; 0x58
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682c:	e049      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d045      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fb fcd7 	bl	80021e8 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <UART_WaitOnFlagUntilTimeout+0x30>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e048      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d031      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b08      	cmp	r3, #8
 800686a:	d110      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2208      	movs	r2, #8
 8006872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f838 	bl	80068ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2208      	movs	r2, #8
 800687e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e029      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800689c:	d111      	bne.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f81e 	bl	80068ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e00f      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d0a6      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b095      	sub	sp, #84	; 0x54
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	643b      	str	r3, [r7, #64]	; 0x40
 8006912:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e6      	bne.n	80068f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3308      	adds	r3, #8
 800692a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	61fb      	str	r3, [r7, #28]
   return(result);
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	64bb      	str	r3, [r7, #72]	; 0x48
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695c:	2b01      	cmp	r3, #1
 800695e:	d118      	bne.n	8006992 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60bb      	str	r3, [r7, #8]
   return(result);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f023 0310 	bic.w	r3, r3, #16
 8006974:	647b      	str	r3, [r7, #68]	; 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	6979      	ldr	r1, [r7, #20]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	613b      	str	r3, [r7, #16]
   return(result);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e6      	bne.n	8006960 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069a6:	bf00      	nop
 80069a8:	3754      	adds	r7, #84	; 0x54
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b082      	sub	sp, #8
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3304      	adds	r3, #4
 80069ce:	2280      	movs	r2, #128	; 0x80
 80069d0:	2100      	movs	r1, #0
 80069d2:	4618      	mov	r0, r3
 80069d4:	f004 f966 	bl	800aca4 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3384      	adds	r3, #132	; 0x84
 80069dc:	2280      	movs	r2, #128	; 0x80
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f004 f95f 	bl	800aca4 <memset>
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b088      	sub	sp, #32
 80069f2:	af02      	add	r7, sp, #8
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	461a      	mov	r2, r3
 80069fa:	460b      	mov	r3, r1
 80069fc:	72fb      	strb	r3, [r7, #11]
 80069fe:	4613      	mov	r3, r2
 8006a00:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8006a02:	893b      	ldrh	r3, [r7, #8]
 8006a04:	3301      	adds	r3, #1
 8006a06:	4618      	mov	r0, r3
 8006a08:	f004 f85c 	bl	800aac4 <malloc>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	7afa      	ldrb	r2, [r7, #11]
 8006a14:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d009      	beq.n	8006a30 <max30102_write+0x42>
 8006a1c:	893b      	ldrh	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d006      	beq.n	8006a30 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	3301      	adds	r3, #1
 8006a26:	893a      	ldrh	r2, [r7, #8]
 8006a28:	6879      	ldr	r1, [r7, #4]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f004 f9d4 	bl	800add8 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	893b      	ldrh	r3, [r7, #8]
 8006a36:	3301      	adds	r3, #1
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a3e:	9200      	str	r2, [sp, #0]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	21ae      	movs	r1, #174	; 0xae
 8006a44:	f7fb ff40 	bl	80028c8 <HAL_I2C_Master_Transmit>
    free(payload);
 8006a48:	6978      	ldr	r0, [r7, #20]
 8006a4a:	f004 f843 	bl	800aad4 <free>
}
 8006a4e:	bf00      	nop
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b088      	sub	sp, #32
 8006a5a:	af02      	add	r7, sp, #8
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	461a      	mov	r2, r3
 8006a62:	460b      	mov	r3, r1
 8006a64:	72fb      	strb	r3, [r7, #11]
 8006a66:	4613      	mov	r3, r2
 8006a68:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 8006a6a:	7afb      	ldrb	r3, [r7, #11]
 8006a6c:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	f107 0217 	add.w	r2, r7, #23
 8006a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	21ae      	movs	r1, #174	; 0xae
 8006a80:	f7fb ff22 	bl	80028c8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	893b      	ldrh	r3, [r7, #8]
 8006a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a8e:	9200      	str	r2, [sp, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	21ae      	movs	r1, #174	; 0xae
 8006a94:	f7fc f830 	bl	8002af8 <HAL_I2C_Master_Receive>
}
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 8006aa8:	2340      	movs	r3, #64	; 0x40
 8006aaa:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 8006aac:	f107 020f 	add.w	r2, r7, #15
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	2109      	movs	r1, #9
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7ff ff9a 	bl	80069ee <max30102_write>
}
 8006aba:	bf00      	nop
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8006ad2:	f107 020f 	add.w	r2, r7, #15
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	2102      	movs	r1, #2
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff ffbb 	bl	8006a56 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
 8006ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 8006aea:	78fb      	ldrb	r3, [r7, #3]
 8006aec:	01db      	lsls	r3, r3, #7
 8006aee:	b25a      	sxtb	r2, r3
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	b25b      	sxtb	r3, r3
 8006af4:	4313      	orrs	r3, r2
 8006af6:	b25b      	sxtb	r3, r3
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8006afc:	f107 020f 	add.w	r2, r7, #15
 8006b00:	2301      	movs	r3, #1
 8006b02:	2102      	movs	r1, #2
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ff72 	bl	80069ee <max30102_write>
}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 8006b2c:	f107 020f 	add.w	r2, r7, #15
 8006b30:	2301      	movs	r3, #1
 8006b32:	2103      	movs	r1, #3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff ff5a 	bl	80069ee <max30102_write>
}
 8006b3a:	bf00      	nop
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 8006b5c:	f107 020f 	add.w	r2, r7, #15
 8006b60:	2301      	movs	r3, #1
 8006b62:	2121      	movs	r1, #33	; 0x21
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff ff42 	bl	80069ee <max30102_write>
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 8006b7e:	f107 020f 	add.w	r2, r7, #15
 8006b82:	2301      	movs	r3, #1
 8006b84:	2109      	movs	r1, #9
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff ff65 	bl	8006a56 <max30102_read>
    config = (config & 0xf8) | mode;
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	b25b      	sxtb	r3, r3
 8006b90:	f023 0307 	bic.w	r3, r3, #7
 8006b94:	b25a      	sxtb	r2, r3
 8006b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	b25b      	sxtb	r3, r3
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 8006ba2:	f107 020f 	add.w	r2, r7, #15
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	2109      	movs	r1, #9
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7ff ff1f 	bl	80069ee <max30102_write>
    max30102_clear_fifo(obj);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f8fb 	bl	8006dac <max30102_clear_fifo>
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006bca:	f107 020f 	add.w	r2, r7, #15
 8006bce:	2301      	movs	r3, #1
 8006bd0:	210a      	movs	r1, #10
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff ff3f 	bl	8006a56 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	b25b      	sxtb	r3, r3
 8006bdc:	f003 0363 	and.w	r3, r3, #99	; 0x63
 8006be0:	b25a      	sxtb	r2, r3
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	b25b      	sxtb	r3, r3
 8006be8:	4313      	orrs	r3, r2
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006bf0:	f107 020f 	add.w	r2, r7, #15
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	210a      	movs	r1, #10
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff fef8 	bl	80069ee <max30102_write>
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006c12:	f107 020f 	add.w	r2, r7, #15
 8006c16:	2301      	movs	r3, #1
 8006c18:	210a      	movs	r1, #10
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff ff1b 	bl	8006a56 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006c28:	b25a      	sxtb	r2, r3
 8006c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006c36:	f107 020f 	add.w	r2, r7, #15
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	210a      	movs	r1, #10
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fed5 	bl	80069ee <max30102_write>
}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006c58:	f107 020f 	add.w	r2, r7, #15
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	210a      	movs	r1, #10
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f7ff fef8 	bl	8006a56 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	b25b      	sxtb	r3, r3
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	b25a      	sxtb	r2, r3
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	015b      	lsls	r3, r3, #5
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	4313      	orrs	r3, r2
 8006c78:	b25b      	sxtb	r3, r3
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8006c7e:	f107 020f 	add.w	r2, r7, #15
 8006c82:	2301      	movs	r3, #1
 8006c84:	210a      	movs	r1, #10
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7ff feb1 	bl	80069ee <max30102_write>
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	0000      	movs	r0, r0
	...

08006c98 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8006ca4:	6838      	ldr	r0, [r7, #0]
 8006ca6:	f7f9 fc47 	bl	8000538 <__aeabi_f2d>
 8006caa:	a30d      	add	r3, pc, #52	; (adr r3, 8006ce0 <max30102_set_led_current_1+0x48>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fdc4 	bl	800083c <__aeabi_ddiv>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4619      	mov	r1, r3
 8006cbc:	f7f9 fea6 	bl	8000a0c <__aeabi_d2uiz>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 8006cc6:	f107 020f 	add.w	r2, r7, #15
 8006cca:	2301      	movs	r3, #1
 8006ccc:	210c      	movs	r1, #12
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fe8d 	bl	80069ee <max30102_write>
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	9999999a 	.word	0x9999999a
 8006ce4:	3fc99999 	.word	0x3fc99999

08006ce8 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8006cf4:	6838      	ldr	r0, [r7, #0]
 8006cf6:	f7f9 fc1f 	bl	8000538 <__aeabi_f2d>
 8006cfa:	a30d      	add	r3, pc, #52	; (adr r3, 8006d30 <max30102_set_led_current_2+0x48>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f7f9 fd9c 	bl	800083c <__aeabi_ddiv>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	f7f9 fe7e 	bl	8000a0c <__aeabi_d2uiz>
 8006d10:	4603      	mov	r3, r0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8006d16:	f107 020f 	add.w	r2, r7, #15
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	210d      	movs	r1, #13
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fe65 	bl	80069ee <max30102_write>
}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	f3af 8000 	nop.w
 8006d30:	9999999a 	.word	0x9999999a
 8006d34:	3fc99999 	.word	0x3fc99999

08006d38 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	461a      	mov	r2, r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	70fb      	strb	r3, [r7, #3]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70bb      	strb	r3, [r7, #2]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	015b      	lsls	r3, r3, #5
 8006d5a:	b25a      	sxtb	r2, r3
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	b25b      	sxtb	r3, r3
 8006d60:	4313      	orrs	r3, r2
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8006d68:	78bb      	ldrb	r3, [r7, #2]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	f003 0310 	and.w	r3, r3, #16
 8006d72:	b25a      	sxtb	r2, r3
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	b25b      	sxtb	r3, r3
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	b25b      	sxtb	r3, r3
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 8006d80:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	b25a      	sxtb	r2, r3
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	b25b      	sxtb	r3, r3
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	b25b      	sxtb	r3, r3
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 8006d96:	f107 020f 	add.w	r2, r7, #15
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	2108      	movs	r1, #8
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff fe25 	bl	80069ee <max30102_write>
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 8006db8:	f107 020f 	add.w	r2, r7, #15
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	2104      	movs	r1, #4
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fe14 	bl	80069ee <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 8006dc6:	f107 020f 	add.w	r2, r7, #15
 8006dca:	2303      	movs	r3, #3
 8006dcc:	2106      	movs	r1, #6
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fe0d 	bl	80069ee <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8006dd4:	f107 020f 	add.w	r2, r7, #15
 8006dd8:	2303      	movs	r3, #3
 8006dda:	2105      	movs	r1, #5
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff fe06 	bl	80069ee <max30102_write>
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b088      	sub	sp, #32
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	74fb      	strb	r3, [r7, #19]
 8006df6:	2300      	movs	r3, #0
 8006df8:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 8006dfa:	f107 0213 	add.w	r2, r7, #19
 8006dfe:	2301      	movs	r3, #1
 8006e00:	2104      	movs	r1, #4
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fe27 	bl	8006a56 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8006e08:	f107 0212 	add.w	r2, r7, #18
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	2106      	movs	r1, #6
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff fe20 	bl	8006a56 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8006e16:	7cfa      	ldrb	r2, [r7, #19]
 8006e18:	7cbb      	ldrb	r3, [r7, #18]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8006e20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	dc03      	bgt.n	8006e30 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8006e28:	7ffb      	ldrb	r3, [r7, #31]
 8006e2a:	3320      	adds	r3, #32
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	77fb      	strb	r3, [r7, #31]
    }



    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8006e30:	2300      	movs	r3, #0
 8006e32:	77bb      	strb	r3, [r7, #30]
 8006e34:	e031      	b.n	8006e9a <max30102_read_fifo+0xb0>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8006e36:	f107 020c 	add.w	r2, r7, #12
 8006e3a:	2306      	movs	r3, #6
 8006e3c:	2107      	movs	r1, #7
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fe09 	bl	8006a56 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8006e44:	7b3b      	ldrb	r3, [r7, #12]
 8006e46:	041b      	lsls	r3, r3, #16
 8006e48:	461a      	mov	r2, r3
 8006e4a:	7b7b      	ldrb	r3, [r7, #13]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	7bba      	ldrb	r2, [r7, #14]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006e58:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	041b      	lsls	r3, r3, #16
 8006e5e:	461a      	mov	r2, r3
 8006e60:	7c3b      	ldrb	r3, [r7, #16]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	4313      	orrs	r3, r2
 8006e66:	7c7a      	ldrb	r2, [r7, #17]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8006e6e:	617b      	str	r3, [r7, #20]
        //possible resolution mix up when scaling to higher resolutions

        obj->_ir_samples[i] = ir_sample;
 8006e70:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 8006e7e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	3320      	adds	r3, #32
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	605a      	str	r2, [r3, #4]
    for (int8_t i = 0; i < num_samples; i++)
 8006e8e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	3301      	adds	r3, #1
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	77bb      	strb	r3, [r7, #30]
 8006e9a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8006e9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	dbc7      	blt.n	8006e36 <max30102_read_fifo+0x4c>

    }

    max30102_calculate_sample_data(num_samples);
 8006ea6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fa fa3e 	bl	800132c <max30102_calculate_sample_data>


}
 8006eb0:	bf00      	nop
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 8006eb8:	b590      	push	{r4, r7, lr}
 8006eba:	b0d3      	sub	sp, #332	; 0x14c
 8006ebc:	af04      	add	r7, sp, #16
 8006ebe:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8006ec2:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 8006ec6:	6020      	str	r0, [r4, #0]
 8006ec8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006ecc:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8006ed0:	6001      	str	r1, [r0, #0]
 8006ed2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8006ed6:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 8006eda:	600a      	str	r2, [r1, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ee2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006ee6:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc;
    int32_t n_y_dc_max, n_x_dc_max;
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5],n_ratio_average;
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8006ee8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006eec:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal
    un_ir_mean =0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 8006efc:	2300      	movs	r3, #0
 8006efe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f02:	e021      	b.n	8006f48 <maxim_heart_rate_and_oxygen_saturation+0x90>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8006f04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f0e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f12:	6812      	ldr	r2, [r2, #0]
 8006f14:	4413      	add	r3, r2
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8006f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f26:	3301      	adds	r3, #1
 8006f28:	4ad4      	ldr	r2, [pc, #848]	; (800727c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8006f2a:	fba2 1203 	umull	r1, r2, r2, r3
 8006f2e:	0952      	lsrs	r2, r2, #5
 8006f30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006f34:	fb01 f202 	mul.w	r2, r1, r2
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8006f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f42:	3301      	adds	r3, #1
 8006f44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f50:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	dbd4      	blt.n	8006f04 <maxim_heart_rate_and_oxygen_saturation+0x4c>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 8006f5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8006f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 8006f70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f74:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f84:	e025      	b.n	8006fd2 <maxim_heart_rate_and_oxygen_saturation+0x11a>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 8006f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f94:	6812      	ldr	r2, [r2, #0]
 8006f96:	4413      	add	r3, r2
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4ab7      	ldr	r2, [pc, #732]	; (8007280 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8006fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8006fac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	4ab2      	ldr	r2, [pc, #712]	; (800727c <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 8006fb4:	fba2 1203 	umull	r1, r2, r2, r3
 8006fb8:	0952      	lsrs	r2, r2, #5
 8006fba:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006fbe:	fb01 f202 	mul.w	r2, r1, r2
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 8006fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006fd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fd6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006fda:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	dbd0      	blt.n	8006f86 <maxim_heart_rate_and_oxygen_saturation+0xce>
	}

    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006fea:	e02c      	b.n	8007046 <maxim_heart_rate_and_oxygen_saturation+0x18e>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 8006fec:	4aa4      	ldr	r2, [pc, #656]	; (8007280 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8006fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	49a0      	ldr	r1, [pc, #640]	; (8007280 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8006ffe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007002:	441a      	add	r2, r3
 8007004:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007008:	3302      	adds	r3, #2
 800700a:	499d      	ldr	r1, [pc, #628]	; (8007280 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800700c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007010:	441a      	add	r2, r3
 8007012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007016:	3303      	adds	r3, #3
 8007018:	4999      	ldr	r1, [pc, #612]	; (8007280 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800701a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800701e:	4413      	add	r3, r2
 8007020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4;
 8007024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007028:	2b00      	cmp	r3, #0
 800702a:	da00      	bge.n	800702e <maxim_heart_rate_and_oxygen_saturation+0x176>
 800702c:	3303      	adds	r3, #3
 800702e:	109b      	asrs	r3, r3, #2
 8007030:	4619      	mov	r1, r3
 8007032:	4a93      	ldr	r2, [pc, #588]	; (8007280 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8007034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007038:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 800703c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007040:	3301      	adds	r3, #1
 8007042:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800704a:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 800704e:	dbcd      	blt.n	8006fec <maxim_heart_rate_and_oxygen_saturation+0x134>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8007050:	2300      	movs	r3, #0
 8007052:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007056:	e015      	b.n	8007084 <maxim_heart_rate_and_oxygen_saturation+0x1cc>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8007058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705c:	3301      	adds	r3, #1
 800705e:	4a88      	ldr	r2, [pc, #544]	; (8007280 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8007060:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007064:	4986      	ldr	r1, [pc, #536]	; (8007280 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8007066:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800706e:	1ad2      	subs	r2, r2, r3
 8007070:	4984      	ldr	r1, [pc, #528]	; (8007284 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8007072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 800707a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707e:	3301      	adds	r3, #1
 8007080:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007088:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800708c:	dde4      	ble.n	8007058 <maxim_heart_rate_and_oxygen_saturation+0x1a0>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 800708e:	2300      	movs	r3, #0
 8007090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007094:	e019      	b.n	80070ca <maxim_heart_rate_and_oxygen_saturation+0x212>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 8007096:	4a7b      	ldr	r2, [pc, #492]	; (8007284 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 8007098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800709c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a4:	3301      	adds	r3, #1
 80070a6:	4977      	ldr	r1, [pc, #476]	; (8007284 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80070a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80070ac:	4413      	add	r3, r2
 80070ae:	0fda      	lsrs	r2, r3, #31
 80070b0:	4413      	add	r3, r2
 80070b2:	105b      	asrs	r3, r3, #1
 80070b4:	4619      	mov	r1, r3
 80070b6:	4a73      	ldr	r2, [pc, #460]	; (8007284 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80070b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 80070c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c4:	3301      	adds	r3, #1
 80070c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80070ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ce:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 80070d2:	dbe0      	blt.n	8007096 <maxim_heart_rate_and_oxygen_saturation+0x1de>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070da:	e039      	b.n	8007150 <maxim_heart_rate_and_oxygen_saturation+0x298>
        s= 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 80070e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80070e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80070ea:	e018      	b.n	800711e <maxim_heart_rate_and_oxygen_saturation+0x266>
            s -= an_dx[k] *auw_hamm[k-i] ;
 80070ec:	4a65      	ldr	r2, [pc, #404]	; (8007284 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80070ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f6:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80070fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80070fe:	1a8a      	subs	r2, r1, r2
 8007100:	4961      	ldr	r1, [pc, #388]	; (8007288 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8007102:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007106:	fb02 f303 	mul.w	r3, r2, r3
 800710a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8007114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007118:	3301      	adds	r3, #1
 800711a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800711e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007122:	3304      	adds	r3, #4
 8007124:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007128:	429a      	cmp	r2, r3
 800712a:	dddf      	ble.n	80070ec <maxim_heart_rate_and_oxygen_saturation+0x234>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm
 800712c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007130:	4a56      	ldr	r2, [pc, #344]	; (800728c <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8007132:	fb82 1203 	smull	r1, r2, r2, r3
 8007136:	1252      	asrs	r2, r2, #9
 8007138:	17db      	asrs	r3, r3, #31
 800713a:	1ad2      	subs	r2, r2, r3
 800713c:	4951      	ldr	r1, [pc, #324]	; (8007284 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800713e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8007146:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800714a:	3301      	adds	r3, #1
 800714c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007150:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007154:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8007158:	ddc0      	ble.n	80070dc <maxim_heart_rate_and_oxygen_saturation+0x224>
    }


    n_th1=0; // threshold calculation
 800715a:	2300      	movs	r3, #0
 800715c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8007160:	2300      	movs	r3, #0
 8007162:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007166:	e011      	b.n	800718c <maxim_heart_rate_and_oxygen_saturation+0x2d4>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8007168:	4a46      	ldr	r2, [pc, #280]	; (8007284 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800716a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfb8      	it	lt
 8007176:	425b      	neglt	r3, r3
 8007178:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800717c:	4413      	add	r3, r2
 800717e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8007182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007186:	3301      	adds	r3, #1
 8007188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800718c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007190:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8007194:	dde8      	ble.n	8007168 <maxim_heart_rate_and_oxygen_saturation+0x2b0>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 8007196:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800719a:	4a3d      	ldr	r2, [pc, #244]	; (8007290 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 800719c:	fb82 1203 	smull	r1, r2, r2, r3
 80071a0:	1192      	asrs	r2, r2, #6
 80071a2:	17db      	asrs	r3, r3, #31
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks
 80071aa:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80071ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071b2:	2305      	movs	r3, #5
 80071b4:	9302      	str	r3, [sp, #8]
 80071b6:	2308      	movs	r3, #8
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	f240 13ef 	movw	r3, #495	; 0x1ef
 80071c4:	4a2f      	ldr	r2, [pc, #188]	; (8007284 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80071c6:	f000 fb91 	bl	80078ec <maxim_find_peaks>

    n_peak_interval_sum =0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 80071d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	dd44      	ble.n	8007262 <maxim_heart_rate_and_oxygen_saturation+0x3aa>
        for (k=1; k<n_npks; k++)
 80071d8:	2301      	movs	r3, #1
 80071da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80071de:	e01b      	b.n	8007218 <maxim_heart_rate_and_oxygen_saturation+0x360>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 80071e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80071e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80071e8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80071ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071f4:	1e59      	subs	r1, r3, #1
 80071f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80071fa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80071fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007208:	4413      	add	r3, r2
 800720a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 800720e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007212:	3301      	adds	r3, #1
 8007214:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007218:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800721c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007220:	429a      	cmp	r2, r3
 8007222:	dbdd      	blt.n	80071e0 <maxim_heart_rate_and_oxygen_saturation+0x328>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8007224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007228:	3b01      	subs	r3, #1
 800722a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800722e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007232:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8007236:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007242:	eddf 6a14 	vldr	s13, [pc, #80]	; 8007294 <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 8007246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800724a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800724e:	ee17 2a90 	vmov	r2, s15
 8007252:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007256:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8007258:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800725c:	2201      	movs	r2, #1
 800725e:	701a      	strb	r2, [r3, #0]
 8007260:	e007      	b.n	8007272 <maxim_heart_rate_and_oxygen_saturation+0x3ba>
    }
    else  {
        *pn_heart_rate = -999;
 8007262:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007266:	4a0c      	ldr	r2, [pc, #48]	; (8007298 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8007268:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 800726a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
    }

    for ( k=0 ; k<n_npks ;k++)
 8007272:	2300      	movs	r3, #0
 8007274:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007278:	e026      	b.n	80072c8 <maxim_heart_rate_and_oxygen_saturation+0x410>
 800727a:	bf00      	nop
 800727c:	10624dd3 	.word	0x10624dd3
 8007280:	20001ea8 	.word	0x20001ea8
 8007284:	200016e8 	.word	0x200016e8
 8007288:	0800be50 	.word	0x0800be50
 800728c:	725f9bed 	.word	0x725f9bed
 8007290:	21195767 	.word	0x21195767
 8007294:	45bb8000 	.word	0x45bb8000
 8007298:	fffffc19 	.word	0xfffffc19
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 800729c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80072a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80072a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ac:	1c9a      	adds	r2, r3, #2
 80072ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80072b8:	443b      	add	r3, r7
 80072ba:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 80072be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c2:	3301      	adds	r3, #1
 80072c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80072c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80072d0:	429a      	cmp	r2, r3
 80072d2:	dbe3      	blt.n	800729c <maxim_heart_rate_and_oxygen_saturation+0x3e4>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 80072d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072d8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 80072e2:	2300      	movs	r3, #0
 80072e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80072e8:	e032      	b.n	8007350 <maxim_heart_rate_and_oxygen_saturation+0x498>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 80072ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80072f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	4413      	add	r3, r2
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4619      	mov	r1, r3
 8007300:	4ab3      	ldr	r2, [pc, #716]	; (80075d0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 800730a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007314:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007318:	6812      	ldr	r2, [r2, #0]
 800731a:	4413      	add	r3, r2
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4619      	mov	r1, r3
 8007320:	4aac      	ldr	r2, [pc, #688]	; (80075d4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8007322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 800732a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800732e:	3301      	adds	r3, #1
 8007330:	4aa9      	ldr	r2, [pc, #676]	; (80075d8 <maxim_heart_rate_and_oxygen_saturation+0x720>)
 8007332:	fba2 1203 	umull	r1, r2, r2, r3
 8007336:	0952      	lsrs	r2, r2, #5
 8007338:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800733c:	fb01 f202 	mul.w	r2, r1, r2
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8007346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734a:	3301      	adds	r3, #1
 800734c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007350:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007354:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007358:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	dbc3      	blt.n	80072ea <maxim_heart_rate_and_oxygen_saturation+0x432>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0;
 8007362:	2300      	movs	r3, #0
 8007364:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8007368:	2300      	movs	r3, #0
 800736a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800736e:	e05a      	b.n	8007426 <maxim_heart_rate_and_oxygen_saturation+0x56e>
        un_only_once =1;
 8007370:	2301      	movs	r3, #1
 8007372:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8007376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007380:	443b      	add	r3, r7
 8007382:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8007386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 800738a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800738e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8007392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007396:	f5b3 7ff5 	cmp.w	r3, #490	; 0x1ea
 800739a:	da3f      	bge.n	800741c <maxim_heart_rate_and_oxygen_saturation+0x564>
 800739c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a0:	2b05      	cmp	r3, #5
 80073a2:	dd3b      	ble.n	800741c <maxim_heart_rate_and_oxygen_saturation+0x564>
            for(i= m-5;i<m+5; i++)
 80073a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a8:	3b05      	subs	r3, #5
 80073aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073ae:	e025      	b.n	80073fc <maxim_heart_rate_and_oxygen_saturation+0x544>
                if (an_x[i]<n_c_min){
 80073b0:	4a87      	ldr	r2, [pc, #540]	; (80075d0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80073b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80073be:	429a      	cmp	r2, r3
 80073c0:	dd17      	ble.n	80073f2 <maxim_heart_rate_and_oxygen_saturation+0x53a>
                    if (un_only_once >0){
 80073c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <maxim_heart_rate_and_oxygen_saturation+0x518>
                       un_only_once =0;
 80073ca:	2300      	movs	r3, #0
 80073cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   }
                   n_c_min= an_x[i] ;
 80073d0:	4a7f      	ldr	r2, [pc, #508]	; (80075d0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 80073d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 80073de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80073e8:	443b      	add	r3, r7
 80073ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80073ee:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 80073f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073f6:	3301      	adds	r3, #1
 80073f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007400:	3304      	adds	r3, #4
 8007402:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007406:	429a      	cmp	r2, r3
 8007408:	ddd2      	ble.n	80073b0 <maxim_heart_rate_and_oxygen_saturation+0x4f8>
                }
            if (un_only_once ==0)
 800740a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <maxim_heart_rate_and_oxygen_saturation+0x564>
                n_exact_ir_valley_locs_count ++ ;
 8007412:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007416:	3301      	adds	r3, #1
 8007418:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 800741c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007420:	3301      	adds	r3, #1
 8007422:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800742a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800742e:	429a      	cmp	r2, r3
 8007430:	db9e      	blt.n	8007370 <maxim_heart_rate_and_oxygen_saturation+0x4b8>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8007432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007436:	2b01      	cmp	r3, #1
 8007438:	dc08      	bgt.n	800744c <maxim_heart_rate_and_oxygen_saturation+0x594>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 800743a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800743e:	4a67      	ldr	r2, [pc, #412]	; (80075dc <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8007440:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0;
 8007442:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007446:	2200      	movs	r2, #0
 8007448:	701a      	strb	r2, [r3, #0]
       return;
 800744a:	e243      	b.n	80078d4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 800744c:	2300      	movs	r3, #0
 800744e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007452:	e04c      	b.n	80074ee <maxim_heart_rate_and_oxygen_saturation+0x636>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8007454:	4a5e      	ldr	r2, [pc, #376]	; (80075d0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007456:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800745e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007462:	3301      	adds	r3, #1
 8007464:	495a      	ldr	r1, [pc, #360]	; (80075d0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007466:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800746a:	441a      	add	r2, r3
 800746c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007470:	3302      	adds	r3, #2
 8007472:	4957      	ldr	r1, [pc, #348]	; (80075d0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007474:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007478:	441a      	add	r2, r3
 800747a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747e:	3303      	adds	r3, #3
 8007480:	4953      	ldr	r1, [pc, #332]	; (80075d0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007482:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007486:	4413      	add	r3, r2
 8007488:	2b00      	cmp	r3, #0
 800748a:	da00      	bge.n	800748e <maxim_heart_rate_and_oxygen_saturation+0x5d6>
 800748c:	3303      	adds	r3, #3
 800748e:	109b      	asrs	r3, r3, #2
 8007490:	4619      	mov	r1, r3
 8007492:	4a4f      	ldr	r2, [pc, #316]	; (80075d0 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 800749c:	4a4d      	ldr	r2, [pc, #308]	; (80075d4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 800749e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80074a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074aa:	3301      	adds	r3, #1
 80074ac:	4949      	ldr	r1, [pc, #292]	; (80075d4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80074ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80074b2:	441a      	add	r2, r3
 80074b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b8:	3302      	adds	r3, #2
 80074ba:	4946      	ldr	r1, [pc, #280]	; (80075d4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80074bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80074c0:	441a      	add	r2, r3
 80074c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c6:	3303      	adds	r3, #3
 80074c8:	4942      	ldr	r1, [pc, #264]	; (80075d4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80074ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80074ce:	4413      	add	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da00      	bge.n	80074d6 <maxim_heart_rate_and_oxygen_saturation+0x61e>
 80074d4:	3303      	adds	r3, #3
 80074d6:	109b      	asrs	r3, r3, #2
 80074d8:	4619      	mov	r1, r3
 80074da:	4a3e      	ldr	r2, [pc, #248]	; (80075d4 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 80074dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 80074e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e8:	3301      	adds	r3, #1
 80074ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80074ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f2:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80074f6:	dbad      	blt.n	8007454 <maxim_heart_rate_and_oxygen_saturation+0x59c>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0;
 80074fe:	2300      	movs	r3, #0
 8007500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    for(k=0; k< 5; k++) an_ratio[k]=0;
 8007504:	2300      	movs	r3, #0
 8007506:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800750a:	e00d      	b.n	8007528 <maxim_heart_rate_and_oxygen_saturation+0x670>
 800750c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007510:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007514:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007518:	2100      	movs	r1, #0
 800751a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007522:	3301      	adds	r3, #1
 8007524:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007528:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800752c:	2b04      	cmp	r3, #4
 800752e:	dded      	ble.n	800750c <maxim_heart_rate_and_oxygen_saturation+0x654>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8007530:	2300      	movs	r3, #0
 8007532:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007536:	e018      	b.n	800756a <maxim_heart_rate_and_oxygen_saturation+0x6b2>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){
 8007538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007542:	443b      	add	r3, r7
 8007544:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007548:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800754c:	dd08      	ble.n	8007560 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 800754e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007552:	4a22      	ldr	r2, [pc, #136]	; (80075dc <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8007554:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0;
 8007556:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
            return;
 800755e:	e1b9      	b.n	80078d4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8007560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007564:	3301      	adds	r3, #1
 8007566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800756a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800756e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007572:	429a      	cmp	r2, r3
 8007574:	dbe0      	blt.n	8007538 <maxim_heart_rate_and_oxygen_saturation+0x680>
        }
    }
    // find max between two valley locations
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8007576:	2300      	movs	r3, #0
 8007578:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800757c:	e14d      	b.n	800781a <maxim_heart_rate_and_oxygen_saturation+0x962>
        n_y_dc_max= -16777216 ;
 800757e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8007582:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216;
 8007586:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800758a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	3301      	adds	r3, #1
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800759a:	443b      	add	r3, r7
 800759c:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 80075a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80075aa:	443b      	add	r3, r7
 80075ac:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b0a      	cmp	r3, #10
 80075b4:	f340 812c 	ble.w	8007810 <maxim_heart_rate_and_oxygen_saturation+0x958>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 80075b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80075c2:	443b      	add	r3, r7
 80075c4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80075c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80075cc:	e035      	b.n	800763a <maxim_heart_rate_and_oxygen_saturation+0x782>
 80075ce:	bf00      	nop
 80075d0:	20001ea8 	.word	0x20001ea8
 80075d4:	20002678 	.word	0x20002678
 80075d8:	10624dd3 	.word	0x10624dd3
 80075dc:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 80075e0:	4abe      	ldr	r2, [pc, #760]	; (80078dc <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80075e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ea:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80075ee:	429a      	cmp	r2, r3
 80075f0:	da0a      	bge.n	8007608 <maxim_heart_rate_and_oxygen_saturation+0x750>
 80075f2:	4aba      	ldr	r2, [pc, #744]	; (80078dc <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 80075f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80075f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007600:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007604:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8007608:	4ab5      	ldr	r2, [pc, #724]	; (80078e0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 800760a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800760e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007612:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007616:	429a      	cmp	r2, r3
 8007618:	da0a      	bge.n	8007630 <maxim_heart_rate_and_oxygen_saturation+0x778>
 800761a:	4ab1      	ldr	r2, [pc, #708]	; (80078e0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 800761c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007624:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007628:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800762c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8007630:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007634:	3301      	adds	r3, #1
 8007636:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800763a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763e:	3301      	adds	r3, #1
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007646:	443b      	add	r3, r7
 8007648:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800764c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007650:	429a      	cmp	r2, r3
 8007652:	dbc5      	blt.n	80075e0 <maxim_heart_rate_and_oxygen_saturation+0x728>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8007654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007658:	3301      	adds	r3, #1
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007660:	443b      	add	r3, r7
 8007662:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007666:	4a9e      	ldr	r2, [pc, #632]	; (80078e0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8007668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800766c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007676:	443b      	add	r3, r7
 8007678:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800767c:	4998      	ldr	r1, [pc, #608]	; (80078e0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 800767e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800768e:	443b      	add	r3, r7
 8007690:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007694:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8007698:	1acb      	subs	r3, r1, r3
 800769a:	fb02 f303 	mul.w	r3, r2, r3
 800769e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ;
 80076a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80076ac:	443b      	add	r3, r7
 80076ae:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80076b2:	4a8b      	ldr	r2, [pc, #556]	; (80078e0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80076b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076bc:	3301      	adds	r3, #1
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80076c4:	443b      	add	r3, r7
 80076c6:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 80076ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80076d4:	443b      	add	r3, r7
 80076d6:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 80076da:	1acb      	subs	r3, r1, r3
 80076dc:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80076e0:	fb91 f3f3 	sdiv	r3, r1, r3
 80076e4:	4413      	add	r3, r2
 80076e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec


            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 80076ea:	4a7d      	ldr	r2, [pc, #500]	; (80078e0 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 80076ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 80076fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007702:	3301      	adds	r3, #1
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800770a:	443b      	add	r3, r7
 800770c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007710:	4a72      	ldr	r2, [pc, #456]	; (80078dc <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007720:	443b      	add	r3, r7
 8007722:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007726:	496d      	ldr	r1, [pc, #436]	; (80078dc <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007728:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800772c:	1ad2      	subs	r2, r2, r3
 800772e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007738:	443b      	add	r3, r7
 800773a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800773e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8007742:	1acb      	subs	r3, r1, r3
 8007744:	fb02 f303 	mul.w	r3, r2, r3
 8007748:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 800774c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007756:	443b      	add	r3, r7
 8007758:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 800775c:	4a5f      	ldr	r2, [pc, #380]	; (80078dc <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 800775e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007766:	3301      	adds	r3, #1
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800776e:	443b      	add	r3, r7
 8007770:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 8007774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800777e:	443b      	add	r3, r7
 8007780:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007784:	1acb      	subs	r3, r1, r3
 8007786:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800778a:	fb91 f3f3 	sdiv	r3, r1, r3
 800778e:	4413      	add	r3, r2
 8007790:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 8007794:	4a51      	ldr	r2, [pc, #324]	; (80078dc <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800779a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800779e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 80077a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80077ac:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80077b0:	fb02 f303 	mul.w	r3, r2, r3
 80077b4:	11db      	asrs	r3, r3, #7
 80077b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 80077ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077be:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80077c2:	fb02 f303 	mul.w	r3, r2, r3
 80077c6:	11db      	asrs	r3, r3, #7
 80077c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 80077cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dd1d      	ble.n	8007810 <maxim_heart_rate_and_oxygen_saturation+0x958>
 80077d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077d8:	2b04      	cmp	r3, #4
 80077da:	dc19      	bgt.n	8007810 <maxim_heart_rate_and_oxygen_saturation+0x958>
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d015      	beq.n	8007810 <maxim_heart_rate_and_oxygen_saturation+0x958>
            {
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e8:	2264      	movs	r2, #100	; 0x64
 80077ea:	fb03 f202 	mul.w	r2, r3, r2
 80077ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f2:	fb92 f1f3 	sdiv	r1, r2, r3
 80077f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80077fe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 8007806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800780a:	3301      	adds	r3, #1
 800780c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8007810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007814:	3301      	adds	r3, #1
 8007816:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800781a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800781e:	3b01      	subs	r3, #1
 8007820:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007824:	429a      	cmp	r2, r3
 8007826:	f6ff aeaa 	blt.w	800757e <maxim_heart_rate_and_oxygen_saturation+0x6c6>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 800782a:	f107 0310 	add.w	r3, r7, #16
 800782e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f94f 	bl	8007ad6 <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8007838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800783c:	0fda      	lsrs	r2, r3, #31
 800783e:	4413      	add	r3, r2
 8007840:	105b      	asrs	r3, r3, #1
 8007842:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 8007846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800784a:	2b01      	cmp	r3, #1
 800784c:	dd17      	ble.n	800787e <maxim_heart_rate_and_oxygen_saturation+0x9c6>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 800784e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007852:	1e5a      	subs	r2, r3, #1
 8007854:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007858:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800785c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007860:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007864:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007868:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800786c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007870:	4413      	add	r3, r2
 8007872:	0fda      	lsrs	r2, r3, #31
 8007874:	4413      	add	r3, r2
 8007876:	105b      	asrs	r3, r3, #1
 8007878:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800787c:	e009      	b.n	8007892 <maxim_heart_rate_and_oxygen_saturation+0x9da>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 800787e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007882:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007886:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800788a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 8007892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007896:	2b02      	cmp	r3, #2
 8007898:	dd14      	ble.n	80078c4 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
 800789a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800789e:	2bb7      	cmp	r3, #183	; 0xb7
 80078a0:	dc10      	bgt.n	80078c4 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 80078a2:	4a10      	ldr	r2, [pc, #64]	; (80078e4 <maxim_heart_rate_and_oxygen_saturation+0xa2c>)
 80078a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a8:	4413      	add	r3, r2
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 80078b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80078b4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80078b8:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 80078ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80078be:	2201      	movs	r2, #1
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	e007      	b.n	80078d4 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 80078c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80078c8:	4a07      	ldr	r2, [pc, #28]	; (80078e8 <maxim_heart_rate_and_oxygen_saturation+0xa30>)
 80078ca:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0;
 80078cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80078d0:	2200      	movs	r2, #0
 80078d2:	701a      	strb	r2, [r3, #0]
    }
}
 80078d4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd90      	pop	{r4, r7, pc}
 80078dc:	20001ea8 	.word	0x20001ea8
 80078e0:	20002678 	.word	0x20002678
 80078e4:	0800be90 	.word	0x0800be90
 80078e8:	fffffc19 	.word	0xfffffc19

080078ec <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	68b9      	ldr	r1, [r7, #8]
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f812 	bl	800792e <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	68b9      	ldr	r1, [r7, #8]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f880 	bl	8007a16 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	429a      	cmp	r2, r3
 800791e:	bfa8      	it	ge
 8007920:	461a      	movge	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	601a      	str	r2, [r3, #0]
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 800792e:	b480      	push	{r7}
 8007930:	b087      	sub	sp, #28
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	607a      	str	r2, [r7, #4]
 800793a:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 800793c:	2301      	movs	r3, #1
 800793e:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]

    while (i < n_size-1){
 8007946:	e05a      	b.n	80079fe <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	4413      	add	r3, r2
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6a3a      	ldr	r2, [r7, #32]
 8007954:	429a      	cmp	r2, r3
 8007956:	da4f      	bge.n	80079f8 <maxim_peaks_above_min_height+0xca>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4413      	add	r3, r2
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007968:	3b01      	subs	r3, #1
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	440b      	add	r3, r1
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	dd40      	ble.n	80079f8 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 8007976:	2301      	movs	r3, #1
 8007978:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 800797a:	e002      	b.n	8007982 <maxim_peaks_above_min_height+0x54>
                n_width++;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	3301      	adds	r3, #1
 8007980:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	dd0d      	ble.n	80079aa <maxim_peaks_above_min_height+0x7c>
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4413      	add	r3, r2
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	6979      	ldr	r1, [r7, #20]
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	440b      	add	r3, r1
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	6879      	ldr	r1, [r7, #4]
 80079a2:	440b      	add	r3, r1
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d0e8      	beq.n	800797c <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	4413      	add	r3, r2
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	6979      	ldr	r1, [r7, #20]
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	440b      	add	r3, r1
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	440b      	add	r3, r1
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	dd13      	ble.n	80079ee <maxim_peaks_above_min_height+0xc0>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b0e      	cmp	r3, #14
 80079cc:	dc0f      	bgt.n	80079ee <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	1c59      	adds	r1, r3, #1
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	6011      	str	r1, [r2, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	3301      	adds	r3, #1
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4413      	add	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]
 80079ec:	e003      	b.n	80079f6 <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	4413      	add	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80079f6:	e002      	b.n	80079fe <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	3301      	adds	r3, #1
 80079fc:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	db9f      	blt.n	8007948 <maxim_peaks_above_min_height+0x1a>
    }
}
 8007a08:	bf00      	nop
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b088      	sub	sp, #32
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
 8007a22:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	68f9      	ldr	r1, [r7, #12]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f895 	bl	8007b5c <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8007a32:	f04f 33ff 	mov.w	r3, #4294967295
 8007a36:	61fb      	str	r3, [r7, #28]
 8007a38:	e03e      	b.n	8007ab8 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	e02c      	b.n	8007aaa <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d005      	beq.n	8007a6e <maxim_remove_close_peaks+0x58>
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	440b      	add	r3, r1
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	e001      	b.n	8007a72 <maxim_remove_close_peaks+0x5c>
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	dc04      	bgt.n	8007a88 <maxim_remove_close_peaks+0x72>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	425b      	negs	r3, r3
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	da0d      	bge.n	8007aa4 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	441a      	add	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1c58      	adds	r0, r3, #1
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	6008      	str	r0, [r1, #0]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	68f9      	ldr	r1, [r7, #12]
 8007a9e:	440b      	add	r3, r1
 8007aa0:	6812      	ldr	r2, [r2, #0]
 8007aa2:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	61bb      	str	r3, [r7, #24]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	dbce      	blt.n	8007a50 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	61fb      	str	r3, [r7, #28]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	dbbb      	blt.n	8007a3a <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 f804 	bl	8007ad6 <maxim_sort_ascend>
}
 8007ace:	bf00      	nop
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b087      	sub	sp, #28
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	e02f      	b.n	8007b46 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	613b      	str	r3, [r7, #16]
 8007af6:	e00f      	b.n	8007b18 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007afe:	3b01      	subs	r3, #1
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	441a      	add	r2, r3
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	440b      	add	r3, r1
 8007b0e:	6812      	ldr	r2, [r2, #0]
 8007b10:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dd0a      	ble.n	8007b34 <maxim_sort_ascend+0x5e>
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b24:	3b01      	subs	r3, #1
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	dbe1      	blt.n	8007af8 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	3301      	adds	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	dbcb      	blt.n	8007ae6 <maxim_sort_ascend+0x10>
    }
}
 8007b4e:	bf00      	nop
 8007b50:	bf00      	nop
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b089      	sub	sp, #36	; 0x24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8007b68:	2301      	movs	r3, #1
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	e037      	b.n	8007bde <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	4413      	add	r3, r2
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	61bb      	str	r3, [r7, #24]
 8007b7e:	e00f      	b.n	8007ba0 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b86:	3b01      	subs	r3, #1
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	441a      	add	r2, r3
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	440b      	add	r3, r1
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	3b01      	subs	r3, #1
 8007b9e:	61bb      	str	r3, [r7, #24]
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	dd12      	ble.n	8007bcc <maxim_sort_indices_descend+0x70>
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	4413      	add	r3, r2
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	440b      	add	r3, r1
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	440b      	add	r3, r1
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	dcd9      	bgt.n	8007b80 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	dbc3      	blt.n	8007b6e <maxim_sort_indices_descend+0x12>
    }
}
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	3724      	adds	r7, #36	; 0x24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <__NVIC_SetPriority>:
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	db0a      	blt.n	8007c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	490c      	ldr	r1, [pc, #48]	; (8007c40 <__NVIC_SetPriority+0x4c>)
 8007c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c12:	0112      	lsls	r2, r2, #4
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	440b      	add	r3, r1
 8007c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c1c:	e00a      	b.n	8007c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	4908      	ldr	r1, [pc, #32]	; (8007c44 <__NVIC_SetPriority+0x50>)
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	3b04      	subs	r3, #4
 8007c2c:	0112      	lsls	r2, r2, #4
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	440b      	add	r3, r1
 8007c32:	761a      	strb	r2, [r3, #24]
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	e000e100 	.word	0xe000e100
 8007c44:	e000ed00 	.word	0xe000ed00

08007c48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007c4c:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <SysTick_Handler+0x1c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007c50:	f001 ff60 	bl	8009b14 <xTaskGetSchedulerState>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d001      	beq.n	8007c5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007c5a:	f002 fe45 	bl	800a8e8 <xPortSysTickHandler>
  }
}
 8007c5e:	bf00      	nop
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	e000e010 	.word	0xe000e010

08007c68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f06f 0004 	mvn.w	r0, #4
 8007c72:	f7ff ffbf 	bl	8007bf4 <__NVIC_SetPriority>
#endif
}
 8007c76:	bf00      	nop
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c82:	f3ef 8305 	mrs	r3, IPSR
 8007c86:	603b      	str	r3, [r7, #0]
  return(result);
 8007c88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c8e:	f06f 0305 	mvn.w	r3, #5
 8007c92:	607b      	str	r3, [r7, #4]
 8007c94:	e00c      	b.n	8007cb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c96:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <osKernelInitialize+0x44>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <osKernelInitialize+0x44>)
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	607b      	str	r3, [r7, #4]
 8007ca8:	e002      	b.n	8007cb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007caa:	f04f 33ff 	mov.w	r3, #4294967295
 8007cae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cb0:	687b      	ldr	r3, [r7, #4]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	20002e48 	.word	0x20002e48

08007cc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cca:	f3ef 8305 	mrs	r3, IPSR
 8007cce:	603b      	str	r3, [r7, #0]
  return(result);
 8007cd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <osKernelStart+0x1a>
    stat = osErrorISR;
 8007cd6:	f06f 0305 	mvn.w	r3, #5
 8007cda:	607b      	str	r3, [r7, #4]
 8007cdc:	e010      	b.n	8007d00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cde:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <osKernelStart+0x48>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d109      	bne.n	8007cfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007ce6:	f7ff ffbf 	bl	8007c68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007cea:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <osKernelStart+0x48>)
 8007cec:	2202      	movs	r2, #2
 8007cee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007cf0:	f001 faac 	bl	800924c <vTaskStartScheduler>
      stat = osOK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	607b      	str	r3, [r7, #4]
 8007cf8:	e002      	b.n	8007d00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d00:	687b      	ldr	r3, [r7, #4]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20002e48 	.word	0x20002e48

08007d10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08e      	sub	sp, #56	; 0x38
 8007d14:	af04      	add	r7, sp, #16
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d20:	f3ef 8305 	mrs	r3, IPSR
 8007d24:	617b      	str	r3, [r7, #20]
  return(result);
 8007d26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d17f      	bne.n	8007e2c <osThreadNew+0x11c>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d07c      	beq.n	8007e2c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8007d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d36:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d38:	2318      	movs	r3, #24
 8007d3a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d045      	beq.n	8007dd8 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <osThreadNew+0x4a>
        name = attr->name;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <osThreadNew+0x70>
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	2b38      	cmp	r3, #56	; 0x38
 8007d72:	d805      	bhi.n	8007d80 <osThreadNew+0x70>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <osThreadNew+0x74>
        return (NULL);
 8007d80:	2300      	movs	r3, #0
 8007d82:	e054      	b.n	8007e2e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	089b      	lsrs	r3, r3, #2
 8007d92:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00e      	beq.n	8007dba <osThreadNew+0xaa>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	2ba7      	cmp	r3, #167	; 0xa7
 8007da2:	d90a      	bls.n	8007dba <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d006      	beq.n	8007dba <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <osThreadNew+0xaa>
        mem = 1;
 8007db4:	2301      	movs	r3, #1
 8007db6:	61bb      	str	r3, [r7, #24]
 8007db8:	e010      	b.n	8007ddc <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10c      	bne.n	8007ddc <osThreadNew+0xcc>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d108      	bne.n	8007ddc <osThreadNew+0xcc>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <osThreadNew+0xcc>
          mem = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	e001      	b.n	8007ddc <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d110      	bne.n	8007e04 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007dea:	9202      	str	r2, [sp, #8]
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	6a3a      	ldr	r2, [r7, #32]
 8007df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f001 f83b 	bl	8008e74 <xTaskCreateStatic>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	e013      	b.n	8007e2c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d110      	bne.n	8007e2c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f107 0310 	add.w	r3, r7, #16
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f001 f886 	bl	8008f2e <xTaskCreate>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d001      	beq.n	8007e2c <osThreadNew+0x11c>
            hTask = NULL;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e2c:	693b      	ldr	r3, [r7, #16]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3728      	adds	r7, #40	; 0x28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e3e:	f3ef 8305 	mrs	r3, IPSR
 8007e42:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <osDelay+0x1c>
    stat = osErrorISR;
 8007e4a:	f06f 0305 	mvn.w	r3, #5
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e007      	b.n	8007e62 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 f9c1 	bl	80091e4 <vTaskDelay>
    }
  }

  return (stat);
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e78:	f3ef 8305 	mrs	r3, IPSR
 8007e7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e7e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d174      	bne.n	8007f6e <osMutexNew+0x102>
    if (attr != NULL) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	61bb      	str	r3, [r7, #24]
 8007e90:	e001      	b.n	8007e96 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <osMutexNew+0x3a>
      rmtx = 1U;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e001      	b.n	8007eaa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	f003 0308 	and.w	r3, r3, #8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d15c      	bne.n	8007f6e <osMutexNew+0x102>
      mem = -1;
 8007eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d015      	beq.n	8007eec <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d006      	beq.n	8007ed6 <osMutexNew+0x6a>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	2b4f      	cmp	r3, #79	; 0x4f
 8007ece:	d902      	bls.n	8007ed6 <osMutexNew+0x6a>
          mem = 1;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	e00c      	b.n	8007ef0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d108      	bne.n	8007ef0 <osMutexNew+0x84>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d104      	bne.n	8007ef0 <osMutexNew+0x84>
            mem = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	613b      	str	r3, [r7, #16]
 8007eea:	e001      	b.n	8007ef0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d112      	bne.n	8007f1c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d007      	beq.n	8007f0c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	4619      	mov	r1, r3
 8007f02:	2004      	movs	r0, #4
 8007f04:	f000 fa8f 	bl	8008426 <xQueueCreateMutexStatic>
 8007f08:	61f8      	str	r0, [r7, #28]
 8007f0a:	e016      	b.n	8007f3a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	4619      	mov	r1, r3
 8007f12:	2001      	movs	r0, #1
 8007f14:	f000 fa87 	bl	8008426 <xQueueCreateMutexStatic>
 8007f18:	61f8      	str	r0, [r7, #28]
 8007f1a:	e00e      	b.n	8007f3a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10b      	bne.n	8007f3a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007f28:	2004      	movs	r0, #4
 8007f2a:	f000 fa64 	bl	80083f6 <xQueueCreateMutex>
 8007f2e:	61f8      	str	r0, [r7, #28]
 8007f30:	e003      	b.n	8007f3a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007f32:	2001      	movs	r0, #1
 8007f34:	f000 fa5f 	bl	80083f6 <xQueueCreateMutex>
 8007f38:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00c      	beq.n	8007f5a <osMutexNew+0xee>
        if (attr != NULL) {
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <osMutexNew+0xe2>
          name = attr->name;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	e001      	b.n	8007f52 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	69f8      	ldr	r0, [r7, #28]
 8007f56:	f000 ff2f 	bl	8008db8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d006      	beq.n	8007f6e <osMutexNew+0x102>
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f043 0301 	orr.w	r3, r3, #1
 8007f6c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007f6e:	69fb      	ldr	r3, [r7, #28]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3720      	adds	r7, #32
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4a07      	ldr	r2, [pc, #28]	; (8007fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	4a06      	ldr	r2, [pc, #24]	; (8007fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8007f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f96:	601a      	str	r2, [r3, #0]
}
 8007f98:	bf00      	nop
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	20002e4c 	.word	0x20002e4c
 8007fa8:	20002ef4 	.word	0x20002ef4

08007fac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a07      	ldr	r2, [pc, #28]	; (8007fd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	4a06      	ldr	r2, [pc, #24]	; (8007fdc <vApplicationGetTimerTaskMemory+0x30>)
 8007fc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f240 4204 	movw	r2, #1028	; 0x404
 8007fca:	601a      	str	r2, [r3, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	200032f4 	.word	0x200032f4
 8007fdc:	2000339c 	.word	0x2000339c

08007fe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f103 0208 	add.w	r2, r3, #8
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f103 0208 	add.w	r2, r3, #8
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f103 0208 	add.w	r2, r3, #8
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689a      	ldr	r2, [r3, #8]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	601a      	str	r2, [r3, #0]
}
 8008076:	bf00      	nop
 8008078:	3714      	adds	r7, #20
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d103      	bne.n	80080a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e00c      	b.n	80080bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3308      	adds	r3, #8
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	e002      	b.n	80080b0 <vListInsert+0x2e>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d2f6      	bcs.n	80080aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	601a      	str	r2, [r3, #0]
}
 80080e8:	bf00      	nop
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6892      	ldr	r2, [r2, #8]
 800810a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6852      	ldr	r2, [r2, #4]
 8008114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	429a      	cmp	r2, r3
 800811e:	d103      	bne.n	8008128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	1e5a      	subs	r2, r3, #1
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008172:	f002 fb27 	bl	800a7c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008182:	fb01 f303 	mul.w	r3, r1, r3
 8008186:	441a      	add	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a2:	3b01      	subs	r3, #1
 80081a4:	68f9      	ldr	r1, [r7, #12]
 80081a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081a8:	fb01 f303 	mul.w	r3, r1, r3
 80081ac:	441a      	add	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	22ff      	movs	r2, #255	; 0xff
 80081b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	22ff      	movs	r2, #255	; 0xff
 80081be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d114      	bne.n	80081f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d01a      	beq.n	8008206 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3310      	adds	r3, #16
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 fadb 	bl	8009790 <xTaskRemoveFromEventList>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d012      	beq.n	8008206 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081e0:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <xQueueGenericReset+0xcc>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	e009      	b.n	8008206 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3310      	adds	r3, #16
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff fef2 	bl	8007fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3324      	adds	r3, #36	; 0x24
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff feed 	bl	8007fe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008206:	f002 fb0d 	bl	800a824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800820a:	2301      	movs	r3, #1
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	e000ed04 	.word	0xe000ed04

08008218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08e      	sub	sp, #56	; 0x38
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <xQueueGenericCreateStatic+0x52>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <xQueueGenericCreateStatic+0x56>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <xQueueGenericCreateStatic+0x58>
 800826e:	2300      	movs	r3, #0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	623b      	str	r3, [r7, #32]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d102      	bne.n	8008296 <xQueueGenericCreateStatic+0x7e>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <xQueueGenericCreateStatic+0x82>
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <xQueueGenericCreateStatic+0x84>
 800829a:	2300      	movs	r3, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10a      	bne.n	80082b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a4:	f383 8811 	msr	BASEPRI, r3
 80082a8:	f3bf 8f6f 	isb	sy
 80082ac:	f3bf 8f4f 	dsb	sy
 80082b0:	61fb      	str	r3, [r7, #28]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082b6:	2350      	movs	r3, #80	; 0x50
 80082b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2b50      	cmp	r3, #80	; 0x50
 80082be:	d00a      	beq.n	80082d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	61bb      	str	r3, [r7, #24]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00d      	beq.n	80082fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	4613      	mov	r3, r2
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f83f 	bl	800837c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008300:	4618      	mov	r0, r3
 8008302:	3730      	adds	r7, #48	; 0x30
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af02      	add	r7, sp, #8
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <xQueueGenericCreate+0x2a>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	613b      	str	r3, [r7, #16]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	fb02 f303 	mul.w	r3, r2, r3
 800833a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	3350      	adds	r3, #80	; 0x50
 8008340:	4618      	mov	r0, r3
 8008342:	f002 fb61 	bl	800aa08 <pvPortMalloc>
 8008346:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d011      	beq.n	8008372 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	3350      	adds	r3, #80	; 0x50
 8008356:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008360:	79fa      	ldrb	r2, [r7, #7]
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	4613      	mov	r3, r2
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f805 	bl	800837c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008372:	69bb      	ldr	r3, [r7, #24]
	}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d103      	bne.n	8008398 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	e002      	b.n	800839e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083aa:	2101      	movs	r1, #1
 80083ac:	69b8      	ldr	r0, [r7, #24]
 80083ae:	f7ff fecb 	bl	8008148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	78fa      	ldrb	r2, [r7, #3]
 80083b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083ba:	bf00      	nop
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00e      	beq.n	80083ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80083e2:	2300      	movs	r3, #0
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f837 	bl	800845c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	4603      	mov	r3, r0
 80083fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008400:	2301      	movs	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	2300      	movs	r3, #0
 8008406:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	461a      	mov	r2, r3
 800840c:	6939      	ldr	r1, [r7, #16]
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f7ff ff7a 	bl	8008308 <xQueueGenericCreate>
 8008414:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f7ff ffd3 	bl	80083c2 <prvInitialiseMutex>

		return xNewQueue;
 800841c:	68fb      	ldr	r3, [r7, #12]
	}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008426:	b580      	push	{r7, lr}
 8008428:	b088      	sub	sp, #32
 800842a:	af02      	add	r7, sp, #8
 800842c:	4603      	mov	r3, r0
 800842e:	6039      	str	r1, [r7, #0]
 8008430:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008432:	2301      	movs	r3, #1
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	2300      	movs	r3, #0
 8008438:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2200      	movs	r2, #0
 8008442:	6939      	ldr	r1, [r7, #16]
 8008444:	6978      	ldr	r0, [r7, #20]
 8008446:	f7ff fee7 	bl	8008218 <xQueueGenericCreateStatic>
 800844a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7ff ffb8 	bl	80083c2 <prvInitialiseMutex>

		return xNewQueue;
 8008452:	68fb      	ldr	r3, [r7, #12]
	}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08e      	sub	sp, #56	; 0x38
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
 8008468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800846a:	2300      	movs	r3, #0
 800846c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <xQueueGenericSend+0x32>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <xQueueGenericSend+0x40>
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <xQueueGenericSend+0x44>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <xQueueGenericSend+0x46>
 80084a0:	2300      	movs	r3, #0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <xQueueGenericSend+0x60>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d103      	bne.n	80084ca <xQueueGenericSend+0x6e>
 80084c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d101      	bne.n	80084ce <xQueueGenericSend+0x72>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <xQueueGenericSend+0x74>
 80084ce:	2300      	movs	r3, #0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <xQueueGenericSend+0x8e>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	623b      	str	r3, [r7, #32]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084ea:	f001 fb13 	bl	8009b14 <xTaskGetSchedulerState>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d102      	bne.n	80084fa <xQueueGenericSend+0x9e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <xQueueGenericSend+0xa2>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e000      	b.n	8008500 <xQueueGenericSend+0xa4>
 80084fe:	2300      	movs	r3, #0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <xQueueGenericSend+0xbe>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	61fb      	str	r3, [r7, #28]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800851a:	f002 f953 	bl	800a7c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008526:	429a      	cmp	r2, r3
 8008528:	d302      	bcc.n	8008530 <xQueueGenericSend+0xd4>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b02      	cmp	r3, #2
 800852e:	d129      	bne.n	8008584 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	68b9      	ldr	r1, [r7, #8]
 8008534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008536:	f000 fb2f 	bl	8008b98 <prvCopyDataToQueue>
 800853a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800853c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	d010      	beq.n	8008566 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	3324      	adds	r3, #36	; 0x24
 8008548:	4618      	mov	r0, r3
 800854a:	f001 f921 	bl	8009790 <xTaskRemoveFromEventList>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d013      	beq.n	800857c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008554:	4b3f      	ldr	r3, [pc, #252]	; (8008654 <xQueueGenericSend+0x1f8>)
 8008556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	e00a      	b.n	800857c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d007      	beq.n	800857c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800856c:	4b39      	ldr	r3, [pc, #228]	; (8008654 <xQueueGenericSend+0x1f8>)
 800856e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800857c:	f002 f952 	bl	800a824 <vPortExitCritical>
				return pdPASS;
 8008580:	2301      	movs	r3, #1
 8008582:	e063      	b.n	800864c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800858a:	f002 f94b 	bl	800a824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800858e:	2300      	movs	r3, #0
 8008590:	e05c      	b.n	800864c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008594:	2b00      	cmp	r3, #0
 8008596:	d106      	bne.n	80085a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008598:	f107 0314 	add.w	r3, r7, #20
 800859c:	4618      	mov	r0, r3
 800859e:	f001 f95b 	bl	8009858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085a2:	2301      	movs	r3, #1
 80085a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085a6:	f002 f93d 	bl	800a824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085aa:	f000 febf 	bl	800932c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085ae:	f002 f909 	bl	800a7c4 <vPortEnterCritical>
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085b8:	b25b      	sxtb	r3, r3
 80085ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085be:	d103      	bne.n	80085c8 <xQueueGenericSend+0x16c>
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ce:	b25b      	sxtb	r3, r3
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d103      	bne.n	80085de <xQueueGenericSend+0x182>
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085de:	f002 f921 	bl	800a824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085e2:	1d3a      	adds	r2, r7, #4
 80085e4:	f107 0314 	add.w	r3, r7, #20
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f94a 	bl	8009884 <xTaskCheckForTimeOut>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d124      	bne.n	8008640 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085f8:	f000 fbc6 	bl	8008d88 <prvIsQueueFull>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d018      	beq.n	8008634 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	3310      	adds	r3, #16
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4611      	mov	r1, r2
 800860a:	4618      	mov	r0, r3
 800860c:	f001 f870 	bl	80096f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008612:	f000 fb51 	bl	8008cb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008616:	f000 fe97 	bl	8009348 <xTaskResumeAll>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	f47f af7c 	bne.w	800851a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008622:	4b0c      	ldr	r3, [pc, #48]	; (8008654 <xQueueGenericSend+0x1f8>)
 8008624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	e772      	b.n	800851a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008636:	f000 fb3f 	bl	8008cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800863a:	f000 fe85 	bl	8009348 <xTaskResumeAll>
 800863e:	e76c      	b.n	800851a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008642:	f000 fb39 	bl	8008cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008646:	f000 fe7f 	bl	8009348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800864a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800864c:	4618      	mov	r0, r3
 800864e:	3738      	adds	r7, #56	; 0x38
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	e000ed04 	.word	0xe000ed04

08008658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b090      	sub	sp, #64	; 0x40
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	2b00      	cmp	r3, #0
 800866e:	d10a      	bne.n	8008686 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008682:	bf00      	nop
 8008684:	e7fe      	b.n	8008684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d103      	bne.n	8008694 <xQueueGenericSendFromISR+0x3c>
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <xQueueGenericSendFromISR+0x40>
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <xQueueGenericSendFromISR+0x42>
 8008698:	2300      	movs	r3, #0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10a      	bne.n	80086b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d103      	bne.n	80086c2 <xQueueGenericSendFromISR+0x6a>
 80086ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <xQueueGenericSendFromISR+0x6e>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e000      	b.n	80086c8 <xQueueGenericSendFromISR+0x70>
 80086c6:	2300      	movs	r3, #0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	623b      	str	r3, [r7, #32]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086e2:	f002 f951 	bl	800a988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086e6:	f3ef 8211 	mrs	r2, BASEPRI
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	61fa      	str	r2, [r7, #28]
 80086fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008700:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870a:	429a      	cmp	r2, r3
 800870c:	d302      	bcc.n	8008714 <xQueueGenericSendFromISR+0xbc>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d12f      	bne.n	8008774 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800871a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800872a:	f000 fa35 	bl	8008b98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800872e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d112      	bne.n	800875e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d016      	beq.n	800876e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	3324      	adds	r3, #36	; 0x24
 8008744:	4618      	mov	r0, r3
 8008746:	f001 f823 	bl	8009790 <xTaskRemoveFromEventList>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00e      	beq.n	800876e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	e007      	b.n	800876e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800875e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008762:	3301      	adds	r3, #1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	b25a      	sxtb	r2, r3
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800876e:	2301      	movs	r3, #1
 8008770:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008772:	e001      	b.n	8008778 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008774:	2300      	movs	r3, #0
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008782:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008786:	4618      	mov	r0, r3
 8008788:	3740      	adds	r7, #64	; 0x40
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08c      	sub	sp, #48	; 0x30
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800879c:	2300      	movs	r3, #0
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <xQueueReceive+0x30>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	623b      	str	r3, [r7, #32]
}
 80087bc:	bf00      	nop
 80087be:	e7fe      	b.n	80087be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d103      	bne.n	80087ce <xQueueReceive+0x3e>
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <xQueueReceive+0x42>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <xQueueReceive+0x44>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <xQueueReceive+0x5e>
	__asm volatile
 80087d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087dc:	f383 8811 	msr	BASEPRI, r3
 80087e0:	f3bf 8f6f 	isb	sy
 80087e4:	f3bf 8f4f 	dsb	sy
 80087e8:	61fb      	str	r3, [r7, #28]
}
 80087ea:	bf00      	nop
 80087ec:	e7fe      	b.n	80087ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ee:	f001 f991 	bl	8009b14 <xTaskGetSchedulerState>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d102      	bne.n	80087fe <xQueueReceive+0x6e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <xQueueReceive+0x72>
 80087fe:	2301      	movs	r3, #1
 8008800:	e000      	b.n	8008804 <xQueueReceive+0x74>
 8008802:	2300      	movs	r3, #0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10a      	bne.n	800881e <xQueueReceive+0x8e>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	f383 8811 	msr	BASEPRI, r3
 8008810:	f3bf 8f6f 	isb	sy
 8008814:	f3bf 8f4f 	dsb	sy
 8008818:	61bb      	str	r3, [r7, #24]
}
 800881a:	bf00      	nop
 800881c:	e7fe      	b.n	800881c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800881e:	f001 ffd1 	bl	800a7c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01f      	beq.n	800886e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008832:	f000 fa1b 	bl	8008c6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	1e5a      	subs	r2, r3, #1
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00f      	beq.n	8008866 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008848:	3310      	adds	r3, #16
 800884a:	4618      	mov	r0, r3
 800884c:	f000 ffa0 	bl	8009790 <xTaskRemoveFromEventList>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008856:	4b3d      	ldr	r3, [pc, #244]	; (800894c <xQueueReceive+0x1bc>)
 8008858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008866:	f001 ffdd 	bl	800a824 <vPortExitCritical>
				return pdPASS;
 800886a:	2301      	movs	r3, #1
 800886c:	e069      	b.n	8008942 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d103      	bne.n	800887c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008874:	f001 ffd6 	bl	800a824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008878:	2300      	movs	r3, #0
 800887a:	e062      	b.n	8008942 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008882:	f107 0310 	add.w	r3, r7, #16
 8008886:	4618      	mov	r0, r3
 8008888:	f000 ffe6 	bl	8009858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800888c:	2301      	movs	r3, #1
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008890:	f001 ffc8 	bl	800a824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008894:	f000 fd4a 	bl	800932c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008898:	f001 ff94 	bl	800a7c4 <vPortEnterCritical>
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088a2:	b25b      	sxtb	r3, r3
 80088a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a8:	d103      	bne.n	80088b2 <xQueueReceive+0x122>
 80088aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088b8:	b25b      	sxtb	r3, r3
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d103      	bne.n	80088c8 <xQueueReceive+0x138>
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088c8:	f001 ffac 	bl	800a824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088cc:	1d3a      	adds	r2, r7, #4
 80088ce:	f107 0310 	add.w	r3, r7, #16
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 ffd5 	bl	8009884 <xTaskCheckForTimeOut>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d123      	bne.n	8008928 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088e2:	f000 fa3b 	bl	8008d5c <prvIsQueueEmpty>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d017      	beq.n	800891c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	3324      	adds	r3, #36	; 0x24
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	4611      	mov	r1, r2
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fefb 	bl	80096f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088fc:	f000 f9dc 	bl	8008cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008900:	f000 fd22 	bl	8009348 <xTaskResumeAll>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d189      	bne.n	800881e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800890a:	4b10      	ldr	r3, [pc, #64]	; (800894c <xQueueReceive+0x1bc>)
 800890c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	e780      	b.n	800881e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800891c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800891e:	f000 f9cb 	bl	8008cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008922:	f000 fd11 	bl	8009348 <xTaskResumeAll>
 8008926:	e77a      	b.n	800881e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800892a:	f000 f9c5 	bl	8008cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800892e:	f000 fd0b 	bl	8009348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008934:	f000 fa12 	bl	8008d5c <prvIsQueueEmpty>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	f43f af6f 	beq.w	800881e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008940:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008942:	4618      	mov	r0, r3
 8008944:	3730      	adds	r7, #48	; 0x30
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	e000ed04 	.word	0xe000ed04

08008950 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08e      	sub	sp, #56	; 0x38
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800895a:	2300      	movs	r3, #0
 800895c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008962:	2300      	movs	r3, #0
 8008964:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	623b      	str	r3, [r7, #32]
}
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	61fb      	str	r3, [r7, #28]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089a0:	f001 f8b8 	bl	8009b14 <xTaskGetSchedulerState>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d102      	bne.n	80089b0 <xQueueSemaphoreTake+0x60>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <xQueueSemaphoreTake+0x64>
 80089b0:	2301      	movs	r3, #1
 80089b2:	e000      	b.n	80089b6 <xQueueSemaphoreTake+0x66>
 80089b4:	2300      	movs	r3, #0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10a      	bne.n	80089d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	61bb      	str	r3, [r7, #24]
}
 80089cc:	bf00      	nop
 80089ce:	e7fe      	b.n	80089ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089d0:	f001 fef8 	bl	800a7c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d024      	beq.n	8008a2a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	1e5a      	subs	r2, r3, #1
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d104      	bne.n	80089fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089f0:	f001 fa06 	bl	8009e00 <pvTaskIncrementMutexHeldCount>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00f      	beq.n	8008a22 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a04:	3310      	adds	r3, #16
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fec2 	bl	8009790 <xTaskRemoveFromEventList>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d007      	beq.n	8008a22 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a12:	4b54      	ldr	r3, [pc, #336]	; (8008b64 <xQueueSemaphoreTake+0x214>)
 8008a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a22:	f001 feff 	bl	800a824 <vPortExitCritical>
				return pdPASS;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e097      	b.n	8008b5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d111      	bne.n	8008a54 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	617b      	str	r3, [r7, #20]
}
 8008a48:	bf00      	nop
 8008a4a:	e7fe      	b.n	8008a4a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008a4c:	f001 feea 	bl	800a824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a50:	2300      	movs	r3, #0
 8008a52:	e082      	b.n	8008b5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d106      	bne.n	8008a68 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a5a:	f107 030c 	add.w	r3, r7, #12
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fefa 	bl	8009858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a64:	2301      	movs	r3, #1
 8008a66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a68:	f001 fedc 	bl	800a824 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a6c:	f000 fc5e 	bl	800932c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a70:	f001 fea8 	bl	800a7c4 <vPortEnterCritical>
 8008a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a7a:	b25b      	sxtb	r3, r3
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d103      	bne.n	8008a8a <xQueueSemaphoreTake+0x13a>
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a96:	d103      	bne.n	8008aa0 <xQueueSemaphoreTake+0x150>
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aa0:	f001 fec0 	bl	800a824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aa4:	463a      	mov	r2, r7
 8008aa6:	f107 030c 	add.w	r3, r7, #12
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f000 fee9 	bl	8009884 <xTaskCheckForTimeOut>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d132      	bne.n	8008b1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aba:	f000 f94f 	bl	8008d5c <prvIsQueueEmpty>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d026      	beq.n	8008b12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d109      	bne.n	8008ae0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008acc:	f001 fe7a 	bl	800a7c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f001 f83b 	bl	8009b50 <xTaskPriorityInherit>
 8008ada:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008adc:	f001 fea2 	bl	800a824 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	3324      	adds	r3, #36	; 0x24
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fe01 	bl	80096f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008af0:	f000 f8e2 	bl	8008cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008af4:	f000 fc28 	bl	8009348 <xTaskResumeAll>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f47f af68 	bne.w	80089d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008b00:	4b18      	ldr	r3, [pc, #96]	; (8008b64 <xQueueSemaphoreTake+0x214>)
 8008b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	e75e      	b.n	80089d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b14:	f000 f8d0 	bl	8008cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b18:	f000 fc16 	bl	8009348 <xTaskResumeAll>
 8008b1c:	e758      	b.n	80089d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b20:	f000 f8ca 	bl	8008cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b24:	f000 fc10 	bl	8009348 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b2a:	f000 f917 	bl	8008d5c <prvIsQueueEmpty>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f43f af4d 	beq.w	80089d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00d      	beq.n	8008b58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008b3c:	f001 fe42 	bl	800a7c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b42:	f000 f811 	bl	8008b68 <prvGetDisinheritPriorityAfterTimeout>
 8008b46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 f8d4 	bl	8009cfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008b54:	f001 fe66 	bl	800a824 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3738      	adds	r7, #56	; 0x38
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	e000ed04 	.word	0xe000ed04

08008b68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d006      	beq.n	8008b86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	e001      	b.n	8008b8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b86:	2300      	movs	r3, #0
 8008b88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
	}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10d      	bne.n	8008bd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d14d      	bne.n	8008c5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f001 f82c 	bl	8009c20 <xTaskPriorityDisinherit>
 8008bc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	609a      	str	r2, [r3, #8]
 8008bd0:	e043      	b.n	8008c5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d119      	bne.n	8008c0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6858      	ldr	r0, [r3, #4]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	461a      	mov	r2, r3
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	f002 f8f8 	bl	800add8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf0:	441a      	add	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d32b      	bcc.n	8008c5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	e026      	b.n	8008c5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	68d8      	ldr	r0, [r3, #12]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c14:	461a      	mov	r2, r3
 8008c16:	68b9      	ldr	r1, [r7, #8]
 8008c18:	f002 f8de 	bl	800add8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	425b      	negs	r3, r3
 8008c26:	441a      	add	r2, r3
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	68da      	ldr	r2, [r3, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d207      	bcs.n	8008c48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c40:	425b      	negs	r3, r3
 8008c42:	441a      	add	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d105      	bne.n	8008c5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c62:	697b      	ldr	r3, [r7, #20]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d018      	beq.n	8008cb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	441a      	add	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d303      	bcc.n	8008ca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68d9      	ldr	r1, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6838      	ldr	r0, [r7, #0]
 8008cac:	f002 f894 	bl	800add8 <memcpy>
	}
}
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cc0:	f001 fd80 	bl	800a7c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ccc:	e011      	b.n	8008cf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d012      	beq.n	8008cfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3324      	adds	r3, #36	; 0x24
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fd58 	bl	8009790 <xTaskRemoveFromEventList>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ce6:	f000 fe2f 	bl	8009948 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	dce9      	bgt.n	8008cce <prvUnlockQueue+0x16>
 8008cfa:	e000      	b.n	8008cfe <prvUnlockQueue+0x46>
					break;
 8008cfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	22ff      	movs	r2, #255	; 0xff
 8008d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d06:	f001 fd8d 	bl	800a824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d0a:	f001 fd5b 	bl	800a7c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d16:	e011      	b.n	8008d3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d012      	beq.n	8008d46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3310      	adds	r3, #16
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fd33 	bl	8009790 <xTaskRemoveFromEventList>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d30:	f000 fe0a 	bl	8009948 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dce9      	bgt.n	8008d18 <prvUnlockQueue+0x60>
 8008d44:	e000      	b.n	8008d48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	22ff      	movs	r2, #255	; 0xff
 8008d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d50:	f001 fd68 	bl	800a824 <vPortExitCritical>
}
 8008d54:	bf00      	nop
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d64:	f001 fd2e 	bl	800a7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d70:	2301      	movs	r3, #1
 8008d72:	60fb      	str	r3, [r7, #12]
 8008d74:	e001      	b.n	8008d7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d7a:	f001 fd53 	bl	800a824 <vPortExitCritical>

	return xReturn;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d90:	f001 fd18 	bl	800a7c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d102      	bne.n	8008da6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008da0:	2301      	movs	r3, #1
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e001      	b.n	8008daa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008daa:	f001 fd3b 	bl	800a824 <vPortExitCritical>

	return xReturn;
 8008dae:	68fb      	ldr	r3, [r7, #12]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	e014      	b.n	8008df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dc8:	4a0f      	ldr	r2, [pc, #60]	; (8008e08 <vQueueAddToRegistry+0x50>)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10b      	bne.n	8008dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dd4:	490c      	ldr	r1, [pc, #48]	; (8008e08 <vQueueAddToRegistry+0x50>)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dde:	4a0a      	ldr	r2, [pc, #40]	; (8008e08 <vQueueAddToRegistry+0x50>)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4413      	add	r3, r2
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008dea:	e006      	b.n	8008dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3301      	adds	r3, #1
 8008df0:	60fb      	str	r3, [r7, #12]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2b07      	cmp	r3, #7
 8008df6:	d9e7      	bls.n	8008dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	200043ac 	.word	0x200043ac

08008e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e1c:	f001 fcd2 	bl	800a7c4 <vPortEnterCritical>
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e26:	b25b      	sxtb	r3, r3
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d103      	bne.n	8008e36 <vQueueWaitForMessageRestricted+0x2a>
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e42:	d103      	bne.n	8008e4c <vQueueWaitForMessageRestricted+0x40>
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e4c:	f001 fcea 	bl	800a824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d106      	bne.n	8008e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	3324      	adds	r3, #36	; 0x24
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	68b9      	ldr	r1, [r7, #8]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fc69 	bl	8009738 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e66:	6978      	ldr	r0, [r7, #20]
 8008e68:	f7ff ff26 	bl	8008cb8 <prvUnlockQueue>
	}
 8008e6c:	bf00      	nop
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08e      	sub	sp, #56	; 0x38
 8008e78:	af04      	add	r7, sp, #16
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	623b      	str	r3, [r7, #32]
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d10a      	bne.n	8008eba <xTaskCreateStatic+0x46>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	61fb      	str	r3, [r7, #28]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008eba:	23a8      	movs	r3, #168	; 0xa8
 8008ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2ba8      	cmp	r3, #168	; 0xa8
 8008ec2:	d00a      	beq.n	8008eda <xTaskCreateStatic+0x66>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	61bb      	str	r3, [r7, #24]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008eda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d01e      	beq.n	8008f20 <xTaskCreateStatic+0xac>
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d01b      	beq.n	8008f20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008efa:	2300      	movs	r3, #0
 8008efc:	9303      	str	r3, [sp, #12]
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	9302      	str	r3, [sp, #8]
 8008f02:	f107 0314 	add.w	r3, r7, #20
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 f850 	bl	8008fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f1a:	f000 f8f3 	bl	8009104 <prvAddNewTaskToReadyList>
 8008f1e:	e001      	b.n	8008f24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008f20:	2300      	movs	r3, #0
 8008f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f24:	697b      	ldr	r3, [r7, #20]
	}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3728      	adds	r7, #40	; 0x28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b08c      	sub	sp, #48	; 0x30
 8008f32:	af04      	add	r7, sp, #16
 8008f34:	60f8      	str	r0, [r7, #12]
 8008f36:	60b9      	str	r1, [r7, #8]
 8008f38:	603b      	str	r3, [r7, #0]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f001 fd60 	bl	800aa08 <pvPortMalloc>
 8008f48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00e      	beq.n	8008f6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f50:	20a8      	movs	r0, #168	; 0xa8
 8008f52:	f001 fd59 	bl	800aa08 <pvPortMalloc>
 8008f56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	631a      	str	r2, [r3, #48]	; 0x30
 8008f64:	e005      	b.n	8008f72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f66:	6978      	ldr	r0, [r7, #20]
 8008f68:	f001 fd94 	bl	800aa94 <vPortFree>
 8008f6c:	e001      	b.n	8008f72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d017      	beq.n	8008fa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f80:	88fa      	ldrh	r2, [r7, #6]
 8008f82:	2300      	movs	r3, #0
 8008f84:	9303      	str	r3, [sp, #12]
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	9302      	str	r3, [sp, #8]
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f80e 	bl	8008fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f9c:	69f8      	ldr	r0, [r7, #28]
 8008f9e:	f000 f8b1 	bl	8009104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	61bb      	str	r3, [r7, #24]
 8008fa6:	e002      	b.n	8008fae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fae:	69bb      	ldr	r3, [r7, #24]
	}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3720      	adds	r7, #32
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	461a      	mov	r2, r3
 8008fd0:	21a5      	movs	r1, #165	; 0xa5
 8008fd2:	f001 fe67 	bl	800aca4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	f023 0307 	bic.w	r3, r3, #7
 8008fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	617b      	str	r3, [r7, #20]
}
 800900c:	bf00      	nop
 800900e:	e7fe      	b.n	800900e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d01f      	beq.n	8009056 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009016:	2300      	movs	r3, #0
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	e012      	b.n	8009042 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	4413      	add	r3, r2
 8009022:	7819      	ldrb	r1, [r3, #0]
 8009024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	3334      	adds	r3, #52	; 0x34
 800902c:	460a      	mov	r2, r1
 800902e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	4413      	add	r3, r2
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d006      	beq.n	800904a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	3301      	adds	r3, #1
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	2b0f      	cmp	r3, #15
 8009046:	d9e9      	bls.n	800901c <prvInitialiseNewTask+0x64>
 8009048:	e000      	b.n	800904c <prvInitialiseNewTask+0x94>
			{
				break;
 800904a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009054:	e003      	b.n	800905e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	2b37      	cmp	r3, #55	; 0x37
 8009062:	d901      	bls.n	8009068 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009064:	2337      	movs	r3, #55	; 0x37
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800906c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	2200      	movs	r2, #0
 8009078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe ffce 	bl	8008020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	3318      	adds	r3, #24
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe ffc9 	bl	8008020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	3354      	adds	r3, #84	; 0x54
 80090b8:	224c      	movs	r2, #76	; 0x4c
 80090ba:	2100      	movs	r1, #0
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 fdf1 	bl	800aca4 <memset>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	4a0c      	ldr	r2, [pc, #48]	; (80090f8 <prvInitialiseNewTask+0x140>)
 80090c6:	659a      	str	r2, [r3, #88]	; 0x58
 80090c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ca:	4a0c      	ldr	r2, [pc, #48]	; (80090fc <prvInitialiseNewTask+0x144>)
 80090cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	4a0b      	ldr	r2, [pc, #44]	; (8009100 <prvInitialiseNewTask+0x148>)
 80090d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	68f9      	ldr	r1, [r7, #12]
 80090d8:	69b8      	ldr	r0, [r7, #24]
 80090da:	f001 fa47 	bl	800a56c <pxPortInitialiseStack>
 80090de:	4602      	mov	r2, r0
 80090e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f0:	bf00      	nop
 80090f2:	3720      	adds	r7, #32
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20006ad0 	.word	0x20006ad0
 80090fc:	20006b38 	.word	0x20006b38
 8009100:	20006ba0 	.word	0x20006ba0

08009104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800910c:	f001 fb5a 	bl	800a7c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009110:	4b2d      	ldr	r3, [pc, #180]	; (80091c8 <prvAddNewTaskToReadyList+0xc4>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3301      	adds	r3, #1
 8009116:	4a2c      	ldr	r2, [pc, #176]	; (80091c8 <prvAddNewTaskToReadyList+0xc4>)
 8009118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800911a:	4b2c      	ldr	r3, [pc, #176]	; (80091cc <prvAddNewTaskToReadyList+0xc8>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d109      	bne.n	8009136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009122:	4a2a      	ldr	r2, [pc, #168]	; (80091cc <prvAddNewTaskToReadyList+0xc8>)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009128:	4b27      	ldr	r3, [pc, #156]	; (80091c8 <prvAddNewTaskToReadyList+0xc4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d110      	bne.n	8009152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009130:	f000 fc2e 	bl	8009990 <prvInitialiseTaskLists>
 8009134:	e00d      	b.n	8009152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009136:	4b26      	ldr	r3, [pc, #152]	; (80091d0 <prvAddNewTaskToReadyList+0xcc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d109      	bne.n	8009152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800913e:	4b23      	ldr	r3, [pc, #140]	; (80091cc <prvAddNewTaskToReadyList+0xc8>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	429a      	cmp	r2, r3
 800914a:	d802      	bhi.n	8009152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800914c:	4a1f      	ldr	r2, [pc, #124]	; (80091cc <prvAddNewTaskToReadyList+0xc8>)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009152:	4b20      	ldr	r3, [pc, #128]	; (80091d4 <prvAddNewTaskToReadyList+0xd0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3301      	adds	r3, #1
 8009158:	4a1e      	ldr	r2, [pc, #120]	; (80091d4 <prvAddNewTaskToReadyList+0xd0>)
 800915a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800915c:	4b1d      	ldr	r3, [pc, #116]	; (80091d4 <prvAddNewTaskToReadyList+0xd0>)
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009168:	4b1b      	ldr	r3, [pc, #108]	; (80091d8 <prvAddNewTaskToReadyList+0xd4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d903      	bls.n	8009178 <prvAddNewTaskToReadyList+0x74>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	4a18      	ldr	r2, [pc, #96]	; (80091d8 <prvAddNewTaskToReadyList+0xd4>)
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917c:	4613      	mov	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4a15      	ldr	r2, [pc, #84]	; (80091dc <prvAddNewTaskToReadyList+0xd8>)
 8009186:	441a      	add	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	3304      	adds	r3, #4
 800918c:	4619      	mov	r1, r3
 800918e:	4610      	mov	r0, r2
 8009190:	f7fe ff53 	bl	800803a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009194:	f001 fb46 	bl	800a824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009198:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <prvAddNewTaskToReadyList+0xcc>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00e      	beq.n	80091be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091a0:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <prvAddNewTaskToReadyList+0xc8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d207      	bcs.n	80091be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <prvAddNewTaskToReadyList+0xdc>)
 80091b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091be:	bf00      	nop
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	200048c0 	.word	0x200048c0
 80091cc:	200043ec 	.word	0x200043ec
 80091d0:	200048cc 	.word	0x200048cc
 80091d4:	200048dc 	.word	0x200048dc
 80091d8:	200048c8 	.word	0x200048c8
 80091dc:	200043f0 	.word	0x200043f0
 80091e0:	e000ed04 	.word	0xe000ed04

080091e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d017      	beq.n	8009226 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091f6:	4b13      	ldr	r3, [pc, #76]	; (8009244 <vTaskDelay+0x60>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <vTaskDelay+0x30>
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	60bb      	str	r3, [r7, #8]
}
 8009210:	bf00      	nop
 8009212:	e7fe      	b.n	8009212 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009214:	f000 f88a 	bl	800932c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009218:	2100      	movs	r1, #0
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fe04 	bl	8009e28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009220:	f000 f892 	bl	8009348 <xTaskResumeAll>
 8009224:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d107      	bne.n	800923c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <vTaskDelay+0x64>)
 800922e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800923c:	bf00      	nop
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	200048e8 	.word	0x200048e8
 8009248:	e000ed04 	.word	0xe000ed04

0800924c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	; 0x28
 8009250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800925a:	463a      	mov	r2, r7
 800925c:	1d39      	adds	r1, r7, #4
 800925e:	f107 0308 	add.w	r3, r7, #8
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fe88 	bl	8007f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	9202      	str	r2, [sp, #8]
 8009270:	9301      	str	r3, [sp, #4]
 8009272:	2300      	movs	r3, #0
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	2300      	movs	r3, #0
 8009278:	460a      	mov	r2, r1
 800927a:	4924      	ldr	r1, [pc, #144]	; (800930c <vTaskStartScheduler+0xc0>)
 800927c:	4824      	ldr	r0, [pc, #144]	; (8009310 <vTaskStartScheduler+0xc4>)
 800927e:	f7ff fdf9 	bl	8008e74 <xTaskCreateStatic>
 8009282:	4603      	mov	r3, r0
 8009284:	4a23      	ldr	r2, [pc, #140]	; (8009314 <vTaskStartScheduler+0xc8>)
 8009286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009288:	4b22      	ldr	r3, [pc, #136]	; (8009314 <vTaskStartScheduler+0xc8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009290:	2301      	movs	r3, #1
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	e001      	b.n	800929a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009296:	2300      	movs	r3, #0
 8009298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d102      	bne.n	80092a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092a0:	f000 fe16 	bl	8009ed0 <xTimerCreateTimerTask>
 80092a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d11b      	bne.n	80092e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	613b      	str	r3, [r7, #16]
}
 80092be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092c0:	4b15      	ldr	r3, [pc, #84]	; (8009318 <vTaskStartScheduler+0xcc>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3354      	adds	r3, #84	; 0x54
 80092c6:	4a15      	ldr	r2, [pc, #84]	; (800931c <vTaskStartScheduler+0xd0>)
 80092c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092ca:	4b15      	ldr	r3, [pc, #84]	; (8009320 <vTaskStartScheduler+0xd4>)
 80092cc:	f04f 32ff 	mov.w	r2, #4294967295
 80092d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092d2:	4b14      	ldr	r3, [pc, #80]	; (8009324 <vTaskStartScheduler+0xd8>)
 80092d4:	2201      	movs	r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092d8:	4b13      	ldr	r3, [pc, #76]	; (8009328 <vTaskStartScheduler+0xdc>)
 80092da:	2200      	movs	r2, #0
 80092dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092de:	f001 f9cf 	bl	800a680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092e2:	e00e      	b.n	8009302 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ea:	d10a      	bne.n	8009302 <vTaskStartScheduler+0xb6>
	__asm volatile
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	60fb      	str	r3, [r7, #12]
}
 80092fe:	bf00      	nop
 8009300:	e7fe      	b.n	8009300 <vTaskStartScheduler+0xb4>
}
 8009302:	bf00      	nop
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	0800b5c0 	.word	0x0800b5c0
 8009310:	08009961 	.word	0x08009961
 8009314:	200048e4 	.word	0x200048e4
 8009318:	200043ec 	.word	0x200043ec
 800931c:	20000088 	.word	0x20000088
 8009320:	200048e0 	.word	0x200048e0
 8009324:	200048cc 	.word	0x200048cc
 8009328:	200048c4 	.word	0x200048c4

0800932c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800932c:	b480      	push	{r7}
 800932e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <vTaskSuspendAll+0x18>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	4a03      	ldr	r2, [pc, #12]	; (8009344 <vTaskSuspendAll+0x18>)
 8009338:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800933a:	bf00      	nop
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	200048e8 	.word	0x200048e8

08009348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009352:	2300      	movs	r3, #0
 8009354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009356:	4b42      	ldr	r3, [pc, #264]	; (8009460 <xTaskResumeAll+0x118>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <xTaskResumeAll+0x2c>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	603b      	str	r3, [r7, #0]
}
 8009370:	bf00      	nop
 8009372:	e7fe      	b.n	8009372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009374:	f001 fa26 	bl	800a7c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009378:	4b39      	ldr	r3, [pc, #228]	; (8009460 <xTaskResumeAll+0x118>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3b01      	subs	r3, #1
 800937e:	4a38      	ldr	r2, [pc, #224]	; (8009460 <xTaskResumeAll+0x118>)
 8009380:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009382:	4b37      	ldr	r3, [pc, #220]	; (8009460 <xTaskResumeAll+0x118>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d162      	bne.n	8009450 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800938a:	4b36      	ldr	r3, [pc, #216]	; (8009464 <xTaskResumeAll+0x11c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d05e      	beq.n	8009450 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009392:	e02f      	b.n	80093f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009394:	4b34      	ldr	r3, [pc, #208]	; (8009468 <xTaskResumeAll+0x120>)
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3318      	adds	r3, #24
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fea7 	bl	80080f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3304      	adds	r3, #4
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fea2 	bl	80080f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b4:	4b2d      	ldr	r3, [pc, #180]	; (800946c <xTaskResumeAll+0x124>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d903      	bls.n	80093c4 <xTaskResumeAll+0x7c>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c0:	4a2a      	ldr	r2, [pc, #168]	; (800946c <xTaskResumeAll+0x124>)
 80093c2:	6013      	str	r3, [r2, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	4a27      	ldr	r2, [pc, #156]	; (8009470 <xTaskResumeAll+0x128>)
 80093d2:	441a      	add	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3304      	adds	r3, #4
 80093d8:	4619      	mov	r1, r3
 80093da:	4610      	mov	r0, r2
 80093dc:	f7fe fe2d 	bl	800803a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e4:	4b23      	ldr	r3, [pc, #140]	; (8009474 <xTaskResumeAll+0x12c>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d302      	bcc.n	80093f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093ee:	4b22      	ldr	r3, [pc, #136]	; (8009478 <xTaskResumeAll+0x130>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093f4:	4b1c      	ldr	r3, [pc, #112]	; (8009468 <xTaskResumeAll+0x120>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1cb      	bne.n	8009394 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009402:	f000 fb67 	bl	8009ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009406:	4b1d      	ldr	r3, [pc, #116]	; (800947c <xTaskResumeAll+0x134>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d010      	beq.n	8009434 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009412:	f000 f847 	bl	80094a4 <xTaskIncrementTick>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800941c:	4b16      	ldr	r3, [pc, #88]	; (8009478 <xTaskResumeAll+0x130>)
 800941e:	2201      	movs	r2, #1
 8009420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	3b01      	subs	r3, #1
 8009426:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f1      	bne.n	8009412 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <xTaskResumeAll+0x134>)
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009434:	4b10      	ldr	r3, [pc, #64]	; (8009478 <xTaskResumeAll+0x130>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d009      	beq.n	8009450 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800943c:	2301      	movs	r3, #1
 800943e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009440:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <xTaskResumeAll+0x138>)
 8009442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009450:	f001 f9e8 	bl	800a824 <vPortExitCritical>

	return xAlreadyYielded;
 8009454:	68bb      	ldr	r3, [r7, #8]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	200048e8 	.word	0x200048e8
 8009464:	200048c0 	.word	0x200048c0
 8009468:	20004880 	.word	0x20004880
 800946c:	200048c8 	.word	0x200048c8
 8009470:	200043f0 	.word	0x200043f0
 8009474:	200043ec 	.word	0x200043ec
 8009478:	200048d4 	.word	0x200048d4
 800947c:	200048d0 	.word	0x200048d0
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800948a:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <xTaskGetTickCount+0x1c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009490:	687b      	ldr	r3, [r7, #4]
}
 8009492:	4618      	mov	r0, r3
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	200048c4 	.word	0x200048c4

080094a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094ae:	4b53      	ldr	r3, [pc, #332]	; (80095fc <xTaskIncrementTick+0x158>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 8095 	bne.w	80095e2 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094b8:	4b51      	ldr	r3, [pc, #324]	; (8009600 <xTaskIncrementTick+0x15c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3301      	adds	r3, #1
 80094be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094c0:	4a4f      	ldr	r2, [pc, #316]	; (8009600 <xTaskIncrementTick+0x15c>)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d120      	bne.n	800950e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094cc:	4b4d      	ldr	r3, [pc, #308]	; (8009604 <xTaskIncrementTick+0x160>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <xTaskIncrementTick+0x48>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	603b      	str	r3, [r7, #0]
}
 80094e8:	bf00      	nop
 80094ea:	e7fe      	b.n	80094ea <xTaskIncrementTick+0x46>
 80094ec:	4b45      	ldr	r3, [pc, #276]	; (8009604 <xTaskIncrementTick+0x160>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	4b45      	ldr	r3, [pc, #276]	; (8009608 <xTaskIncrementTick+0x164>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a43      	ldr	r2, [pc, #268]	; (8009604 <xTaskIncrementTick+0x160>)
 80094f8:	6013      	str	r3, [r2, #0]
 80094fa:	4a43      	ldr	r2, [pc, #268]	; (8009608 <xTaskIncrementTick+0x164>)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	4b42      	ldr	r3, [pc, #264]	; (800960c <xTaskIncrementTick+0x168>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3301      	adds	r3, #1
 8009506:	4a41      	ldr	r2, [pc, #260]	; (800960c <xTaskIncrementTick+0x168>)
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	f000 fae3 	bl	8009ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800950e:	4b40      	ldr	r3, [pc, #256]	; (8009610 <xTaskIncrementTick+0x16c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	429a      	cmp	r2, r3
 8009516:	d349      	bcc.n	80095ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009518:	4b3a      	ldr	r3, [pc, #232]	; (8009604 <xTaskIncrementTick+0x160>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009522:	4b3b      	ldr	r3, [pc, #236]	; (8009610 <xTaskIncrementTick+0x16c>)
 8009524:	f04f 32ff 	mov.w	r2, #4294967295
 8009528:	601a      	str	r2, [r3, #0]
					break;
 800952a:	e03f      	b.n	80095ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800952c:	4b35      	ldr	r3, [pc, #212]	; (8009604 <xTaskIncrementTick+0x160>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d203      	bcs.n	800954c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009544:	4a32      	ldr	r2, [pc, #200]	; (8009610 <xTaskIncrementTick+0x16c>)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800954a:	e02f      	b.n	80095ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	3304      	adds	r3, #4
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe fdcf 	bl	80080f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	3318      	adds	r3, #24
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe fdc6 	bl	80080f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956c:	4b29      	ldr	r3, [pc, #164]	; (8009614 <xTaskIncrementTick+0x170>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	429a      	cmp	r2, r3
 8009572:	d903      	bls.n	800957c <xTaskIncrementTick+0xd8>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	4a26      	ldr	r2, [pc, #152]	; (8009614 <xTaskIncrementTick+0x170>)
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4a23      	ldr	r2, [pc, #140]	; (8009618 <xTaskIncrementTick+0x174>)
 800958a:	441a      	add	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	3304      	adds	r3, #4
 8009590:	4619      	mov	r1, r3
 8009592:	4610      	mov	r0, r2
 8009594:	f7fe fd51 	bl	800803a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959c:	4b1f      	ldr	r3, [pc, #124]	; (800961c <xTaskIncrementTick+0x178>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d3b8      	bcc.n	8009518 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80095a6:	2301      	movs	r3, #1
 80095a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095aa:	e7b5      	b.n	8009518 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095ac:	4b1b      	ldr	r3, [pc, #108]	; (800961c <xTaskIncrementTick+0x178>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b2:	4919      	ldr	r1, [pc, #100]	; (8009618 <xTaskIncrementTick+0x174>)
 80095b4:	4613      	mov	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d901      	bls.n	80095c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80095c4:	2301      	movs	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80095c8:	4b15      	ldr	r3, [pc, #84]	; (8009620 <xTaskIncrementTick+0x17c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80095d0:	f7f7 fc0a 	bl	8000de8 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095d4:	4b13      	ldr	r3, [pc, #76]	; (8009624 <xTaskIncrementTick+0x180>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d009      	beq.n	80095f0 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80095dc:	2301      	movs	r3, #1
 80095de:	617b      	str	r3, [r7, #20]
 80095e0:	e006      	b.n	80095f0 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095e2:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <xTaskIncrementTick+0x17c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3301      	adds	r3, #1
 80095e8:	4a0d      	ldr	r2, [pc, #52]	; (8009620 <xTaskIncrementTick+0x17c>)
 80095ea:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80095ec:	f7f7 fbfc 	bl	8000de8 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80095f0:	697b      	ldr	r3, [r7, #20]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	200048e8 	.word	0x200048e8
 8009600:	200048c4 	.word	0x200048c4
 8009604:	20004878 	.word	0x20004878
 8009608:	2000487c 	.word	0x2000487c
 800960c:	200048d8 	.word	0x200048d8
 8009610:	200048e0 	.word	0x200048e0
 8009614:	200048c8 	.word	0x200048c8
 8009618:	200043f0 	.word	0x200043f0
 800961c:	200043ec 	.word	0x200043ec
 8009620:	200048d0 	.word	0x200048d0
 8009624:	200048d4 	.word	0x200048d4

08009628 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800962e:	4b2a      	ldr	r3, [pc, #168]	; (80096d8 <vTaskSwitchContext+0xb0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009636:	4b29      	ldr	r3, [pc, #164]	; (80096dc <vTaskSwitchContext+0xb4>)
 8009638:	2201      	movs	r2, #1
 800963a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800963c:	e046      	b.n	80096cc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800963e:	4b27      	ldr	r3, [pc, #156]	; (80096dc <vTaskSwitchContext+0xb4>)
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009644:	4b26      	ldr	r3, [pc, #152]	; (80096e0 <vTaskSwitchContext+0xb8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	e010      	b.n	800966e <vTaskSwitchContext+0x46>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10a      	bne.n	8009668 <vTaskSwitchContext+0x40>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	607b      	str	r3, [r7, #4]
}
 8009664:	bf00      	nop
 8009666:	e7fe      	b.n	8009666 <vTaskSwitchContext+0x3e>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	3b01      	subs	r3, #1
 800966c:	60fb      	str	r3, [r7, #12]
 800966e:	491d      	ldr	r1, [pc, #116]	; (80096e4 <vTaskSwitchContext+0xbc>)
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0e4      	beq.n	800964c <vTaskSwitchContext+0x24>
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4a15      	ldr	r2, [pc, #84]	; (80096e4 <vTaskSwitchContext+0xbc>)
 800968e:	4413      	add	r3, r2
 8009690:	60bb      	str	r3, [r7, #8]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	605a      	str	r2, [r3, #4]
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	3308      	adds	r3, #8
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d104      	bne.n	80096b2 <vTaskSwitchContext+0x8a>
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	605a      	str	r2, [r3, #4]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	4a0b      	ldr	r2, [pc, #44]	; (80096e8 <vTaskSwitchContext+0xc0>)
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	4a08      	ldr	r2, [pc, #32]	; (80096e0 <vTaskSwitchContext+0xb8>)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096c2:	4b09      	ldr	r3, [pc, #36]	; (80096e8 <vTaskSwitchContext+0xc0>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3354      	adds	r3, #84	; 0x54
 80096c8:	4a08      	ldr	r2, [pc, #32]	; (80096ec <vTaskSwitchContext+0xc4>)
 80096ca:	6013      	str	r3, [r2, #0]
}
 80096cc:	bf00      	nop
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	200048e8 	.word	0x200048e8
 80096dc:	200048d4 	.word	0x200048d4
 80096e0:	200048c8 	.word	0x200048c8
 80096e4:	200043f0 	.word	0x200043f0
 80096e8:	200043ec 	.word	0x200043ec
 80096ec:	20000088 	.word	0x20000088

080096f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	60fb      	str	r3, [r7, #12]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009716:	4b07      	ldr	r3, [pc, #28]	; (8009734 <vTaskPlaceOnEventList+0x44>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3318      	adds	r3, #24
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7fe fcaf 	bl	8008082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009724:	2101      	movs	r1, #1
 8009726:	6838      	ldr	r0, [r7, #0]
 8009728:	f000 fb7e 	bl	8009e28 <prvAddCurrentTaskToDelayedList>
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	200043ec 	.word	0x200043ec

08009738 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	617b      	str	r3, [r7, #20]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <vTaskPlaceOnEventListRestricted+0x54>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3318      	adds	r3, #24
 8009766:	4619      	mov	r1, r3
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f7fe fc66 	bl	800803a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009774:	f04f 33ff 	mov.w	r3, #4294967295
 8009778:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	68b8      	ldr	r0, [r7, #8]
 800977e:	f000 fb53 	bl	8009e28 <prvAddCurrentTaskToDelayedList>
	}
 8009782:	bf00      	nop
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	200043ec 	.word	0x200043ec

08009790 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	60fb      	str	r3, [r7, #12]
}
 80097b8:	bf00      	nop
 80097ba:	e7fe      	b.n	80097ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	3318      	adds	r3, #24
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fe fc97 	bl	80080f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097c6:	4b1e      	ldr	r3, [pc, #120]	; (8009840 <xTaskRemoveFromEventList+0xb0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d11d      	bne.n	800980a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	3304      	adds	r3, #4
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fc8e 	bl	80080f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097dc:	4b19      	ldr	r3, [pc, #100]	; (8009844 <xTaskRemoveFromEventList+0xb4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d903      	bls.n	80097ec <xTaskRemoveFromEventList+0x5c>
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	4a16      	ldr	r2, [pc, #88]	; (8009844 <xTaskRemoveFromEventList+0xb4>)
 80097ea:	6013      	str	r3, [r2, #0]
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4a13      	ldr	r2, [pc, #76]	; (8009848 <xTaskRemoveFromEventList+0xb8>)
 80097fa:	441a      	add	r2, r3
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	3304      	adds	r3, #4
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f7fe fc19 	bl	800803a <vListInsertEnd>
 8009808:	e005      	b.n	8009816 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	3318      	adds	r3, #24
 800980e:	4619      	mov	r1, r3
 8009810:	480e      	ldr	r0, [pc, #56]	; (800984c <xTaskRemoveFromEventList+0xbc>)
 8009812:	f7fe fc12 	bl	800803a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981a:	4b0d      	ldr	r3, [pc, #52]	; (8009850 <xTaskRemoveFromEventList+0xc0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	429a      	cmp	r2, r3
 8009822:	d905      	bls.n	8009830 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009824:	2301      	movs	r3, #1
 8009826:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009828:	4b0a      	ldr	r3, [pc, #40]	; (8009854 <xTaskRemoveFromEventList+0xc4>)
 800982a:	2201      	movs	r2, #1
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	e001      	b.n	8009834 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009830:	2300      	movs	r3, #0
 8009832:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009834:	697b      	ldr	r3, [r7, #20]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	200048e8 	.word	0x200048e8
 8009844:	200048c8 	.word	0x200048c8
 8009848:	200043f0 	.word	0x200043f0
 800984c:	20004880 	.word	0x20004880
 8009850:	200043ec 	.word	0x200043ec
 8009854:	200048d4 	.word	0x200048d4

08009858 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009860:	4b06      	ldr	r3, [pc, #24]	; (800987c <vTaskInternalSetTimeOutState+0x24>)
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009868:	4b05      	ldr	r3, [pc, #20]	; (8009880 <vTaskInternalSetTimeOutState+0x28>)
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	605a      	str	r2, [r3, #4]
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	200048d8 	.word	0x200048d8
 8009880:	200048c4 	.word	0x200048c4

08009884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b088      	sub	sp, #32
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	613b      	str	r3, [r7, #16]
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80098b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b4:	f383 8811 	msr	BASEPRI, r3
 80098b8:	f3bf 8f6f 	isb	sy
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	60fb      	str	r3, [r7, #12]
}
 80098c2:	bf00      	nop
 80098c4:	e7fe      	b.n	80098c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80098c6:	f000 ff7d 	bl	800a7c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80098ca:	4b1d      	ldr	r3, [pc, #116]	; (8009940 <xTaskCheckForTimeOut+0xbc>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e2:	d102      	bne.n	80098ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61fb      	str	r3, [r7, #28]
 80098e8:	e023      	b.n	8009932 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	4b15      	ldr	r3, [pc, #84]	; (8009944 <xTaskCheckForTimeOut+0xc0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d007      	beq.n	8009906 <xTaskCheckForTimeOut+0x82>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d302      	bcc.n	8009906 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009900:	2301      	movs	r3, #1
 8009902:	61fb      	str	r3, [r7, #28]
 8009904:	e015      	b.n	8009932 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	429a      	cmp	r2, r3
 800990e:	d20b      	bcs.n	8009928 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	1ad2      	subs	r2, r2, r3
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7ff ff9b 	bl	8009858 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009922:	2300      	movs	r3, #0
 8009924:	61fb      	str	r3, [r7, #28]
 8009926:	e004      	b.n	8009932 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800992e:	2301      	movs	r3, #1
 8009930:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009932:	f000 ff77 	bl	800a824 <vPortExitCritical>

	return xReturn;
 8009936:	69fb      	ldr	r3, [r7, #28]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3720      	adds	r7, #32
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	200048c4 	.word	0x200048c4
 8009944:	200048d8 	.word	0x200048d8

08009948 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009948:	b480      	push	{r7}
 800994a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800994c:	4b03      	ldr	r3, [pc, #12]	; (800995c <vTaskMissedYield+0x14>)
 800994e:	2201      	movs	r2, #1
 8009950:	601a      	str	r2, [r3, #0]
}
 8009952:	bf00      	nop
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	200048d4 	.word	0x200048d4

08009960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009968:	f000 f852 	bl	8009a10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <prvIdleTask+0x28>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d9f9      	bls.n	8009968 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <prvIdleTask+0x2c>)
 8009976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009984:	e7f0      	b.n	8009968 <prvIdleTask+0x8>
 8009986:	bf00      	nop
 8009988:	200043f0 	.word	0x200043f0
 800998c:	e000ed04 	.word	0xe000ed04

08009990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009996:	2300      	movs	r3, #0
 8009998:	607b      	str	r3, [r7, #4]
 800999a:	e00c      	b.n	80099b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4a12      	ldr	r2, [pc, #72]	; (80099f0 <prvInitialiseTaskLists+0x60>)
 80099a8:	4413      	add	r3, r2
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fb18 	bl	8007fe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3301      	adds	r3, #1
 80099b4:	607b      	str	r3, [r7, #4]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b37      	cmp	r3, #55	; 0x37
 80099ba:	d9ef      	bls.n	800999c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099bc:	480d      	ldr	r0, [pc, #52]	; (80099f4 <prvInitialiseTaskLists+0x64>)
 80099be:	f7fe fb0f 	bl	8007fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099c2:	480d      	ldr	r0, [pc, #52]	; (80099f8 <prvInitialiseTaskLists+0x68>)
 80099c4:	f7fe fb0c 	bl	8007fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099c8:	480c      	ldr	r0, [pc, #48]	; (80099fc <prvInitialiseTaskLists+0x6c>)
 80099ca:	f7fe fb09 	bl	8007fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099ce:	480c      	ldr	r0, [pc, #48]	; (8009a00 <prvInitialiseTaskLists+0x70>)
 80099d0:	f7fe fb06 	bl	8007fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099d4:	480b      	ldr	r0, [pc, #44]	; (8009a04 <prvInitialiseTaskLists+0x74>)
 80099d6:	f7fe fb03 	bl	8007fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <prvInitialiseTaskLists+0x78>)
 80099dc:	4a05      	ldr	r2, [pc, #20]	; (80099f4 <prvInitialiseTaskLists+0x64>)
 80099de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <prvInitialiseTaskLists+0x7c>)
 80099e2:	4a05      	ldr	r2, [pc, #20]	; (80099f8 <prvInitialiseTaskLists+0x68>)
 80099e4:	601a      	str	r2, [r3, #0]
}
 80099e6:	bf00      	nop
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	200043f0 	.word	0x200043f0
 80099f4:	20004850 	.word	0x20004850
 80099f8:	20004864 	.word	0x20004864
 80099fc:	20004880 	.word	0x20004880
 8009a00:	20004894 	.word	0x20004894
 8009a04:	200048ac 	.word	0x200048ac
 8009a08:	20004878 	.word	0x20004878
 8009a0c:	2000487c 	.word	0x2000487c

08009a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a16:	e019      	b.n	8009a4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a18:	f000 fed4 	bl	800a7c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a1c:	4b10      	ldr	r3, [pc, #64]	; (8009a60 <prvCheckTasksWaitingTermination+0x50>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3304      	adds	r3, #4
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe fb63 	bl	80080f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <prvCheckTasksWaitingTermination+0x54>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	4a0b      	ldr	r2, [pc, #44]	; (8009a64 <prvCheckTasksWaitingTermination+0x54>)
 8009a36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a38:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <prvCheckTasksWaitingTermination+0x58>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	4a0a      	ldr	r2, [pc, #40]	; (8009a68 <prvCheckTasksWaitingTermination+0x58>)
 8009a40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a42:	f000 feef 	bl	800a824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f810 	bl	8009a6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <prvCheckTasksWaitingTermination+0x58>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e1      	bne.n	8009a18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20004894 	.word	0x20004894
 8009a64:	200048c0 	.word	0x200048c0
 8009a68:	200048a8 	.word	0x200048a8

08009a6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3354      	adds	r3, #84	; 0x54
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f001 f91b 	bl	800acb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d108      	bne.n	8009a9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f001 f801 	bl	800aa94 <vPortFree>
				vPortFree( pxTCB );
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fffe 	bl	800aa94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a98:	e018      	b.n	8009acc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d103      	bne.n	8009aac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fff5 	bl	800aa94 <vPortFree>
	}
 8009aaa:	e00f      	b.n	8009acc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d00a      	beq.n	8009acc <prvDeleteTCB+0x60>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60fb      	str	r3, [r7, #12]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <prvDeleteTCB+0x5e>
	}
 8009acc:	bf00      	nop
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <prvResetNextTaskUnblockTime+0x38>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <prvResetNextTaskUnblockTime+0x3c>)
 8009ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009aec:	e008      	b.n	8009b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <prvResetNextTaskUnblockTime+0x38>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <prvResetNextTaskUnblockTime+0x3c>)
 8009afe:	6013      	str	r3, [r2, #0]
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	20004878 	.word	0x20004878
 8009b10:	200048e0 	.word	0x200048e0

08009b14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <xTaskGetSchedulerState+0x34>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b22:	2301      	movs	r3, #1
 8009b24:	607b      	str	r3, [r7, #4]
 8009b26:	e008      	b.n	8009b3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b28:	4b08      	ldr	r3, [pc, #32]	; (8009b4c <xTaskGetSchedulerState+0x38>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b30:	2302      	movs	r3, #2
 8009b32:	607b      	str	r3, [r7, #4]
 8009b34:	e001      	b.n	8009b3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b36:	2300      	movs	r3, #0
 8009b38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b3a:	687b      	ldr	r3, [r7, #4]
	}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	200048cc 	.word	0x200048cc
 8009b4c:	200048e8 	.word	0x200048e8

08009b50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d051      	beq.n	8009c0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6a:	4b2a      	ldr	r3, [pc, #168]	; (8009c14 <xTaskPriorityInherit+0xc4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d241      	bcs.n	8009bf8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	db06      	blt.n	8009b8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b7c:	4b25      	ldr	r3, [pc, #148]	; (8009c14 <xTaskPriorityInherit+0xc4>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	6959      	ldr	r1, [r3, #20]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4a1f      	ldr	r2, [pc, #124]	; (8009c18 <xTaskPriorityInherit+0xc8>)
 8009b9c:	4413      	add	r3, r2
 8009b9e:	4299      	cmp	r1, r3
 8009ba0:	d122      	bne.n	8009be8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe faa4 	bl	80080f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009bac:	4b19      	ldr	r3, [pc, #100]	; (8009c14 <xTaskPriorityInherit+0xc4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bba:	4b18      	ldr	r3, [pc, #96]	; (8009c1c <xTaskPriorityInherit+0xcc>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d903      	bls.n	8009bca <xTaskPriorityInherit+0x7a>
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc6:	4a15      	ldr	r2, [pc, #84]	; (8009c1c <xTaskPriorityInherit+0xcc>)
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bce:	4613      	mov	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4a10      	ldr	r2, [pc, #64]	; (8009c18 <xTaskPriorityInherit+0xc8>)
 8009bd8:	441a      	add	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f7fe fa2a 	bl	800803a <vListInsertEnd>
 8009be6:	e004      	b.n	8009bf2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009be8:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <xTaskPriorityInherit+0xc4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e008      	b.n	8009c0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bfc:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <xTaskPriorityInherit+0xc4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d201      	bcs.n	8009c0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009c06:	2301      	movs	r3, #1
 8009c08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
	}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	200043ec 	.word	0x200043ec
 8009c18:	200043f0 	.word	0x200043f0
 8009c1c:	200048c8 	.word	0x200048c8

08009c20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d056      	beq.n	8009ce4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c36:	4b2e      	ldr	r3, [pc, #184]	; (8009cf0 <xTaskPriorityDisinherit+0xd0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d00a      	beq.n	8009c56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	60fb      	str	r3, [r7, #12]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60bb      	str	r3, [r7, #8]
}
 8009c70:	bf00      	nop
 8009c72:	e7fe      	b.n	8009c72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c78:	1e5a      	subs	r2, r3, #1
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d02c      	beq.n	8009ce4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d128      	bne.n	8009ce4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	3304      	adds	r3, #4
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fa2c 	bl	80080f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb4:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <xTaskPriorityDisinherit+0xd4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d903      	bls.n	8009cc4 <xTaskPriorityDisinherit+0xa4>
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a0c      	ldr	r2, [pc, #48]	; (8009cf4 <xTaskPriorityDisinherit+0xd4>)
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4a09      	ldr	r2, [pc, #36]	; (8009cf8 <xTaskPriorityDisinherit+0xd8>)
 8009cd2:	441a      	add	r2, r3
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	f7fe f9ad 	bl	800803a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ce4:	697b      	ldr	r3, [r7, #20]
	}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	200043ec 	.word	0x200043ec
 8009cf4:	200048c8 	.word	0x200048c8
 8009cf8:	200043f0 	.word	0x200043f0

08009cfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d06a      	beq.n	8009dea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10a      	bne.n	8009d32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60fb      	str	r3, [r7, #12]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d902      	bls.n	8009d42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	e002      	b.n	8009d48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4c:	69fa      	ldr	r2, [r7, #28]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d04b      	beq.n	8009dea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d56:	697a      	ldr	r2, [r7, #20]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d146      	bne.n	8009dea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d5c:	4b25      	ldr	r3, [pc, #148]	; (8009df4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69ba      	ldr	r2, [r7, #24]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d10a      	bne.n	8009d7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	60bb      	str	r3, [r7, #8]
}
 8009d78:	bf00      	nop
 8009d7a:	e7fe      	b.n	8009d7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	69fa      	ldr	r2, [r7, #28]
 8009d86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	db04      	blt.n	8009d9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	6959      	ldr	r1, [r3, #20]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4a13      	ldr	r2, [pc, #76]	; (8009df8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009daa:	4413      	add	r3, r2
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d11c      	bne.n	8009dea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe f99d 	bl	80080f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dbe:	4b0f      	ldr	r3, [pc, #60]	; (8009dfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d903      	bls.n	8009dce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	4a0c      	ldr	r2, [pc, #48]	; (8009dfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4a07      	ldr	r2, [pc, #28]	; (8009df8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ddc:	441a      	add	r2, r3
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	3304      	adds	r3, #4
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	f7fe f928 	bl	800803a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dea:	bf00      	nop
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	200043ec 	.word	0x200043ec
 8009df8:	200043f0 	.word	0x200043f0
 8009dfc:	200048c8 	.word	0x200048c8

08009e00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009e00:	b480      	push	{r7}
 8009e02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009e04:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d004      	beq.n	8009e16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e12:	3201      	adds	r2, #1
 8009e14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009e16:	4b03      	ldr	r3, [pc, #12]	; (8009e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8009e18:	681b      	ldr	r3, [r3, #0]
	}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	200043ec 	.word	0x200043ec

08009e28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e32:	4b21      	ldr	r3, [pc, #132]	; (8009eb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e38:	4b20      	ldr	r3, [pc, #128]	; (8009ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe f958 	bl	80080f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4a:	d10a      	bne.n	8009e62 <prvAddCurrentTaskToDelayedList+0x3a>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d007      	beq.n	8009e62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e52:	4b1a      	ldr	r3, [pc, #104]	; (8009ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3304      	adds	r3, #4
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4819      	ldr	r0, [pc, #100]	; (8009ec0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e5c:	f7fe f8ed 	bl	800803a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e60:	e026      	b.n	8009eb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4413      	add	r3, r2
 8009e68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e6a:	4b14      	ldr	r3, [pc, #80]	; (8009ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d209      	bcs.n	8009e8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e7a:	4b12      	ldr	r3, [pc, #72]	; (8009ec4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3304      	adds	r3, #4
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f7fe f8fb 	bl	8008082 <vListInsert>
}
 8009e8c:	e010      	b.n	8009eb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e8e:	4b0e      	ldr	r3, [pc, #56]	; (8009ec8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <prvAddCurrentTaskToDelayedList+0x94>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3304      	adds	r3, #4
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4610      	mov	r0, r2
 8009e9c:	f7fe f8f1 	bl	8008082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d202      	bcs.n	8009eb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009eaa:	4a08      	ldr	r2, [pc, #32]	; (8009ecc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6013      	str	r3, [r2, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	200048c4 	.word	0x200048c4
 8009ebc:	200043ec 	.word	0x200043ec
 8009ec0:	200048ac 	.word	0x200048ac
 8009ec4:	2000487c 	.word	0x2000487c
 8009ec8:	20004878 	.word	0x20004878
 8009ecc:	200048e0 	.word	0x200048e0

08009ed0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08a      	sub	sp, #40	; 0x28
 8009ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009eda:	f000 fb07 	bl	800a4ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ede:	4b1c      	ldr	r3, [pc, #112]	; (8009f50 <xTimerCreateTimerTask+0x80>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d021      	beq.n	8009f2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009eee:	1d3a      	adds	r2, r7, #4
 8009ef0:	f107 0108 	add.w	r1, r7, #8
 8009ef4:	f107 030c 	add.w	r3, r7, #12
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe f857 	bl	8007fac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	9202      	str	r2, [sp, #8]
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	2302      	movs	r3, #2
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	460a      	mov	r2, r1
 8009f10:	4910      	ldr	r1, [pc, #64]	; (8009f54 <xTimerCreateTimerTask+0x84>)
 8009f12:	4811      	ldr	r0, [pc, #68]	; (8009f58 <xTimerCreateTimerTask+0x88>)
 8009f14:	f7fe ffae 	bl	8008e74 <xTaskCreateStatic>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	4a10      	ldr	r2, [pc, #64]	; (8009f5c <xTimerCreateTimerTask+0x8c>)
 8009f1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f1e:	4b0f      	ldr	r3, [pc, #60]	; (8009f5c <xTimerCreateTimerTask+0x8c>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f26:	2301      	movs	r3, #1
 8009f28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10a      	bne.n	8009f46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	613b      	str	r3, [r7, #16]
}
 8009f42:	bf00      	nop
 8009f44:	e7fe      	b.n	8009f44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f46:	697b      	ldr	r3, [r7, #20]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	2000491c 	.word	0x2000491c
 8009f54:	0800b5c8 	.word	0x0800b5c8
 8009f58:	0800a095 	.word	0x0800a095
 8009f5c:	20004920 	.word	0x20004920

08009f60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08a      	sub	sp, #40	; 0x28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	623b      	str	r3, [r7, #32]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f8e:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <xTimerGenericCommand+0x98>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d02a      	beq.n	8009fec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2b05      	cmp	r3, #5
 8009fa6:	dc18      	bgt.n	8009fda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fa8:	f7ff fdb4 	bl	8009b14 <xTaskGetSchedulerState>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d109      	bne.n	8009fc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fb2:	4b11      	ldr	r3, [pc, #68]	; (8009ff8 <xTimerGenericCommand+0x98>)
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	f107 0110 	add.w	r1, r7, #16
 8009fba:	2300      	movs	r3, #0
 8009fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fbe:	f7fe fa4d 	bl	800845c <xQueueGenericSend>
 8009fc2:	6278      	str	r0, [r7, #36]	; 0x24
 8009fc4:	e012      	b.n	8009fec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <xTimerGenericCommand+0x98>)
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	f107 0110 	add.w	r1, r7, #16
 8009fce:	2300      	movs	r3, #0
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f7fe fa43 	bl	800845c <xQueueGenericSend>
 8009fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8009fd8:	e008      	b.n	8009fec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009fda:	4b07      	ldr	r3, [pc, #28]	; (8009ff8 <xTimerGenericCommand+0x98>)
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	f107 0110 	add.w	r1, r7, #16
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	f7fe fb37 	bl	8008658 <xQueueGenericSendFromISR>
 8009fea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3728      	adds	r7, #40	; 0x28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2000491c 	.word	0x2000491c

08009ffc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b088      	sub	sp, #32
 800a000:	af02      	add	r7, sp, #8
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a006:	4b22      	ldr	r3, [pc, #136]	; (800a090 <prvProcessExpiredTimer+0x94>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	3304      	adds	r3, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe f86d 	bl	80080f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d022      	beq.n	800a06e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	699a      	ldr	r2, [r3, #24]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	18d1      	adds	r1, r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	6978      	ldr	r0, [r7, #20]
 800a036:	f000 f8d1 	bl	800a1dc <prvInsertTimerInActiveList>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d01f      	beq.n	800a080 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a040:	2300      	movs	r3, #0
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	2100      	movs	r1, #0
 800a04a:	6978      	ldr	r0, [r7, #20]
 800a04c:	f7ff ff88 	bl	8009f60 <xTimerGenericCommand>
 800a050:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d113      	bne.n	800a080 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	60fb      	str	r3, [r7, #12]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a074:	f023 0301 	bic.w	r3, r3, #1
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	6978      	ldr	r0, [r7, #20]
 800a086:	4798      	blx	r3
}
 800a088:	bf00      	nop
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20004914 	.word	0x20004914

0800a094 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a09c:	f107 0308 	add.w	r3, r7, #8
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 f857 	bl	800a154 <prvGetNextExpireTime>
 800a0a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 f803 	bl	800a0b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a0b2:	f000 f8d5 	bl	800a260 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0b6:	e7f1      	b.n	800a09c <prvTimerTask+0x8>

0800a0b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0c2:	f7ff f933 	bl	800932c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0c6:	f107 0308 	add.w	r3, r7, #8
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 f866 	bl	800a19c <prvSampleTimeNow>
 800a0d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d130      	bne.n	800a13a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <prvProcessTimerOrBlockTask+0x3c>
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d806      	bhi.n	800a0f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0e6:	f7ff f92f 	bl	8009348 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0ea:	68f9      	ldr	r1, [r7, #12]
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff ff85 	bl	8009ffc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0f2:	e024      	b.n	800a13e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d008      	beq.n	800a10c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0fa:	4b13      	ldr	r3, [pc, #76]	; (800a148 <prvProcessTimerOrBlockTask+0x90>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <prvProcessTimerOrBlockTask+0x50>
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <prvProcessTimerOrBlockTask+0x52>
 800a108:	2300      	movs	r3, #0
 800a10a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <prvProcessTimerOrBlockTask+0x94>)
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4619      	mov	r1, r3
 800a11a:	f7fe fe77 	bl	8008e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a11e:	f7ff f913 	bl	8009348 <xTaskResumeAll>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10a      	bne.n	800a13e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a128:	4b09      	ldr	r3, [pc, #36]	; (800a150 <prvProcessTimerOrBlockTask+0x98>)
 800a12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	f3bf 8f6f 	isb	sy
}
 800a138:	e001      	b.n	800a13e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a13a:	f7ff f905 	bl	8009348 <xTaskResumeAll>
}
 800a13e:	bf00      	nop
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20004918 	.word	0x20004918
 800a14c:	2000491c 	.word	0x2000491c
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a15c:	4b0e      	ldr	r3, [pc, #56]	; (800a198 <prvGetNextExpireTime+0x44>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <prvGetNextExpireTime+0x16>
 800a166:	2201      	movs	r2, #1
 800a168:	e000      	b.n	800a16c <prvGetNextExpireTime+0x18>
 800a16a:	2200      	movs	r2, #0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d105      	bne.n	800a184 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <prvGetNextExpireTime+0x44>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	e001      	b.n	800a188 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a188:	68fb      	ldr	r3, [r7, #12]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20004914 	.word	0x20004914

0800a19c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1a4:	f7ff f96e 	bl	8009484 <xTaskGetTickCount>
 800a1a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1aa:	4b0b      	ldr	r3, [pc, #44]	; (800a1d8 <prvSampleTimeNow+0x3c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d205      	bcs.n	800a1c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a1b4:	f000 f936 	bl	800a424 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	e002      	b.n	800a1c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1c6:	4a04      	ldr	r2, [pc, #16]	; (800a1d8 <prvSampleTimeNow+0x3c>)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20004924 	.word	0x20004924

0800a1dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
 800a1e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	68ba      	ldr	r2, [r7, #8]
 800a1f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d812      	bhi.n	800a228 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	699b      	ldr	r3, [r3, #24]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d302      	bcc.n	800a216 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a210:	2301      	movs	r3, #1
 800a212:	617b      	str	r3, [r7, #20]
 800a214:	e01b      	b.n	800a24e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a216:	4b10      	ldr	r3, [pc, #64]	; (800a258 <prvInsertTimerInActiveList+0x7c>)
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3304      	adds	r3, #4
 800a21e:	4619      	mov	r1, r3
 800a220:	4610      	mov	r0, r2
 800a222:	f7fd ff2e 	bl	8008082 <vListInsert>
 800a226:	e012      	b.n	800a24e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d206      	bcs.n	800a23e <prvInsertTimerInActiveList+0x62>
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d302      	bcc.n	800a23e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a238:	2301      	movs	r3, #1
 800a23a:	617b      	str	r3, [r7, #20]
 800a23c:	e007      	b.n	800a24e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a23e:	4b07      	ldr	r3, [pc, #28]	; (800a25c <prvInsertTimerInActiveList+0x80>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3304      	adds	r3, #4
 800a246:	4619      	mov	r1, r3
 800a248:	4610      	mov	r0, r2
 800a24a:	f7fd ff1a 	bl	8008082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a24e:	697b      	ldr	r3, [r7, #20]
}
 800a250:	4618      	mov	r0, r3
 800a252:	3718      	adds	r7, #24
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20004918 	.word	0x20004918
 800a25c:	20004914 	.word	0x20004914

0800a260 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08e      	sub	sp, #56	; 0x38
 800a264:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a266:	e0ca      	b.n	800a3fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da18      	bge.n	800a2a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a26e:	1d3b      	adds	r3, r7, #4
 800a270:	3304      	adds	r3, #4
 800a272:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10a      	bne.n	800a290 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a27e:	f383 8811 	msr	BASEPRI, r3
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	61fb      	str	r3, [r7, #28]
}
 800a28c:	bf00      	nop
 800a28e:	e7fe      	b.n	800a28e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a296:	6850      	ldr	r0, [r2, #4]
 800a298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a29a:	6892      	ldr	r2, [r2, #8]
 800a29c:	4611      	mov	r1, r2
 800a29e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f2c0 80ab 	blt.w	800a3fe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d004      	beq.n	800a2be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fd ff1b 	bl	80080f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2be:	463b      	mov	r3, r7
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff ff6b 	bl	800a19c <prvSampleTimeNow>
 800a2c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b09      	cmp	r3, #9
 800a2cc:	f200 8096 	bhi.w	800a3fc <prvProcessReceivedCommands+0x19c>
 800a2d0:	a201      	add	r2, pc, #4	; (adr r2, 800a2d8 <prvProcessReceivedCommands+0x78>)
 800a2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d6:	bf00      	nop
 800a2d8:	0800a301 	.word	0x0800a301
 800a2dc:	0800a301 	.word	0x0800a301
 800a2e0:	0800a301 	.word	0x0800a301
 800a2e4:	0800a375 	.word	0x0800a375
 800a2e8:	0800a389 	.word	0x0800a389
 800a2ec:	0800a3d3 	.word	0x0800a3d3
 800a2f0:	0800a301 	.word	0x0800a301
 800a2f4:	0800a301 	.word	0x0800a301
 800a2f8:	0800a375 	.word	0x0800a375
 800a2fc:	0800a389 	.word	0x0800a389
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a306:	f043 0301 	orr.w	r3, r3, #1
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	18d1      	adds	r1, r2, r3
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a320:	f7ff ff5c 	bl	800a1dc <prvInsertTimerInActiveList>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d069      	beq.n	800a3fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a330:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d05e      	beq.n	800a3fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	441a      	add	r2, r3
 800a348:	2300      	movs	r3, #0
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	2300      	movs	r3, #0
 800a34e:	2100      	movs	r1, #0
 800a350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a352:	f7ff fe05 	bl	8009f60 <xTimerGenericCommand>
 800a356:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d14f      	bne.n	800a3fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	61bb      	str	r3, [r7, #24]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a37a:	f023 0301 	bic.w	r3, r3, #1
 800a37e:	b2da      	uxtb	r2, r3
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a386:	e03a      	b.n	800a3fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	b2da      	uxtb	r2, r3
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	617b      	str	r3, [r7, #20]
}
 800a3ba:	bf00      	nop
 800a3bc:	e7fe      	b.n	800a3bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	18d1      	adds	r1, r2, r3
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3cc:	f7ff ff06 	bl	800a1dc <prvInsertTimerInActiveList>
					break;
 800a3d0:	e015      	b.n	800a3fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3d8:	f003 0302 	and.w	r3, r3, #2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d103      	bne.n	800a3e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e2:	f000 fb57 	bl	800aa94 <vPortFree>
 800a3e6:	e00a      	b.n	800a3fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ee:	f023 0301 	bic.w	r3, r3, #1
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3fa:	e000      	b.n	800a3fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a3fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3fe:	4b08      	ldr	r3, [pc, #32]	; (800a420 <prvProcessReceivedCommands+0x1c0>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	1d39      	adds	r1, r7, #4
 800a404:	2200      	movs	r2, #0
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe f9c2 	bl	8008790 <xQueueReceive>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f47f af2a 	bne.w	800a268 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop
 800a418:	3730      	adds	r7, #48	; 0x30
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	2000491c 	.word	0x2000491c

0800a424 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a42a:	e048      	b.n	800a4be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a42c:	4b2d      	ldr	r3, [pc, #180]	; (800a4e4 <prvSwitchTimerLists+0xc0>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a436:	4b2b      	ldr	r3, [pc, #172]	; (800a4e4 <prvSwitchTimerLists+0xc0>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	3304      	adds	r3, #4
 800a444:	4618      	mov	r0, r3
 800a446:	f7fd fe55 	bl	80080f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a458:	f003 0304 	and.w	r3, r3, #4
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d02e      	beq.n	800a4be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	4413      	add	r3, r2
 800a468:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d90e      	bls.n	800a490 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a47e:	4b19      	ldr	r3, [pc, #100]	; (800a4e4 <prvSwitchTimerLists+0xc0>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	3304      	adds	r3, #4
 800a486:	4619      	mov	r1, r3
 800a488:	4610      	mov	r0, r2
 800a48a:	f7fd fdfa 	bl	8008082 <vListInsert>
 800a48e:	e016      	b.n	800a4be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a490:	2300      	movs	r3, #0
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	2300      	movs	r3, #0
 800a496:	693a      	ldr	r2, [r7, #16]
 800a498:	2100      	movs	r1, #0
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f7ff fd60 	bl	8009f60 <xTimerGenericCommand>
 800a4a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	603b      	str	r3, [r7, #0]
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4be:	4b09      	ldr	r3, [pc, #36]	; (800a4e4 <prvSwitchTimerLists+0xc0>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1b1      	bne.n	800a42c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4c8:	4b06      	ldr	r3, [pc, #24]	; (800a4e4 <prvSwitchTimerLists+0xc0>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4ce:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <prvSwitchTimerLists+0xc4>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a04      	ldr	r2, [pc, #16]	; (800a4e4 <prvSwitchTimerLists+0xc0>)
 800a4d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4d6:	4a04      	ldr	r2, [pc, #16]	; (800a4e8 <prvSwitchTimerLists+0xc4>)
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	6013      	str	r3, [r2, #0]
}
 800a4dc:	bf00      	nop
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	20004914 	.word	0x20004914
 800a4e8:	20004918 	.word	0x20004918

0800a4ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4f2:	f000 f967 	bl	800a7c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4f6:	4b15      	ldr	r3, [pc, #84]	; (800a54c <prvCheckForValidListAndQueue+0x60>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d120      	bne.n	800a540 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4fe:	4814      	ldr	r0, [pc, #80]	; (800a550 <prvCheckForValidListAndQueue+0x64>)
 800a500:	f7fd fd6e 	bl	8007fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a504:	4813      	ldr	r0, [pc, #76]	; (800a554 <prvCheckForValidListAndQueue+0x68>)
 800a506:	f7fd fd6b 	bl	8007fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a50a:	4b13      	ldr	r3, [pc, #76]	; (800a558 <prvCheckForValidListAndQueue+0x6c>)
 800a50c:	4a10      	ldr	r2, [pc, #64]	; (800a550 <prvCheckForValidListAndQueue+0x64>)
 800a50e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a510:	4b12      	ldr	r3, [pc, #72]	; (800a55c <prvCheckForValidListAndQueue+0x70>)
 800a512:	4a10      	ldr	r2, [pc, #64]	; (800a554 <prvCheckForValidListAndQueue+0x68>)
 800a514:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a516:	2300      	movs	r3, #0
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	4b11      	ldr	r3, [pc, #68]	; (800a560 <prvCheckForValidListAndQueue+0x74>)
 800a51c:	4a11      	ldr	r2, [pc, #68]	; (800a564 <prvCheckForValidListAndQueue+0x78>)
 800a51e:	2110      	movs	r1, #16
 800a520:	2014      	movs	r0, #20
 800a522:	f7fd fe79 	bl	8008218 <xQueueGenericCreateStatic>
 800a526:	4603      	mov	r3, r0
 800a528:	4a08      	ldr	r2, [pc, #32]	; (800a54c <prvCheckForValidListAndQueue+0x60>)
 800a52a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a52c:	4b07      	ldr	r3, [pc, #28]	; (800a54c <prvCheckForValidListAndQueue+0x60>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a534:	4b05      	ldr	r3, [pc, #20]	; (800a54c <prvCheckForValidListAndQueue+0x60>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	490b      	ldr	r1, [pc, #44]	; (800a568 <prvCheckForValidListAndQueue+0x7c>)
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe fc3c 	bl	8008db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a540:	f000 f970 	bl	800a824 <vPortExitCritical>
}
 800a544:	bf00      	nop
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	2000491c 	.word	0x2000491c
 800a550:	200048ec 	.word	0x200048ec
 800a554:	20004900 	.word	0x20004900
 800a558:	20004914 	.word	0x20004914
 800a55c:	20004918 	.word	0x20004918
 800a560:	20004a68 	.word	0x20004a68
 800a564:	20004928 	.word	0x20004928
 800a568:	0800b5d0 	.word	0x0800b5d0

0800a56c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3b04      	subs	r3, #4
 800a57c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3b04      	subs	r3, #4
 800a58a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	f023 0201 	bic.w	r2, r3, #1
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3b04      	subs	r3, #4
 800a59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a59c:	4a0c      	ldr	r2, [pc, #48]	; (800a5d0 <pxPortInitialiseStack+0x64>)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3b14      	subs	r3, #20
 800a5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3b04      	subs	r3, #4
 800a5b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f06f 0202 	mvn.w	r2, #2
 800a5ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	3b20      	subs	r3, #32
 800a5c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	0800a5d5 	.word	0x0800a5d5

0800a5d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5de:	4b12      	ldr	r3, [pc, #72]	; (800a628 <prvTaskExitError+0x54>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e6:	d00a      	beq.n	800a5fe <prvTaskExitError+0x2a>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	60fb      	str	r3, [r7, #12]
}
 800a5fa:	bf00      	nop
 800a5fc:	e7fe      	b.n	800a5fc <prvTaskExitError+0x28>
	__asm volatile
 800a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a602:	f383 8811 	msr	BASEPRI, r3
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	f3bf 8f4f 	dsb	sy
 800a60e:	60bb      	str	r3, [r7, #8]
}
 800a610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a612:	bf00      	nop
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d0fc      	beq.n	800a614 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a61a:	bf00      	nop
 800a61c:	bf00      	nop
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	20000038 	.word	0x20000038
 800a62c:	00000000 	.word	0x00000000

0800a630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <pxCurrentTCBConst2>)
 800a632:	6819      	ldr	r1, [r3, #0]
 800a634:	6808      	ldr	r0, [r1, #0]
 800a636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63a:	f380 8809 	msr	PSP, r0
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f04f 0000 	mov.w	r0, #0
 800a646:	f380 8811 	msr	BASEPRI, r0
 800a64a:	4770      	bx	lr
 800a64c:	f3af 8000 	nop.w

0800a650 <pxCurrentTCBConst2>:
 800a650:	200043ec 	.word	0x200043ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop

0800a658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a658:	4808      	ldr	r0, [pc, #32]	; (800a67c <prvPortStartFirstTask+0x24>)
 800a65a:	6800      	ldr	r0, [r0, #0]
 800a65c:	6800      	ldr	r0, [r0, #0]
 800a65e:	f380 8808 	msr	MSP, r0
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f380 8814 	msr	CONTROL, r0
 800a66a:	b662      	cpsie	i
 800a66c:	b661      	cpsie	f
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	f3bf 8f6f 	isb	sy
 800a676:	df00      	svc	0
 800a678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a67a:	bf00      	nop
 800a67c:	e000ed08 	.word	0xe000ed08

0800a680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a686:	4b46      	ldr	r3, [pc, #280]	; (800a7a0 <xPortStartScheduler+0x120>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a46      	ldr	r2, [pc, #280]	; (800a7a4 <xPortStartScheduler+0x124>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d10a      	bne.n	800a6a6 <xPortStartScheduler+0x26>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	613b      	str	r3, [r7, #16]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6a6:	4b3e      	ldr	r3, [pc, #248]	; (800a7a0 <xPortStartScheduler+0x120>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a3f      	ldr	r2, [pc, #252]	; (800a7a8 <xPortStartScheduler+0x128>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d10a      	bne.n	800a6c6 <xPortStartScheduler+0x46>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	60fb      	str	r3, [r7, #12]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6c6:	4b39      	ldr	r3, [pc, #228]	; (800a7ac <xPortStartScheduler+0x12c>)
 800a6c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	22ff      	movs	r2, #255	; 0xff
 800a6d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	4b31      	ldr	r3, [pc, #196]	; (800a7b0 <xPortStartScheduler+0x130>)
 800a6ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6ee:	4b31      	ldr	r3, [pc, #196]	; (800a7b4 <xPortStartScheduler+0x134>)
 800a6f0:	2207      	movs	r2, #7
 800a6f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6f4:	e009      	b.n	800a70a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a6f6:	4b2f      	ldr	r3, [pc, #188]	; (800a7b4 <xPortStartScheduler+0x134>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	4a2d      	ldr	r2, [pc, #180]	; (800a7b4 <xPortStartScheduler+0x134>)
 800a6fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	005b      	lsls	r3, r3, #1
 800a706:	b2db      	uxtb	r3, r3
 800a708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a712:	2b80      	cmp	r3, #128	; 0x80
 800a714:	d0ef      	beq.n	800a6f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a716:	4b27      	ldr	r3, [pc, #156]	; (800a7b4 <xPortStartScheduler+0x134>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f1c3 0307 	rsb	r3, r3, #7
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d00a      	beq.n	800a738 <xPortStartScheduler+0xb8>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	60bb      	str	r3, [r7, #8]
}
 800a734:	bf00      	nop
 800a736:	e7fe      	b.n	800a736 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a738:	4b1e      	ldr	r3, [pc, #120]	; (800a7b4 <xPortStartScheduler+0x134>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	021b      	lsls	r3, r3, #8
 800a73e:	4a1d      	ldr	r2, [pc, #116]	; (800a7b4 <xPortStartScheduler+0x134>)
 800a740:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a742:	4b1c      	ldr	r3, [pc, #112]	; (800a7b4 <xPortStartScheduler+0x134>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a74a:	4a1a      	ldr	r2, [pc, #104]	; (800a7b4 <xPortStartScheduler+0x134>)
 800a74c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	b2da      	uxtb	r2, r3
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a756:	4b18      	ldr	r3, [pc, #96]	; (800a7b8 <xPortStartScheduler+0x138>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a17      	ldr	r2, [pc, #92]	; (800a7b8 <xPortStartScheduler+0x138>)
 800a75c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a760:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a762:	4b15      	ldr	r3, [pc, #84]	; (800a7b8 <xPortStartScheduler+0x138>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a14      	ldr	r2, [pc, #80]	; (800a7b8 <xPortStartScheduler+0x138>)
 800a768:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a76c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a76e:	f000 f8dd 	bl	800a92c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a772:	4b12      	ldr	r3, [pc, #72]	; (800a7bc <xPortStartScheduler+0x13c>)
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a778:	f000 f8fc 	bl	800a974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a77c:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <xPortStartScheduler+0x140>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a0f      	ldr	r2, [pc, #60]	; (800a7c0 <xPortStartScheduler+0x140>)
 800a782:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a786:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a788:	f7ff ff66 	bl	800a658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a78c:	f7fe ff4c 	bl	8009628 <vTaskSwitchContext>
	prvTaskExitError();
 800a790:	f7ff ff20 	bl	800a5d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3718      	adds	r7, #24
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	e000ed00 	.word	0xe000ed00
 800a7a4:	410fc271 	.word	0x410fc271
 800a7a8:	410fc270 	.word	0x410fc270
 800a7ac:	e000e400 	.word	0xe000e400
 800a7b0:	20004ab8 	.word	0x20004ab8
 800a7b4:	20004abc 	.word	0x20004abc
 800a7b8:	e000ed20 	.word	0xe000ed20
 800a7bc:	20000038 	.word	0x20000038
 800a7c0:	e000ef34 	.word	0xe000ef34

0800a7c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	607b      	str	r3, [r7, #4]
}
 800a7dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7de:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <vPortEnterCritical+0x58>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	4a0d      	ldr	r2, [pc, #52]	; (800a81c <vPortEnterCritical+0x58>)
 800a7e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7e8:	4b0c      	ldr	r3, [pc, #48]	; (800a81c <vPortEnterCritical+0x58>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d10f      	bne.n	800a810 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7f0:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <vPortEnterCritical+0x5c>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00a      	beq.n	800a810 <vPortEnterCritical+0x4c>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	603b      	str	r3, [r7, #0]
}
 800a80c:	bf00      	nop
 800a80e:	e7fe      	b.n	800a80e <vPortEnterCritical+0x4a>
	}
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	20000038 	.word	0x20000038
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a82a:	4b12      	ldr	r3, [pc, #72]	; (800a874 <vPortExitCritical+0x50>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10a      	bne.n	800a848 <vPortExitCritical+0x24>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	607b      	str	r3, [r7, #4]
}
 800a844:	bf00      	nop
 800a846:	e7fe      	b.n	800a846 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a848:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <vPortExitCritical+0x50>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	4a09      	ldr	r2, [pc, #36]	; (800a874 <vPortExitCritical+0x50>)
 800a850:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a852:	4b08      	ldr	r3, [pc, #32]	; (800a874 <vPortExitCritical+0x50>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d105      	bne.n	800a866 <vPortExitCritical+0x42>
 800a85a:	2300      	movs	r3, #0
 800a85c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	f383 8811 	msr	BASEPRI, r3
}
 800a864:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a866:	bf00      	nop
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	20000038 	.word	0x20000038
	...

0800a880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a880:	f3ef 8009 	mrs	r0, PSP
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	4b15      	ldr	r3, [pc, #84]	; (800a8e0 <pxCurrentTCBConst>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	f01e 0f10 	tst.w	lr, #16
 800a890:	bf08      	it	eq
 800a892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89a:	6010      	str	r0, [r2, #0]
 800a89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8a4:	f380 8811 	msr	BASEPRI, r0
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f7fe feba 	bl	8009628 <vTaskSwitchContext>
 800a8b4:	f04f 0000 	mov.w	r0, #0
 800a8b8:	f380 8811 	msr	BASEPRI, r0
 800a8bc:	bc09      	pop	{r0, r3}
 800a8be:	6819      	ldr	r1, [r3, #0]
 800a8c0:	6808      	ldr	r0, [r1, #0]
 800a8c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c6:	f01e 0f10 	tst.w	lr, #16
 800a8ca:	bf08      	it	eq
 800a8cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8d0:	f380 8809 	msr	PSP, r0
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	f3af 8000 	nop.w

0800a8e0 <pxCurrentTCBConst>:
 800a8e0:	200043ec 	.word	0x200043ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop

0800a8e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	607b      	str	r3, [r7, #4]
}
 800a900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a902:	f7fe fdcf 	bl	80094a4 <xTaskIncrementTick>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d003      	beq.n	800a914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a90c:	4b06      	ldr	r3, [pc, #24]	; (800a928 <xPortSysTickHandler+0x40>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	2300      	movs	r3, #0
 800a916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	f383 8811 	msr	BASEPRI, r3
}
 800a91e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	e000ed04 	.word	0xe000ed04

0800a92c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a930:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <vPortSetupTimerInterrupt+0x34>)
 800a932:	2200      	movs	r2, #0
 800a934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a936:	4b0b      	ldr	r3, [pc, #44]	; (800a964 <vPortSetupTimerInterrupt+0x38>)
 800a938:	2200      	movs	r2, #0
 800a93a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a93c:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <vPortSetupTimerInterrupt+0x3c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a0a      	ldr	r2, [pc, #40]	; (800a96c <vPortSetupTimerInterrupt+0x40>)
 800a942:	fba2 2303 	umull	r2, r3, r2, r3
 800a946:	099b      	lsrs	r3, r3, #6
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <vPortSetupTimerInterrupt+0x44>)
 800a94a:	3b01      	subs	r3, #1
 800a94c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a94e:	4b04      	ldr	r3, [pc, #16]	; (800a960 <vPortSetupTimerInterrupt+0x34>)
 800a950:	2207      	movs	r2, #7
 800a952:	601a      	str	r2, [r3, #0]
}
 800a954:	bf00      	nop
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	e000e010 	.word	0xe000e010
 800a964:	e000e018 	.word	0xe000e018
 800a968:	20000024 	.word	0x20000024
 800a96c:	10624dd3 	.word	0x10624dd3
 800a970:	e000e014 	.word	0xe000e014

0800a974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a974:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a984 <vPortEnableVFP+0x10>
 800a978:	6801      	ldr	r1, [r0, #0]
 800a97a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a97e:	6001      	str	r1, [r0, #0]
 800a980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a982:	bf00      	nop
 800a984:	e000ed88 	.word	0xe000ed88

0800a988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a98e:	f3ef 8305 	mrs	r3, IPSR
 800a992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b0f      	cmp	r3, #15
 800a998:	d914      	bls.n	800a9c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a99a:	4a17      	ldr	r2, [pc, #92]	; (800a9f8 <vPortValidateInterruptPriority+0x70>)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9a4:	4b15      	ldr	r3, [pc, #84]	; (800a9fc <vPortValidateInterruptPriority+0x74>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	7afa      	ldrb	r2, [r7, #11]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d20a      	bcs.n	800a9c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b2:	f383 8811 	msr	BASEPRI, r3
 800a9b6:	f3bf 8f6f 	isb	sy
 800a9ba:	f3bf 8f4f 	dsb	sy
 800a9be:	607b      	str	r3, [r7, #4]
}
 800a9c0:	bf00      	nop
 800a9c2:	e7fe      	b.n	800a9c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9c4:	4b0e      	ldr	r3, [pc, #56]	; (800aa00 <vPortValidateInterruptPriority+0x78>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <vPortValidateInterruptPriority+0x7c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d90a      	bls.n	800a9ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d8:	f383 8811 	msr	BASEPRI, r3
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f3bf 8f4f 	dsb	sy
 800a9e4:	603b      	str	r3, [r7, #0]
}
 800a9e6:	bf00      	nop
 800a9e8:	e7fe      	b.n	800a9e8 <vPortValidateInterruptPriority+0x60>
	}
 800a9ea:	bf00      	nop
 800a9ec:	3714      	adds	r7, #20
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	e000e3f0 	.word	0xe000e3f0
 800a9fc:	20004ab8 	.word	0x20004ab8
 800aa00:	e000ed0c 	.word	0xe000ed0c
 800aa04:	20004abc 	.word	0x20004abc

0800aa08 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d004      	beq.n	800aa28 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f023 0307 	bic.w	r3, r3, #7
 800aa24:	3308      	adds	r3, #8
 800aa26:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800aa28:	f7fe fc80 	bl	800932c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800aa2c:	4b16      	ldr	r3, [pc, #88]	; (800aa88 <pvPortMalloc+0x80>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d105      	bne.n	800aa40 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800aa34:	4b15      	ldr	r3, [pc, #84]	; (800aa8c <pvPortMalloc+0x84>)
 800aa36:	f023 0307 	bic.w	r3, r3, #7
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	4b12      	ldr	r3, [pc, #72]	; (800aa88 <pvPortMalloc+0x80>)
 800aa3e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800aa40:	4b13      	ldr	r3, [pc, #76]	; (800aa90 <pvPortMalloc+0x88>)
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4413      	add	r3, r2
 800aa48:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d813      	bhi.n	800aa78 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800aa50:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <pvPortMalloc+0x88>)
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	441a      	add	r2, r3
 800aa58:	4b0d      	ldr	r3, [pc, #52]	; (800aa90 <pvPortMalloc+0x88>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d90b      	bls.n	800aa78 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800aa60:	4b09      	ldr	r3, [pc, #36]	; (800aa88 <pvPortMalloc+0x80>)
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <pvPortMalloc+0x88>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4413      	add	r3, r2
 800aa6a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800aa6c:	4b08      	ldr	r3, [pc, #32]	; (800aa90 <pvPortMalloc+0x88>)
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4413      	add	r3, r2
 800aa74:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <pvPortMalloc+0x88>)
 800aa76:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa78:	f7fe fc66 	bl	8009348 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20006ac4 	.word	0x20006ac4
 800aa8c:	20004ac8 	.word	0x20004ac8
 800aa90:	20006ac0 	.word	0x20006ac0

0800aa94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <vPortFree+0x24>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	60fb      	str	r3, [r7, #12]
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <vPortFree+0x22>
}
 800aab8:	bf00      	nop
 800aaba:	3714      	adds	r7, #20
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <malloc>:
 800aac4:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <malloc+0xc>)
 800aac6:	4601      	mov	r1, r0
 800aac8:	6818      	ldr	r0, [r3, #0]
 800aaca:	f000 b82b 	b.w	800ab24 <_malloc_r>
 800aace:	bf00      	nop
 800aad0:	20000088 	.word	0x20000088

0800aad4 <free>:
 800aad4:	4b02      	ldr	r3, [pc, #8]	; (800aae0 <free+0xc>)
 800aad6:	4601      	mov	r1, r0
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	f000 b98b 	b.w	800adf4 <_free_r>
 800aade:	bf00      	nop
 800aae0:	20000088 	.word	0x20000088

0800aae4 <sbrk_aligned>:
 800aae4:	b570      	push	{r4, r5, r6, lr}
 800aae6:	4e0e      	ldr	r6, [pc, #56]	; (800ab20 <sbrk_aligned+0x3c>)
 800aae8:	460c      	mov	r4, r1
 800aaea:	6831      	ldr	r1, [r6, #0]
 800aaec:	4605      	mov	r5, r0
 800aaee:	b911      	cbnz	r1, 800aaf6 <sbrk_aligned+0x12>
 800aaf0:	f000 f936 	bl	800ad60 <_sbrk_r>
 800aaf4:	6030      	str	r0, [r6, #0]
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 f931 	bl	800ad60 <_sbrk_r>
 800aafe:	1c43      	adds	r3, r0, #1
 800ab00:	d00a      	beq.n	800ab18 <sbrk_aligned+0x34>
 800ab02:	1cc4      	adds	r4, r0, #3
 800ab04:	f024 0403 	bic.w	r4, r4, #3
 800ab08:	42a0      	cmp	r0, r4
 800ab0a:	d007      	beq.n	800ab1c <sbrk_aligned+0x38>
 800ab0c:	1a21      	subs	r1, r4, r0
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f000 f926 	bl	800ad60 <_sbrk_r>
 800ab14:	3001      	adds	r0, #1
 800ab16:	d101      	bne.n	800ab1c <sbrk_aligned+0x38>
 800ab18:	f04f 34ff 	mov.w	r4, #4294967295
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}
 800ab20:	20006acc 	.word	0x20006acc

0800ab24 <_malloc_r>:
 800ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	1ccd      	adds	r5, r1, #3
 800ab2a:	f025 0503 	bic.w	r5, r5, #3
 800ab2e:	3508      	adds	r5, #8
 800ab30:	2d0c      	cmp	r5, #12
 800ab32:	bf38      	it	cc
 800ab34:	250c      	movcc	r5, #12
 800ab36:	2d00      	cmp	r5, #0
 800ab38:	4607      	mov	r7, r0
 800ab3a:	db01      	blt.n	800ab40 <_malloc_r+0x1c>
 800ab3c:	42a9      	cmp	r1, r5
 800ab3e:	d905      	bls.n	800ab4c <_malloc_r+0x28>
 800ab40:	230c      	movs	r3, #12
 800ab42:	603b      	str	r3, [r7, #0]
 800ab44:	2600      	movs	r6, #0
 800ab46:	4630      	mov	r0, r6
 800ab48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac20 <_malloc_r+0xfc>
 800ab50:	f000 f868 	bl	800ac24 <__malloc_lock>
 800ab54:	f8d8 3000 	ldr.w	r3, [r8]
 800ab58:	461c      	mov	r4, r3
 800ab5a:	bb5c      	cbnz	r4, 800abb4 <_malloc_r+0x90>
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7ff ffc0 	bl	800aae4 <sbrk_aligned>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	4604      	mov	r4, r0
 800ab68:	d155      	bne.n	800ac16 <_malloc_r+0xf2>
 800ab6a:	f8d8 4000 	ldr.w	r4, [r8]
 800ab6e:	4626      	mov	r6, r4
 800ab70:	2e00      	cmp	r6, #0
 800ab72:	d145      	bne.n	800ac00 <_malloc_r+0xdc>
 800ab74:	2c00      	cmp	r4, #0
 800ab76:	d048      	beq.n	800ac0a <_malloc_r+0xe6>
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	eb04 0903 	add.w	r9, r4, r3
 800ab82:	f000 f8ed 	bl	800ad60 <_sbrk_r>
 800ab86:	4581      	cmp	r9, r0
 800ab88:	d13f      	bne.n	800ac0a <_malloc_r+0xe6>
 800ab8a:	6821      	ldr	r1, [r4, #0]
 800ab8c:	1a6d      	subs	r5, r5, r1
 800ab8e:	4629      	mov	r1, r5
 800ab90:	4638      	mov	r0, r7
 800ab92:	f7ff ffa7 	bl	800aae4 <sbrk_aligned>
 800ab96:	3001      	adds	r0, #1
 800ab98:	d037      	beq.n	800ac0a <_malloc_r+0xe6>
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	442b      	add	r3, r5
 800ab9e:	6023      	str	r3, [r4, #0]
 800aba0:	f8d8 3000 	ldr.w	r3, [r8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d038      	beq.n	800ac1a <_malloc_r+0xf6>
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	42a2      	cmp	r2, r4
 800abac:	d12b      	bne.n	800ac06 <_malloc_r+0xe2>
 800abae:	2200      	movs	r2, #0
 800abb0:	605a      	str	r2, [r3, #4]
 800abb2:	e00f      	b.n	800abd4 <_malloc_r+0xb0>
 800abb4:	6822      	ldr	r2, [r4, #0]
 800abb6:	1b52      	subs	r2, r2, r5
 800abb8:	d41f      	bmi.n	800abfa <_malloc_r+0xd6>
 800abba:	2a0b      	cmp	r2, #11
 800abbc:	d917      	bls.n	800abee <_malloc_r+0xca>
 800abbe:	1961      	adds	r1, r4, r5
 800abc0:	42a3      	cmp	r3, r4
 800abc2:	6025      	str	r5, [r4, #0]
 800abc4:	bf18      	it	ne
 800abc6:	6059      	strne	r1, [r3, #4]
 800abc8:	6863      	ldr	r3, [r4, #4]
 800abca:	bf08      	it	eq
 800abcc:	f8c8 1000 	streq.w	r1, [r8]
 800abd0:	5162      	str	r2, [r4, r5]
 800abd2:	604b      	str	r3, [r1, #4]
 800abd4:	4638      	mov	r0, r7
 800abd6:	f104 060b 	add.w	r6, r4, #11
 800abda:	f000 f829 	bl	800ac30 <__malloc_unlock>
 800abde:	f026 0607 	bic.w	r6, r6, #7
 800abe2:	1d23      	adds	r3, r4, #4
 800abe4:	1af2      	subs	r2, r6, r3
 800abe6:	d0ae      	beq.n	800ab46 <_malloc_r+0x22>
 800abe8:	1b9b      	subs	r3, r3, r6
 800abea:	50a3      	str	r3, [r4, r2]
 800abec:	e7ab      	b.n	800ab46 <_malloc_r+0x22>
 800abee:	42a3      	cmp	r3, r4
 800abf0:	6862      	ldr	r2, [r4, #4]
 800abf2:	d1dd      	bne.n	800abb0 <_malloc_r+0x8c>
 800abf4:	f8c8 2000 	str.w	r2, [r8]
 800abf8:	e7ec      	b.n	800abd4 <_malloc_r+0xb0>
 800abfa:	4623      	mov	r3, r4
 800abfc:	6864      	ldr	r4, [r4, #4]
 800abfe:	e7ac      	b.n	800ab5a <_malloc_r+0x36>
 800ac00:	4634      	mov	r4, r6
 800ac02:	6876      	ldr	r6, [r6, #4]
 800ac04:	e7b4      	b.n	800ab70 <_malloc_r+0x4c>
 800ac06:	4613      	mov	r3, r2
 800ac08:	e7cc      	b.n	800aba4 <_malloc_r+0x80>
 800ac0a:	230c      	movs	r3, #12
 800ac0c:	603b      	str	r3, [r7, #0]
 800ac0e:	4638      	mov	r0, r7
 800ac10:	f000 f80e 	bl	800ac30 <__malloc_unlock>
 800ac14:	e797      	b.n	800ab46 <_malloc_r+0x22>
 800ac16:	6025      	str	r5, [r4, #0]
 800ac18:	e7dc      	b.n	800abd4 <_malloc_r+0xb0>
 800ac1a:	605b      	str	r3, [r3, #4]
 800ac1c:	deff      	udf	#255	; 0xff
 800ac1e:	bf00      	nop
 800ac20:	20006ac8 	.word	0x20006ac8

0800ac24 <__malloc_lock>:
 800ac24:	4801      	ldr	r0, [pc, #4]	; (800ac2c <__malloc_lock+0x8>)
 800ac26:	f000 b8d5 	b.w	800add4 <__retarget_lock_acquire_recursive>
 800ac2a:	bf00      	nop
 800ac2c:	20006c0c 	.word	0x20006c0c

0800ac30 <__malloc_unlock>:
 800ac30:	4801      	ldr	r0, [pc, #4]	; (800ac38 <__malloc_unlock+0x8>)
 800ac32:	f000 b8d0 	b.w	800add6 <__retarget_lock_release_recursive>
 800ac36:	bf00      	nop
 800ac38:	20006c0c 	.word	0x20006c0c

0800ac3c <sniprintf>:
 800ac3c:	b40c      	push	{r2, r3}
 800ac3e:	b530      	push	{r4, r5, lr}
 800ac40:	4b17      	ldr	r3, [pc, #92]	; (800aca0 <sniprintf+0x64>)
 800ac42:	1e0c      	subs	r4, r1, #0
 800ac44:	681d      	ldr	r5, [r3, #0]
 800ac46:	b09d      	sub	sp, #116	; 0x74
 800ac48:	da08      	bge.n	800ac5c <sniprintf+0x20>
 800ac4a:	238b      	movs	r3, #139	; 0x8b
 800ac4c:	602b      	str	r3, [r5, #0]
 800ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac52:	b01d      	add	sp, #116	; 0x74
 800ac54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac58:	b002      	add	sp, #8
 800ac5a:	4770      	bx	lr
 800ac5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ac60:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ac64:	bf14      	ite	ne
 800ac66:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ac6a:	4623      	moveq	r3, r4
 800ac6c:	9304      	str	r3, [sp, #16]
 800ac6e:	9307      	str	r3, [sp, #28]
 800ac70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac74:	9002      	str	r0, [sp, #8]
 800ac76:	9006      	str	r0, [sp, #24]
 800ac78:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac7e:	ab21      	add	r3, sp, #132	; 0x84
 800ac80:	a902      	add	r1, sp, #8
 800ac82:	4628      	mov	r0, r5
 800ac84:	9301      	str	r3, [sp, #4]
 800ac86:	f000 f95b 	bl	800af40 <_svfiprintf_r>
 800ac8a:	1c43      	adds	r3, r0, #1
 800ac8c:	bfbc      	itt	lt
 800ac8e:	238b      	movlt	r3, #139	; 0x8b
 800ac90:	602b      	strlt	r3, [r5, #0]
 800ac92:	2c00      	cmp	r4, #0
 800ac94:	d0dd      	beq.n	800ac52 <sniprintf+0x16>
 800ac96:	9b02      	ldr	r3, [sp, #8]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	701a      	strb	r2, [r3, #0]
 800ac9c:	e7d9      	b.n	800ac52 <sniprintf+0x16>
 800ac9e:	bf00      	nop
 800aca0:	20000088 	.word	0x20000088

0800aca4 <memset>:
 800aca4:	4402      	add	r2, r0
 800aca6:	4603      	mov	r3, r0
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d100      	bne.n	800acae <memset+0xa>
 800acac:	4770      	bx	lr
 800acae:	f803 1b01 	strb.w	r1, [r3], #1
 800acb2:	e7f9      	b.n	800aca8 <memset+0x4>

0800acb4 <_reclaim_reent>:
 800acb4:	4b29      	ldr	r3, [pc, #164]	; (800ad5c <_reclaim_reent+0xa8>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4283      	cmp	r3, r0
 800acba:	b570      	push	{r4, r5, r6, lr}
 800acbc:	4604      	mov	r4, r0
 800acbe:	d04b      	beq.n	800ad58 <_reclaim_reent+0xa4>
 800acc0:	69c3      	ldr	r3, [r0, #28]
 800acc2:	b143      	cbz	r3, 800acd6 <_reclaim_reent+0x22>
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d144      	bne.n	800ad54 <_reclaim_reent+0xa0>
 800acca:	69e3      	ldr	r3, [r4, #28]
 800accc:	6819      	ldr	r1, [r3, #0]
 800acce:	b111      	cbz	r1, 800acd6 <_reclaim_reent+0x22>
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 f88f 	bl	800adf4 <_free_r>
 800acd6:	6961      	ldr	r1, [r4, #20]
 800acd8:	b111      	cbz	r1, 800ace0 <_reclaim_reent+0x2c>
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 f88a 	bl	800adf4 <_free_r>
 800ace0:	69e1      	ldr	r1, [r4, #28]
 800ace2:	b111      	cbz	r1, 800acea <_reclaim_reent+0x36>
 800ace4:	4620      	mov	r0, r4
 800ace6:	f000 f885 	bl	800adf4 <_free_r>
 800acea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800acec:	b111      	cbz	r1, 800acf4 <_reclaim_reent+0x40>
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 f880 	bl	800adf4 <_free_r>
 800acf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acf6:	b111      	cbz	r1, 800acfe <_reclaim_reent+0x4a>
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 f87b 	bl	800adf4 <_free_r>
 800acfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ad00:	b111      	cbz	r1, 800ad08 <_reclaim_reent+0x54>
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 f876 	bl	800adf4 <_free_r>
 800ad08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad0a:	b111      	cbz	r1, 800ad12 <_reclaim_reent+0x5e>
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f000 f871 	bl	800adf4 <_free_r>
 800ad12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ad14:	b111      	cbz	r1, 800ad1c <_reclaim_reent+0x68>
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 f86c 	bl	800adf4 <_free_r>
 800ad1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ad1e:	b111      	cbz	r1, 800ad26 <_reclaim_reent+0x72>
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 f867 	bl	800adf4 <_free_r>
 800ad26:	6a23      	ldr	r3, [r4, #32]
 800ad28:	b1b3      	cbz	r3, 800ad58 <_reclaim_reent+0xa4>
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad30:	4718      	bx	r3
 800ad32:	5949      	ldr	r1, [r1, r5]
 800ad34:	b941      	cbnz	r1, 800ad48 <_reclaim_reent+0x94>
 800ad36:	3504      	adds	r5, #4
 800ad38:	69e3      	ldr	r3, [r4, #28]
 800ad3a:	2d80      	cmp	r5, #128	; 0x80
 800ad3c:	68d9      	ldr	r1, [r3, #12]
 800ad3e:	d1f8      	bne.n	800ad32 <_reclaim_reent+0x7e>
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 f857 	bl	800adf4 <_free_r>
 800ad46:	e7c0      	b.n	800acca <_reclaim_reent+0x16>
 800ad48:	680e      	ldr	r6, [r1, #0]
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 f852 	bl	800adf4 <_free_r>
 800ad50:	4631      	mov	r1, r6
 800ad52:	e7ef      	b.n	800ad34 <_reclaim_reent+0x80>
 800ad54:	2500      	movs	r5, #0
 800ad56:	e7ef      	b.n	800ad38 <_reclaim_reent+0x84>
 800ad58:	bd70      	pop	{r4, r5, r6, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000088 	.word	0x20000088

0800ad60 <_sbrk_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d06      	ldr	r5, [pc, #24]	; (800ad7c <_sbrk_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f6 fec2 	bl	8001af4 <_sbrk>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_sbrk_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_sbrk_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	20006c08 	.word	0x20006c08

0800ad80 <__errno>:
 800ad80:	4b01      	ldr	r3, [pc, #4]	; (800ad88 <__errno+0x8>)
 800ad82:	6818      	ldr	r0, [r3, #0]
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	20000088 	.word	0x20000088

0800ad8c <__libc_init_array>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	4d0d      	ldr	r5, [pc, #52]	; (800adc4 <__libc_init_array+0x38>)
 800ad90:	4c0d      	ldr	r4, [pc, #52]	; (800adc8 <__libc_init_array+0x3c>)
 800ad92:	1b64      	subs	r4, r4, r5
 800ad94:	10a4      	asrs	r4, r4, #2
 800ad96:	2600      	movs	r6, #0
 800ad98:	42a6      	cmp	r6, r4
 800ad9a:	d109      	bne.n	800adb0 <__libc_init_array+0x24>
 800ad9c:	4d0b      	ldr	r5, [pc, #44]	; (800adcc <__libc_init_array+0x40>)
 800ad9e:	4c0c      	ldr	r4, [pc, #48]	; (800add0 <__libc_init_array+0x44>)
 800ada0:	f000 fbae 	bl	800b500 <_init>
 800ada4:	1b64      	subs	r4, r4, r5
 800ada6:	10a4      	asrs	r4, r4, #2
 800ada8:	2600      	movs	r6, #0
 800adaa:	42a6      	cmp	r6, r4
 800adac:	d105      	bne.n	800adba <__libc_init_array+0x2e>
 800adae:	bd70      	pop	{r4, r5, r6, pc}
 800adb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb4:	4798      	blx	r3
 800adb6:	3601      	adds	r6, #1
 800adb8:	e7ee      	b.n	800ad98 <__libc_init_array+0xc>
 800adba:	f855 3b04 	ldr.w	r3, [r5], #4
 800adbe:	4798      	blx	r3
 800adc0:	3601      	adds	r6, #1
 800adc2:	e7f2      	b.n	800adaa <__libc_init_array+0x1e>
 800adc4:	0800bf84 	.word	0x0800bf84
 800adc8:	0800bf84 	.word	0x0800bf84
 800adcc:	0800bf84 	.word	0x0800bf84
 800add0:	0800bf88 	.word	0x0800bf88

0800add4 <__retarget_lock_acquire_recursive>:
 800add4:	4770      	bx	lr

0800add6 <__retarget_lock_release_recursive>:
 800add6:	4770      	bx	lr

0800add8 <memcpy>:
 800add8:	440a      	add	r2, r1
 800adda:	4291      	cmp	r1, r2
 800addc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ade0:	d100      	bne.n	800ade4 <memcpy+0xc>
 800ade2:	4770      	bx	lr
 800ade4:	b510      	push	{r4, lr}
 800ade6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adee:	4291      	cmp	r1, r2
 800adf0:	d1f9      	bne.n	800ade6 <memcpy+0xe>
 800adf2:	bd10      	pop	{r4, pc}

0800adf4 <_free_r>:
 800adf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adf6:	2900      	cmp	r1, #0
 800adf8:	d044      	beq.n	800ae84 <_free_r+0x90>
 800adfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfe:	9001      	str	r0, [sp, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f1a1 0404 	sub.w	r4, r1, #4
 800ae06:	bfb8      	it	lt
 800ae08:	18e4      	addlt	r4, r4, r3
 800ae0a:	f7ff ff0b 	bl	800ac24 <__malloc_lock>
 800ae0e:	4a1e      	ldr	r2, [pc, #120]	; (800ae88 <_free_r+0x94>)
 800ae10:	9801      	ldr	r0, [sp, #4]
 800ae12:	6813      	ldr	r3, [r2, #0]
 800ae14:	b933      	cbnz	r3, 800ae24 <_free_r+0x30>
 800ae16:	6063      	str	r3, [r4, #4]
 800ae18:	6014      	str	r4, [r2, #0]
 800ae1a:	b003      	add	sp, #12
 800ae1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae20:	f7ff bf06 	b.w	800ac30 <__malloc_unlock>
 800ae24:	42a3      	cmp	r3, r4
 800ae26:	d908      	bls.n	800ae3a <_free_r+0x46>
 800ae28:	6825      	ldr	r5, [r4, #0]
 800ae2a:	1961      	adds	r1, r4, r5
 800ae2c:	428b      	cmp	r3, r1
 800ae2e:	bf01      	itttt	eq
 800ae30:	6819      	ldreq	r1, [r3, #0]
 800ae32:	685b      	ldreq	r3, [r3, #4]
 800ae34:	1949      	addeq	r1, r1, r5
 800ae36:	6021      	streq	r1, [r4, #0]
 800ae38:	e7ed      	b.n	800ae16 <_free_r+0x22>
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	b10b      	cbz	r3, 800ae44 <_free_r+0x50>
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	d9fa      	bls.n	800ae3a <_free_r+0x46>
 800ae44:	6811      	ldr	r1, [r2, #0]
 800ae46:	1855      	adds	r5, r2, r1
 800ae48:	42a5      	cmp	r5, r4
 800ae4a:	d10b      	bne.n	800ae64 <_free_r+0x70>
 800ae4c:	6824      	ldr	r4, [r4, #0]
 800ae4e:	4421      	add	r1, r4
 800ae50:	1854      	adds	r4, r2, r1
 800ae52:	42a3      	cmp	r3, r4
 800ae54:	6011      	str	r1, [r2, #0]
 800ae56:	d1e0      	bne.n	800ae1a <_free_r+0x26>
 800ae58:	681c      	ldr	r4, [r3, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	6053      	str	r3, [r2, #4]
 800ae5e:	440c      	add	r4, r1
 800ae60:	6014      	str	r4, [r2, #0]
 800ae62:	e7da      	b.n	800ae1a <_free_r+0x26>
 800ae64:	d902      	bls.n	800ae6c <_free_r+0x78>
 800ae66:	230c      	movs	r3, #12
 800ae68:	6003      	str	r3, [r0, #0]
 800ae6a:	e7d6      	b.n	800ae1a <_free_r+0x26>
 800ae6c:	6825      	ldr	r5, [r4, #0]
 800ae6e:	1961      	adds	r1, r4, r5
 800ae70:	428b      	cmp	r3, r1
 800ae72:	bf04      	itt	eq
 800ae74:	6819      	ldreq	r1, [r3, #0]
 800ae76:	685b      	ldreq	r3, [r3, #4]
 800ae78:	6063      	str	r3, [r4, #4]
 800ae7a:	bf04      	itt	eq
 800ae7c:	1949      	addeq	r1, r1, r5
 800ae7e:	6021      	streq	r1, [r4, #0]
 800ae80:	6054      	str	r4, [r2, #4]
 800ae82:	e7ca      	b.n	800ae1a <_free_r+0x26>
 800ae84:	b003      	add	sp, #12
 800ae86:	bd30      	pop	{r4, r5, pc}
 800ae88:	20006ac8 	.word	0x20006ac8

0800ae8c <__ssputs_r>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	688e      	ldr	r6, [r1, #8]
 800ae92:	461f      	mov	r7, r3
 800ae94:	42be      	cmp	r6, r7
 800ae96:	680b      	ldr	r3, [r1, #0]
 800ae98:	4682      	mov	sl, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	4690      	mov	r8, r2
 800ae9e:	d82c      	bhi.n	800aefa <__ssputs_r+0x6e>
 800aea0:	898a      	ldrh	r2, [r1, #12]
 800aea2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aea6:	d026      	beq.n	800aef6 <__ssputs_r+0x6a>
 800aea8:	6965      	ldr	r5, [r4, #20]
 800aeaa:	6909      	ldr	r1, [r1, #16]
 800aeac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeb0:	eba3 0901 	sub.w	r9, r3, r1
 800aeb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeb8:	1c7b      	adds	r3, r7, #1
 800aeba:	444b      	add	r3, r9
 800aebc:	106d      	asrs	r5, r5, #1
 800aebe:	429d      	cmp	r5, r3
 800aec0:	bf38      	it	cc
 800aec2:	461d      	movcc	r5, r3
 800aec4:	0553      	lsls	r3, r2, #21
 800aec6:	d527      	bpl.n	800af18 <__ssputs_r+0x8c>
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7ff fe2b 	bl	800ab24 <_malloc_r>
 800aece:	4606      	mov	r6, r0
 800aed0:	b360      	cbz	r0, 800af2c <__ssputs_r+0xa0>
 800aed2:	6921      	ldr	r1, [r4, #16]
 800aed4:	464a      	mov	r2, r9
 800aed6:	f7ff ff7f 	bl	800add8 <memcpy>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	6126      	str	r6, [r4, #16]
 800aee8:	6165      	str	r5, [r4, #20]
 800aeea:	444e      	add	r6, r9
 800aeec:	eba5 0509 	sub.w	r5, r5, r9
 800aef0:	6026      	str	r6, [r4, #0]
 800aef2:	60a5      	str	r5, [r4, #8]
 800aef4:	463e      	mov	r6, r7
 800aef6:	42be      	cmp	r6, r7
 800aef8:	d900      	bls.n	800aefc <__ssputs_r+0x70>
 800aefa:	463e      	mov	r6, r7
 800aefc:	6820      	ldr	r0, [r4, #0]
 800aefe:	4632      	mov	r2, r6
 800af00:	4641      	mov	r1, r8
 800af02:	f000 faab 	bl	800b45c <memmove>
 800af06:	68a3      	ldr	r3, [r4, #8]
 800af08:	1b9b      	subs	r3, r3, r6
 800af0a:	60a3      	str	r3, [r4, #8]
 800af0c:	6823      	ldr	r3, [r4, #0]
 800af0e:	4433      	add	r3, r6
 800af10:	6023      	str	r3, [r4, #0]
 800af12:	2000      	movs	r0, #0
 800af14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af18:	462a      	mov	r2, r5
 800af1a:	f000 fab9 	bl	800b490 <_realloc_r>
 800af1e:	4606      	mov	r6, r0
 800af20:	2800      	cmp	r0, #0
 800af22:	d1e0      	bne.n	800aee6 <__ssputs_r+0x5a>
 800af24:	6921      	ldr	r1, [r4, #16]
 800af26:	4650      	mov	r0, sl
 800af28:	f7ff ff64 	bl	800adf4 <_free_r>
 800af2c:	230c      	movs	r3, #12
 800af2e:	f8ca 3000 	str.w	r3, [sl]
 800af32:	89a3      	ldrh	r3, [r4, #12]
 800af34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	f04f 30ff 	mov.w	r0, #4294967295
 800af3e:	e7e9      	b.n	800af14 <__ssputs_r+0x88>

0800af40 <_svfiprintf_r>:
 800af40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	4698      	mov	r8, r3
 800af46:	898b      	ldrh	r3, [r1, #12]
 800af48:	061b      	lsls	r3, r3, #24
 800af4a:	b09d      	sub	sp, #116	; 0x74
 800af4c:	4607      	mov	r7, r0
 800af4e:	460d      	mov	r5, r1
 800af50:	4614      	mov	r4, r2
 800af52:	d50e      	bpl.n	800af72 <_svfiprintf_r+0x32>
 800af54:	690b      	ldr	r3, [r1, #16]
 800af56:	b963      	cbnz	r3, 800af72 <_svfiprintf_r+0x32>
 800af58:	2140      	movs	r1, #64	; 0x40
 800af5a:	f7ff fde3 	bl	800ab24 <_malloc_r>
 800af5e:	6028      	str	r0, [r5, #0]
 800af60:	6128      	str	r0, [r5, #16]
 800af62:	b920      	cbnz	r0, 800af6e <_svfiprintf_r+0x2e>
 800af64:	230c      	movs	r3, #12
 800af66:	603b      	str	r3, [r7, #0]
 800af68:	f04f 30ff 	mov.w	r0, #4294967295
 800af6c:	e0d0      	b.n	800b110 <_svfiprintf_r+0x1d0>
 800af6e:	2340      	movs	r3, #64	; 0x40
 800af70:	616b      	str	r3, [r5, #20]
 800af72:	2300      	movs	r3, #0
 800af74:	9309      	str	r3, [sp, #36]	; 0x24
 800af76:	2320      	movs	r3, #32
 800af78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af80:	2330      	movs	r3, #48	; 0x30
 800af82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b128 <_svfiprintf_r+0x1e8>
 800af86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af8a:	f04f 0901 	mov.w	r9, #1
 800af8e:	4623      	mov	r3, r4
 800af90:	469a      	mov	sl, r3
 800af92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af96:	b10a      	cbz	r2, 800af9c <_svfiprintf_r+0x5c>
 800af98:	2a25      	cmp	r2, #37	; 0x25
 800af9a:	d1f9      	bne.n	800af90 <_svfiprintf_r+0x50>
 800af9c:	ebba 0b04 	subs.w	fp, sl, r4
 800afa0:	d00b      	beq.n	800afba <_svfiprintf_r+0x7a>
 800afa2:	465b      	mov	r3, fp
 800afa4:	4622      	mov	r2, r4
 800afa6:	4629      	mov	r1, r5
 800afa8:	4638      	mov	r0, r7
 800afaa:	f7ff ff6f 	bl	800ae8c <__ssputs_r>
 800afae:	3001      	adds	r0, #1
 800afb0:	f000 80a9 	beq.w	800b106 <_svfiprintf_r+0x1c6>
 800afb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb6:	445a      	add	r2, fp
 800afb8:	9209      	str	r2, [sp, #36]	; 0x24
 800afba:	f89a 3000 	ldrb.w	r3, [sl]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 80a1 	beq.w	800b106 <_svfiprintf_r+0x1c6>
 800afc4:	2300      	movs	r3, #0
 800afc6:	f04f 32ff 	mov.w	r2, #4294967295
 800afca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afce:	f10a 0a01 	add.w	sl, sl, #1
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	9307      	str	r3, [sp, #28]
 800afd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afda:	931a      	str	r3, [sp, #104]	; 0x68
 800afdc:	4654      	mov	r4, sl
 800afde:	2205      	movs	r2, #5
 800afe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe4:	4850      	ldr	r0, [pc, #320]	; (800b128 <_svfiprintf_r+0x1e8>)
 800afe6:	f7f5 f8f3 	bl	80001d0 <memchr>
 800afea:	9a04      	ldr	r2, [sp, #16]
 800afec:	b9d8      	cbnz	r0, 800b026 <_svfiprintf_r+0xe6>
 800afee:	06d0      	lsls	r0, r2, #27
 800aff0:	bf44      	itt	mi
 800aff2:	2320      	movmi	r3, #32
 800aff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff8:	0711      	lsls	r1, r2, #28
 800affa:	bf44      	itt	mi
 800affc:	232b      	movmi	r3, #43	; 0x2b
 800affe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b002:	f89a 3000 	ldrb.w	r3, [sl]
 800b006:	2b2a      	cmp	r3, #42	; 0x2a
 800b008:	d015      	beq.n	800b036 <_svfiprintf_r+0xf6>
 800b00a:	9a07      	ldr	r2, [sp, #28]
 800b00c:	4654      	mov	r4, sl
 800b00e:	2000      	movs	r0, #0
 800b010:	f04f 0c0a 	mov.w	ip, #10
 800b014:	4621      	mov	r1, r4
 800b016:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b01a:	3b30      	subs	r3, #48	; 0x30
 800b01c:	2b09      	cmp	r3, #9
 800b01e:	d94d      	bls.n	800b0bc <_svfiprintf_r+0x17c>
 800b020:	b1b0      	cbz	r0, 800b050 <_svfiprintf_r+0x110>
 800b022:	9207      	str	r2, [sp, #28]
 800b024:	e014      	b.n	800b050 <_svfiprintf_r+0x110>
 800b026:	eba0 0308 	sub.w	r3, r0, r8
 800b02a:	fa09 f303 	lsl.w	r3, r9, r3
 800b02e:	4313      	orrs	r3, r2
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	46a2      	mov	sl, r4
 800b034:	e7d2      	b.n	800afdc <_svfiprintf_r+0x9c>
 800b036:	9b03      	ldr	r3, [sp, #12]
 800b038:	1d19      	adds	r1, r3, #4
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	9103      	str	r1, [sp, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bfbb      	ittet	lt
 800b042:	425b      	neglt	r3, r3
 800b044:	f042 0202 	orrlt.w	r2, r2, #2
 800b048:	9307      	strge	r3, [sp, #28]
 800b04a:	9307      	strlt	r3, [sp, #28]
 800b04c:	bfb8      	it	lt
 800b04e:	9204      	strlt	r2, [sp, #16]
 800b050:	7823      	ldrb	r3, [r4, #0]
 800b052:	2b2e      	cmp	r3, #46	; 0x2e
 800b054:	d10c      	bne.n	800b070 <_svfiprintf_r+0x130>
 800b056:	7863      	ldrb	r3, [r4, #1]
 800b058:	2b2a      	cmp	r3, #42	; 0x2a
 800b05a:	d134      	bne.n	800b0c6 <_svfiprintf_r+0x186>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	1d1a      	adds	r2, r3, #4
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	9203      	str	r2, [sp, #12]
 800b064:	2b00      	cmp	r3, #0
 800b066:	bfb8      	it	lt
 800b068:	f04f 33ff 	movlt.w	r3, #4294967295
 800b06c:	3402      	adds	r4, #2
 800b06e:	9305      	str	r3, [sp, #20]
 800b070:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b138 <_svfiprintf_r+0x1f8>
 800b074:	7821      	ldrb	r1, [r4, #0]
 800b076:	2203      	movs	r2, #3
 800b078:	4650      	mov	r0, sl
 800b07a:	f7f5 f8a9 	bl	80001d0 <memchr>
 800b07e:	b138      	cbz	r0, 800b090 <_svfiprintf_r+0x150>
 800b080:	9b04      	ldr	r3, [sp, #16]
 800b082:	eba0 000a 	sub.w	r0, r0, sl
 800b086:	2240      	movs	r2, #64	; 0x40
 800b088:	4082      	lsls	r2, r0
 800b08a:	4313      	orrs	r3, r2
 800b08c:	3401      	adds	r4, #1
 800b08e:	9304      	str	r3, [sp, #16]
 800b090:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b094:	4825      	ldr	r0, [pc, #148]	; (800b12c <_svfiprintf_r+0x1ec>)
 800b096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b09a:	2206      	movs	r2, #6
 800b09c:	f7f5 f898 	bl	80001d0 <memchr>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d038      	beq.n	800b116 <_svfiprintf_r+0x1d6>
 800b0a4:	4b22      	ldr	r3, [pc, #136]	; (800b130 <_svfiprintf_r+0x1f0>)
 800b0a6:	bb1b      	cbnz	r3, 800b0f0 <_svfiprintf_r+0x1b0>
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	3307      	adds	r3, #7
 800b0ac:	f023 0307 	bic.w	r3, r3, #7
 800b0b0:	3308      	adds	r3, #8
 800b0b2:	9303      	str	r3, [sp, #12]
 800b0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b6:	4433      	add	r3, r6
 800b0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ba:	e768      	b.n	800af8e <_svfiprintf_r+0x4e>
 800b0bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	e7a6      	b.n	800b014 <_svfiprintf_r+0xd4>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	3401      	adds	r4, #1
 800b0ca:	9305      	str	r3, [sp, #20]
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	f04f 0c0a 	mov.w	ip, #10
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0d8:	3a30      	subs	r2, #48	; 0x30
 800b0da:	2a09      	cmp	r2, #9
 800b0dc:	d903      	bls.n	800b0e6 <_svfiprintf_r+0x1a6>
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d0c6      	beq.n	800b070 <_svfiprintf_r+0x130>
 800b0e2:	9105      	str	r1, [sp, #20]
 800b0e4:	e7c4      	b.n	800b070 <_svfiprintf_r+0x130>
 800b0e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ea:	4604      	mov	r4, r0
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e7f0      	b.n	800b0d2 <_svfiprintf_r+0x192>
 800b0f0:	ab03      	add	r3, sp, #12
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	462a      	mov	r2, r5
 800b0f6:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <_svfiprintf_r+0x1f4>)
 800b0f8:	a904      	add	r1, sp, #16
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	f3af 8000 	nop.w
 800b100:	1c42      	adds	r2, r0, #1
 800b102:	4606      	mov	r6, r0
 800b104:	d1d6      	bne.n	800b0b4 <_svfiprintf_r+0x174>
 800b106:	89ab      	ldrh	r3, [r5, #12]
 800b108:	065b      	lsls	r3, r3, #25
 800b10a:	f53f af2d 	bmi.w	800af68 <_svfiprintf_r+0x28>
 800b10e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b110:	b01d      	add	sp, #116	; 0x74
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	ab03      	add	r3, sp, #12
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	462a      	mov	r2, r5
 800b11c:	4b05      	ldr	r3, [pc, #20]	; (800b134 <_svfiprintf_r+0x1f4>)
 800b11e:	a904      	add	r1, sp, #16
 800b120:	4638      	mov	r0, r7
 800b122:	f000 f879 	bl	800b218 <_printf_i>
 800b126:	e7eb      	b.n	800b100 <_svfiprintf_r+0x1c0>
 800b128:	0800bf48 	.word	0x0800bf48
 800b12c:	0800bf52 	.word	0x0800bf52
 800b130:	00000000 	.word	0x00000000
 800b134:	0800ae8d 	.word	0x0800ae8d
 800b138:	0800bf4e 	.word	0x0800bf4e

0800b13c <_printf_common>:
 800b13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b140:	4616      	mov	r6, r2
 800b142:	4699      	mov	r9, r3
 800b144:	688a      	ldr	r2, [r1, #8]
 800b146:	690b      	ldr	r3, [r1, #16]
 800b148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b14c:	4293      	cmp	r3, r2
 800b14e:	bfb8      	it	lt
 800b150:	4613      	movlt	r3, r2
 800b152:	6033      	str	r3, [r6, #0]
 800b154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b158:	4607      	mov	r7, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	b10a      	cbz	r2, 800b162 <_printf_common+0x26>
 800b15e:	3301      	adds	r3, #1
 800b160:	6033      	str	r3, [r6, #0]
 800b162:	6823      	ldr	r3, [r4, #0]
 800b164:	0699      	lsls	r1, r3, #26
 800b166:	bf42      	ittt	mi
 800b168:	6833      	ldrmi	r3, [r6, #0]
 800b16a:	3302      	addmi	r3, #2
 800b16c:	6033      	strmi	r3, [r6, #0]
 800b16e:	6825      	ldr	r5, [r4, #0]
 800b170:	f015 0506 	ands.w	r5, r5, #6
 800b174:	d106      	bne.n	800b184 <_printf_common+0x48>
 800b176:	f104 0a19 	add.w	sl, r4, #25
 800b17a:	68e3      	ldr	r3, [r4, #12]
 800b17c:	6832      	ldr	r2, [r6, #0]
 800b17e:	1a9b      	subs	r3, r3, r2
 800b180:	42ab      	cmp	r3, r5
 800b182:	dc26      	bgt.n	800b1d2 <_printf_common+0x96>
 800b184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b188:	1e13      	subs	r3, r2, #0
 800b18a:	6822      	ldr	r2, [r4, #0]
 800b18c:	bf18      	it	ne
 800b18e:	2301      	movne	r3, #1
 800b190:	0692      	lsls	r2, r2, #26
 800b192:	d42b      	bmi.n	800b1ec <_printf_common+0xb0>
 800b194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b198:	4649      	mov	r1, r9
 800b19a:	4638      	mov	r0, r7
 800b19c:	47c0      	blx	r8
 800b19e:	3001      	adds	r0, #1
 800b1a0:	d01e      	beq.n	800b1e0 <_printf_common+0xa4>
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	6922      	ldr	r2, [r4, #16]
 800b1a6:	f003 0306 	and.w	r3, r3, #6
 800b1aa:	2b04      	cmp	r3, #4
 800b1ac:	bf02      	ittt	eq
 800b1ae:	68e5      	ldreq	r5, [r4, #12]
 800b1b0:	6833      	ldreq	r3, [r6, #0]
 800b1b2:	1aed      	subeq	r5, r5, r3
 800b1b4:	68a3      	ldr	r3, [r4, #8]
 800b1b6:	bf0c      	ite	eq
 800b1b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1bc:	2500      	movne	r5, #0
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	bfc4      	itt	gt
 800b1c2:	1a9b      	subgt	r3, r3, r2
 800b1c4:	18ed      	addgt	r5, r5, r3
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	341a      	adds	r4, #26
 800b1ca:	42b5      	cmp	r5, r6
 800b1cc:	d11a      	bne.n	800b204 <_printf_common+0xc8>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	e008      	b.n	800b1e4 <_printf_common+0xa8>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	4652      	mov	r2, sl
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	4638      	mov	r0, r7
 800b1da:	47c0      	blx	r8
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d103      	bne.n	800b1e8 <_printf_common+0xac>
 800b1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e8:	3501      	adds	r5, #1
 800b1ea:	e7c6      	b.n	800b17a <_printf_common+0x3e>
 800b1ec:	18e1      	adds	r1, r4, r3
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	2030      	movs	r0, #48	; 0x30
 800b1f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1f6:	4422      	add	r2, r4
 800b1f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b200:	3302      	adds	r3, #2
 800b202:	e7c7      	b.n	800b194 <_printf_common+0x58>
 800b204:	2301      	movs	r3, #1
 800b206:	4622      	mov	r2, r4
 800b208:	4649      	mov	r1, r9
 800b20a:	4638      	mov	r0, r7
 800b20c:	47c0      	blx	r8
 800b20e:	3001      	adds	r0, #1
 800b210:	d0e6      	beq.n	800b1e0 <_printf_common+0xa4>
 800b212:	3601      	adds	r6, #1
 800b214:	e7d9      	b.n	800b1ca <_printf_common+0x8e>
	...

0800b218 <_printf_i>:
 800b218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	7e0f      	ldrb	r7, [r1, #24]
 800b21e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b220:	2f78      	cmp	r7, #120	; 0x78
 800b222:	4691      	mov	r9, r2
 800b224:	4680      	mov	r8, r0
 800b226:	460c      	mov	r4, r1
 800b228:	469a      	mov	sl, r3
 800b22a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b22e:	d807      	bhi.n	800b240 <_printf_i+0x28>
 800b230:	2f62      	cmp	r7, #98	; 0x62
 800b232:	d80a      	bhi.n	800b24a <_printf_i+0x32>
 800b234:	2f00      	cmp	r7, #0
 800b236:	f000 80d4 	beq.w	800b3e2 <_printf_i+0x1ca>
 800b23a:	2f58      	cmp	r7, #88	; 0x58
 800b23c:	f000 80c0 	beq.w	800b3c0 <_printf_i+0x1a8>
 800b240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b248:	e03a      	b.n	800b2c0 <_printf_i+0xa8>
 800b24a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b24e:	2b15      	cmp	r3, #21
 800b250:	d8f6      	bhi.n	800b240 <_printf_i+0x28>
 800b252:	a101      	add	r1, pc, #4	; (adr r1, 800b258 <_printf_i+0x40>)
 800b254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b258:	0800b2b1 	.word	0x0800b2b1
 800b25c:	0800b2c5 	.word	0x0800b2c5
 800b260:	0800b241 	.word	0x0800b241
 800b264:	0800b241 	.word	0x0800b241
 800b268:	0800b241 	.word	0x0800b241
 800b26c:	0800b241 	.word	0x0800b241
 800b270:	0800b2c5 	.word	0x0800b2c5
 800b274:	0800b241 	.word	0x0800b241
 800b278:	0800b241 	.word	0x0800b241
 800b27c:	0800b241 	.word	0x0800b241
 800b280:	0800b241 	.word	0x0800b241
 800b284:	0800b3c9 	.word	0x0800b3c9
 800b288:	0800b2f1 	.word	0x0800b2f1
 800b28c:	0800b383 	.word	0x0800b383
 800b290:	0800b241 	.word	0x0800b241
 800b294:	0800b241 	.word	0x0800b241
 800b298:	0800b3eb 	.word	0x0800b3eb
 800b29c:	0800b241 	.word	0x0800b241
 800b2a0:	0800b2f1 	.word	0x0800b2f1
 800b2a4:	0800b241 	.word	0x0800b241
 800b2a8:	0800b241 	.word	0x0800b241
 800b2ac:	0800b38b 	.word	0x0800b38b
 800b2b0:	682b      	ldr	r3, [r5, #0]
 800b2b2:	1d1a      	adds	r2, r3, #4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	602a      	str	r2, [r5, #0]
 800b2b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e09f      	b.n	800b404 <_printf_i+0x1ec>
 800b2c4:	6820      	ldr	r0, [r4, #0]
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	0607      	lsls	r7, r0, #24
 800b2ca:	f103 0104 	add.w	r1, r3, #4
 800b2ce:	6029      	str	r1, [r5, #0]
 800b2d0:	d501      	bpl.n	800b2d6 <_printf_i+0xbe>
 800b2d2:	681e      	ldr	r6, [r3, #0]
 800b2d4:	e003      	b.n	800b2de <_printf_i+0xc6>
 800b2d6:	0646      	lsls	r6, r0, #25
 800b2d8:	d5fb      	bpl.n	800b2d2 <_printf_i+0xba>
 800b2da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2de:	2e00      	cmp	r6, #0
 800b2e0:	da03      	bge.n	800b2ea <_printf_i+0xd2>
 800b2e2:	232d      	movs	r3, #45	; 0x2d
 800b2e4:	4276      	negs	r6, r6
 800b2e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2ea:	485a      	ldr	r0, [pc, #360]	; (800b454 <_printf_i+0x23c>)
 800b2ec:	230a      	movs	r3, #10
 800b2ee:	e012      	b.n	800b316 <_printf_i+0xfe>
 800b2f0:	682b      	ldr	r3, [r5, #0]
 800b2f2:	6820      	ldr	r0, [r4, #0]
 800b2f4:	1d19      	adds	r1, r3, #4
 800b2f6:	6029      	str	r1, [r5, #0]
 800b2f8:	0605      	lsls	r5, r0, #24
 800b2fa:	d501      	bpl.n	800b300 <_printf_i+0xe8>
 800b2fc:	681e      	ldr	r6, [r3, #0]
 800b2fe:	e002      	b.n	800b306 <_printf_i+0xee>
 800b300:	0641      	lsls	r1, r0, #25
 800b302:	d5fb      	bpl.n	800b2fc <_printf_i+0xe4>
 800b304:	881e      	ldrh	r6, [r3, #0]
 800b306:	4853      	ldr	r0, [pc, #332]	; (800b454 <_printf_i+0x23c>)
 800b308:	2f6f      	cmp	r7, #111	; 0x6f
 800b30a:	bf0c      	ite	eq
 800b30c:	2308      	moveq	r3, #8
 800b30e:	230a      	movne	r3, #10
 800b310:	2100      	movs	r1, #0
 800b312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b316:	6865      	ldr	r5, [r4, #4]
 800b318:	60a5      	str	r5, [r4, #8]
 800b31a:	2d00      	cmp	r5, #0
 800b31c:	bfa2      	ittt	ge
 800b31e:	6821      	ldrge	r1, [r4, #0]
 800b320:	f021 0104 	bicge.w	r1, r1, #4
 800b324:	6021      	strge	r1, [r4, #0]
 800b326:	b90e      	cbnz	r6, 800b32c <_printf_i+0x114>
 800b328:	2d00      	cmp	r5, #0
 800b32a:	d04b      	beq.n	800b3c4 <_printf_i+0x1ac>
 800b32c:	4615      	mov	r5, r2
 800b32e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b332:	fb03 6711 	mls	r7, r3, r1, r6
 800b336:	5dc7      	ldrb	r7, [r0, r7]
 800b338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b33c:	4637      	mov	r7, r6
 800b33e:	42bb      	cmp	r3, r7
 800b340:	460e      	mov	r6, r1
 800b342:	d9f4      	bls.n	800b32e <_printf_i+0x116>
 800b344:	2b08      	cmp	r3, #8
 800b346:	d10b      	bne.n	800b360 <_printf_i+0x148>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	07de      	lsls	r6, r3, #31
 800b34c:	d508      	bpl.n	800b360 <_printf_i+0x148>
 800b34e:	6923      	ldr	r3, [r4, #16]
 800b350:	6861      	ldr	r1, [r4, #4]
 800b352:	4299      	cmp	r1, r3
 800b354:	bfde      	ittt	le
 800b356:	2330      	movle	r3, #48	; 0x30
 800b358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b35c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b360:	1b52      	subs	r2, r2, r5
 800b362:	6122      	str	r2, [r4, #16]
 800b364:	f8cd a000 	str.w	sl, [sp]
 800b368:	464b      	mov	r3, r9
 800b36a:	aa03      	add	r2, sp, #12
 800b36c:	4621      	mov	r1, r4
 800b36e:	4640      	mov	r0, r8
 800b370:	f7ff fee4 	bl	800b13c <_printf_common>
 800b374:	3001      	adds	r0, #1
 800b376:	d14a      	bne.n	800b40e <_printf_i+0x1f6>
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	b004      	add	sp, #16
 800b37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	f043 0320 	orr.w	r3, r3, #32
 800b388:	6023      	str	r3, [r4, #0]
 800b38a:	4833      	ldr	r0, [pc, #204]	; (800b458 <_printf_i+0x240>)
 800b38c:	2778      	movs	r7, #120	; 0x78
 800b38e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	6829      	ldr	r1, [r5, #0]
 800b396:	061f      	lsls	r7, r3, #24
 800b398:	f851 6b04 	ldr.w	r6, [r1], #4
 800b39c:	d402      	bmi.n	800b3a4 <_printf_i+0x18c>
 800b39e:	065f      	lsls	r7, r3, #25
 800b3a0:	bf48      	it	mi
 800b3a2:	b2b6      	uxthmi	r6, r6
 800b3a4:	07df      	lsls	r7, r3, #31
 800b3a6:	bf48      	it	mi
 800b3a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b3ac:	6029      	str	r1, [r5, #0]
 800b3ae:	bf48      	it	mi
 800b3b0:	6023      	strmi	r3, [r4, #0]
 800b3b2:	b91e      	cbnz	r6, 800b3bc <_printf_i+0x1a4>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	f023 0320 	bic.w	r3, r3, #32
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	2310      	movs	r3, #16
 800b3be:	e7a7      	b.n	800b310 <_printf_i+0xf8>
 800b3c0:	4824      	ldr	r0, [pc, #144]	; (800b454 <_printf_i+0x23c>)
 800b3c2:	e7e4      	b.n	800b38e <_printf_i+0x176>
 800b3c4:	4615      	mov	r5, r2
 800b3c6:	e7bd      	b.n	800b344 <_printf_i+0x12c>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	6826      	ldr	r6, [r4, #0]
 800b3cc:	6961      	ldr	r1, [r4, #20]
 800b3ce:	1d18      	adds	r0, r3, #4
 800b3d0:	6028      	str	r0, [r5, #0]
 800b3d2:	0635      	lsls	r5, r6, #24
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	d501      	bpl.n	800b3dc <_printf_i+0x1c4>
 800b3d8:	6019      	str	r1, [r3, #0]
 800b3da:	e002      	b.n	800b3e2 <_printf_i+0x1ca>
 800b3dc:	0670      	lsls	r0, r6, #25
 800b3de:	d5fb      	bpl.n	800b3d8 <_printf_i+0x1c0>
 800b3e0:	8019      	strh	r1, [r3, #0]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	4615      	mov	r5, r2
 800b3e8:	e7bc      	b.n	800b364 <_printf_i+0x14c>
 800b3ea:	682b      	ldr	r3, [r5, #0]
 800b3ec:	1d1a      	adds	r2, r3, #4
 800b3ee:	602a      	str	r2, [r5, #0]
 800b3f0:	681d      	ldr	r5, [r3, #0]
 800b3f2:	6862      	ldr	r2, [r4, #4]
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f7f4 feea 	bl	80001d0 <memchr>
 800b3fc:	b108      	cbz	r0, 800b402 <_printf_i+0x1ea>
 800b3fe:	1b40      	subs	r0, r0, r5
 800b400:	6060      	str	r0, [r4, #4]
 800b402:	6863      	ldr	r3, [r4, #4]
 800b404:	6123      	str	r3, [r4, #16]
 800b406:	2300      	movs	r3, #0
 800b408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b40c:	e7aa      	b.n	800b364 <_printf_i+0x14c>
 800b40e:	6923      	ldr	r3, [r4, #16]
 800b410:	462a      	mov	r2, r5
 800b412:	4649      	mov	r1, r9
 800b414:	4640      	mov	r0, r8
 800b416:	47d0      	blx	sl
 800b418:	3001      	adds	r0, #1
 800b41a:	d0ad      	beq.n	800b378 <_printf_i+0x160>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	079b      	lsls	r3, r3, #30
 800b420:	d413      	bmi.n	800b44a <_printf_i+0x232>
 800b422:	68e0      	ldr	r0, [r4, #12]
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	4298      	cmp	r0, r3
 800b428:	bfb8      	it	lt
 800b42a:	4618      	movlt	r0, r3
 800b42c:	e7a6      	b.n	800b37c <_printf_i+0x164>
 800b42e:	2301      	movs	r3, #1
 800b430:	4632      	mov	r2, r6
 800b432:	4649      	mov	r1, r9
 800b434:	4640      	mov	r0, r8
 800b436:	47d0      	blx	sl
 800b438:	3001      	adds	r0, #1
 800b43a:	d09d      	beq.n	800b378 <_printf_i+0x160>
 800b43c:	3501      	adds	r5, #1
 800b43e:	68e3      	ldr	r3, [r4, #12]
 800b440:	9903      	ldr	r1, [sp, #12]
 800b442:	1a5b      	subs	r3, r3, r1
 800b444:	42ab      	cmp	r3, r5
 800b446:	dcf2      	bgt.n	800b42e <_printf_i+0x216>
 800b448:	e7eb      	b.n	800b422 <_printf_i+0x20a>
 800b44a:	2500      	movs	r5, #0
 800b44c:	f104 0619 	add.w	r6, r4, #25
 800b450:	e7f5      	b.n	800b43e <_printf_i+0x226>
 800b452:	bf00      	nop
 800b454:	0800bf59 	.word	0x0800bf59
 800b458:	0800bf6a 	.word	0x0800bf6a

0800b45c <memmove>:
 800b45c:	4288      	cmp	r0, r1
 800b45e:	b510      	push	{r4, lr}
 800b460:	eb01 0402 	add.w	r4, r1, r2
 800b464:	d902      	bls.n	800b46c <memmove+0x10>
 800b466:	4284      	cmp	r4, r0
 800b468:	4623      	mov	r3, r4
 800b46a:	d807      	bhi.n	800b47c <memmove+0x20>
 800b46c:	1e43      	subs	r3, r0, #1
 800b46e:	42a1      	cmp	r1, r4
 800b470:	d008      	beq.n	800b484 <memmove+0x28>
 800b472:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b47a:	e7f8      	b.n	800b46e <memmove+0x12>
 800b47c:	4402      	add	r2, r0
 800b47e:	4601      	mov	r1, r0
 800b480:	428a      	cmp	r2, r1
 800b482:	d100      	bne.n	800b486 <memmove+0x2a>
 800b484:	bd10      	pop	{r4, pc}
 800b486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b48a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b48e:	e7f7      	b.n	800b480 <memmove+0x24>

0800b490 <_realloc_r>:
 800b490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b494:	4680      	mov	r8, r0
 800b496:	4614      	mov	r4, r2
 800b498:	460e      	mov	r6, r1
 800b49a:	b921      	cbnz	r1, 800b4a6 <_realloc_r+0x16>
 800b49c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	f7ff bb3f 	b.w	800ab24 <_malloc_r>
 800b4a6:	b92a      	cbnz	r2, 800b4b4 <_realloc_r+0x24>
 800b4a8:	f7ff fca4 	bl	800adf4 <_free_r>
 800b4ac:	4625      	mov	r5, r4
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b4:	f000 f81b 	bl	800b4ee <_malloc_usable_size_r>
 800b4b8:	4284      	cmp	r4, r0
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	d802      	bhi.n	800b4c4 <_realloc_r+0x34>
 800b4be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4c2:	d812      	bhi.n	800b4ea <_realloc_r+0x5a>
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	f7ff fb2c 	bl	800ab24 <_malloc_r>
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d0ed      	beq.n	800b4ae <_realloc_r+0x1e>
 800b4d2:	42bc      	cmp	r4, r7
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	bf28      	it	cs
 800b4da:	463a      	movcs	r2, r7
 800b4dc:	f7ff fc7c 	bl	800add8 <memcpy>
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	f7ff fc86 	bl	800adf4 <_free_r>
 800b4e8:	e7e1      	b.n	800b4ae <_realloc_r+0x1e>
 800b4ea:	4635      	mov	r5, r6
 800b4ec:	e7df      	b.n	800b4ae <_realloc_r+0x1e>

0800b4ee <_malloc_usable_size_r>:
 800b4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f2:	1f18      	subs	r0, r3, #4
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	bfbc      	itt	lt
 800b4f8:	580b      	ldrlt	r3, [r1, r0]
 800b4fa:	18c0      	addlt	r0, r0, r3
 800b4fc:	4770      	bx	lr
	...

0800b500 <_init>:
 800b500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b502:	bf00      	nop
 800b504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b506:	bc08      	pop	{r3}
 800b508:	469e      	mov	lr, r3
 800b50a:	4770      	bx	lr

0800b50c <_fini>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr
