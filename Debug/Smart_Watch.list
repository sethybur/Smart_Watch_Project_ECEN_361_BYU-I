
Smart_Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bab8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a64  0800bc48  0800bc48  0001bc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6ac  0800c6ac  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6ac  0800c6ac  0001c6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6b4  0800c6b4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6b4  0800c6b4  0001c6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6b8  0800c6b8  0001c6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800c6bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054f8  2000008c  0800c748  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005584  0800c748  00025584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000244fd  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004961  00000000  00000000  000445fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ea8  00000000  00000000  00048f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017cf  00000000  00000000  0004ae08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bee2  00000000  00000000  0004c5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025af2  00000000  00000000  000784b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108484  00000000  00000000  0009dfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000880c  00000000  00000000  001a6430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001aec3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc30 	.word	0x0800bc30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800bc30 	.word	0x0800bc30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b970 	b.w	8000d44 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	460d      	mov	r5, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	460f      	mov	r7, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4694      	mov	ip, r2
 8000a90:	d965      	bls.n	8000b5e <__udivmoddi4+0xe2>
 8000a92:	fab2 f382 	clz	r3, r2
 8000a96:	b143      	cbz	r3, 8000aaa <__udivmoddi4+0x2e>
 8000a98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a9c:	f1c3 0220 	rsb	r2, r3, #32
 8000aa0:	409f      	lsls	r7, r3
 8000aa2:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa6:	4317      	orrs	r7, r2
 8000aa8:	409c      	lsls	r4, r3
 8000aaa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aae:	fa1f f58c 	uxth.w	r5, ip
 8000ab2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ab6:	0c22      	lsrs	r2, r4, #16
 8000ab8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000abc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac0:	fb01 f005 	mul.w	r0, r1, r5
 8000ac4:	4290      	cmp	r0, r2
 8000ac6:	d90a      	bls.n	8000ade <__udivmoddi4+0x62>
 8000ac8:	eb1c 0202 	adds.w	r2, ip, r2
 8000acc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad0:	f080 811c 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	f240 8119 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4462      	add	r2, ip
 8000ade:	1a12      	subs	r2, r2, r0
 8000ae0:	b2a4      	uxth	r4, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aee:	fb00 f505 	mul.w	r5, r0, r5
 8000af2:	42a5      	cmp	r5, r4
 8000af4:	d90a      	bls.n	8000b0c <__udivmoddi4+0x90>
 8000af6:	eb1c 0404 	adds.w	r4, ip, r4
 8000afa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afe:	f080 8107 	bcs.w	8000d10 <__udivmoddi4+0x294>
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	f240 8104 	bls.w	8000d10 <__udivmoddi4+0x294>
 8000b08:	4464      	add	r4, ip
 8000b0a:	3802      	subs	r0, #2
 8000b0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b10:	1b64      	subs	r4, r4, r5
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11e      	cbz	r6, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40dc      	lsrs	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0xbc>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80ed 	beq.w	8000d06 <__udivmoddi4+0x28a>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b32:	4608      	mov	r0, r1
 8000b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b38:	fab3 f183 	clz	r1, r3
 8000b3c:	2900      	cmp	r1, #0
 8000b3e:	d149      	bne.n	8000bd4 <__udivmoddi4+0x158>
 8000b40:	42ab      	cmp	r3, r5
 8000b42:	d302      	bcc.n	8000b4a <__udivmoddi4+0xce>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	f200 80f8 	bhi.w	8000d3a <__udivmoddi4+0x2be>
 8000b4a:	1a84      	subs	r4, r0, r2
 8000b4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	4617      	mov	r7, r2
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d0e2      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	e9c6 4700 	strd	r4, r7, [r6]
 8000b5c:	e7df      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b5e:	b902      	cbnz	r2, 8000b62 <__udivmoddi4+0xe6>
 8000b60:	deff      	udf	#255	; 0xff
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8090 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6c:	1a8a      	subs	r2, r1, r2
 8000b6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b72:	fa1f fe8c 	uxth.w	lr, ip
 8000b76:	2101      	movs	r1, #1
 8000b78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b80:	0c22      	lsrs	r2, r4, #16
 8000b82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b86:	fb0e f005 	mul.w	r0, lr, r5
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	d908      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4290      	cmp	r0, r2
 8000b9a:	f200 80cb 	bhi.w	8000d34 <__udivmoddi4+0x2b8>
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	1a12      	subs	r2, r2, r0
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bb4:	45a6      	cmp	lr, r4
 8000bb6:	d908      	bls.n	8000bca <__udivmoddi4+0x14e>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x14c>
 8000bc2:	45a6      	cmp	lr, r4
 8000bc4:	f200 80bb 	bhi.w	8000d3e <__udivmoddi4+0x2c2>
 8000bc8:	4610      	mov	r0, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bd2:	e79f      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bd4:	f1c1 0720 	rsb	r7, r1, #32
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000be2:	fa05 f401 	lsl.w	r4, r5, r1
 8000be6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bea:	40fd      	lsrs	r5, r7
 8000bec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bf6:	fa1f fe8c 	uxth.w	lr, ip
 8000bfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000bfe:	0c1c      	lsrs	r4, r3, #16
 8000c00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c04:	fb08 f50e 	mul.w	r5, r8, lr
 8000c08:	42a5      	cmp	r5, r4
 8000c0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1c 0404 	adds.w	r4, ip, r4
 8000c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c1c:	f080 8088 	bcs.w	8000d30 <__udivmoddi4+0x2b4>
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	f240 8085 	bls.w	8000d30 <__udivmoddi4+0x2b4>
 8000c26:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2a:	4464      	add	r4, ip
 8000c2c:	1b64      	subs	r4, r4, r5
 8000c2e:	b29d      	uxth	r5, r3
 8000c30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c34:	fb09 4413 	mls	r4, r9, r3, r4
 8000c38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c4c:	d26c      	bcs.n	8000d28 <__udivmoddi4+0x2ac>
 8000c4e:	45a6      	cmp	lr, r4
 8000c50:	d96a      	bls.n	8000d28 <__udivmoddi4+0x2ac>
 8000c52:	3b02      	subs	r3, #2
 8000c54:	4464      	add	r4, ip
 8000c56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c5e:	eba4 040e 	sub.w	r4, r4, lr
 8000c62:	42ac      	cmp	r4, r5
 8000c64:	46c8      	mov	r8, r9
 8000c66:	46ae      	mov	lr, r5
 8000c68:	d356      	bcc.n	8000d18 <__udivmoddi4+0x29c>
 8000c6a:	d053      	beq.n	8000d14 <__udivmoddi4+0x298>
 8000c6c:	b156      	cbz	r6, 8000c84 <__udivmoddi4+0x208>
 8000c6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c72:	eb64 040e 	sbc.w	r4, r4, lr
 8000c76:	fa04 f707 	lsl.w	r7, r4, r7
 8000c7a:	40ca      	lsrs	r2, r1
 8000c7c:	40cc      	lsrs	r4, r1
 8000c7e:	4317      	orrs	r7, r2
 8000c80:	e9c6 7400 	strd	r7, r4, [r6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	f1c3 0120 	rsb	r1, r3, #32
 8000c90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c94:	fa20 f201 	lsr.w	r2, r0, r1
 8000c98:	fa25 f101 	lsr.w	r1, r5, r1
 8000c9c:	409d      	lsls	r5, r3
 8000c9e:	432a      	orrs	r2, r5
 8000ca0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb0:	0c11      	lsrs	r1, r2, #16
 8000cb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cb6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cba:	428d      	cmp	r5, r1
 8000cbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x258>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cca:	d22f      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000ccc:	428d      	cmp	r5, r1
 8000cce:	d92d      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1b49      	subs	r1, r1, r5
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cdc:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ce4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x282>
 8000cec:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf4:	d216      	bcs.n	8000d24 <__udivmoddi4+0x2a8>
 8000cf6:	4291      	cmp	r1, r2
 8000cf8:	d914      	bls.n	8000d24 <__udivmoddi4+0x2a8>
 8000cfa:	3d02      	subs	r5, #2
 8000cfc:	4462      	add	r2, ip
 8000cfe:	1a52      	subs	r2, r2, r1
 8000d00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d04:	e738      	b.n	8000b78 <__udivmoddi4+0xfc>
 8000d06:	4631      	mov	r1, r6
 8000d08:	4630      	mov	r0, r6
 8000d0a:	e708      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	e6e6      	b.n	8000ade <__udivmoddi4+0x62>
 8000d10:	4610      	mov	r0, r2
 8000d12:	e6fb      	b.n	8000b0c <__udivmoddi4+0x90>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d2a9      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d18:	ebb9 0802 	subs.w	r8, r9, r2
 8000d1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d20:	3b01      	subs	r3, #1
 8000d22:	e7a3      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d24:	4645      	mov	r5, r8
 8000d26:	e7ea      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d28:	462b      	mov	r3, r5
 8000d2a:	e794      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2c:	4640      	mov	r0, r8
 8000d2e:	e7d1      	b.n	8000cd4 <__udivmoddi4+0x258>
 8000d30:	46d0      	mov	r8, sl
 8000d32:	e77b      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d34:	3d02      	subs	r5, #2
 8000d36:	4462      	add	r2, ip
 8000d38:	e732      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e70a      	b.n	8000b54 <__udivmoddi4+0xd8>
 8000d3e:	4464      	add	r4, ip
 8000d40:	3802      	subs	r0, #2
 8000d42:	e742      	b.n	8000bca <__udivmoddi4+0x14e>

08000d44 <__aeabi_idiv0>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	//HAL_IncTick();
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5c:	f001 f930 	bl	8001fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d60:	f000 f878 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d64:	f000 f9da 	bl	800111c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d68:	f000 f9a8 	bl	80010bc <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000d6c:	f000 f906 	bl	8000f7c <MX_RTC_Init>
  MX_I2C1_Init();
 8000d70:	f000 f8c4 	bl	8000efc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */




  ssd1306_Init();
 8000d74:	f000 ff22 	bl	8001bbc <ssd1306_Init>
  ssd1306_Fill(Black);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 ff89 	bl	8001c90 <ssd1306_Fill>
  ssd1306_SetCursor(0,0);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	2000      	movs	r0, #0
 8000d82:	f001 f8d3 	bl	8001f2c <ssd1306_SetCursor>
  ssd1306_WriteString("BOOTING", Font_7x10 ,White);
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <main+0xac>)
 8000d88:	2301      	movs	r3, #1
 8000d8a:	ca06      	ldmia	r2, {r1, r2}
 8000d8c:	481e      	ldr	r0, [pc, #120]	; (8000e08 <main+0xb0>)
 8000d8e:	f001 f8a7 	bl	8001ee0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000d92:	f000 ffa1 	bl	8001cd8 <ssd1306_UpdateScreen>




  setupMax30102(&max30102);
 8000d96:	481d      	ldr	r0, [pc, #116]	; (8000e0c <main+0xb4>)
 8000d98:	f000 fa3c 	bl	8001214 <setupMax30102>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d9c:	f007 fb06 	bl	80083ac <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of i2CMutex */
  i2CMutexHandle = osMutexNew(&i2CMutex_attributes);
 8000da0:	481b      	ldr	r0, [pc, #108]	; (8000e10 <main+0xb8>)
 8000da2:	f007 fbfa 	bl	800859a <osMutexNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a1a      	ldr	r2, [pc, #104]	; (8000e14 <main+0xbc>)
 8000daa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of default_task */
  default_taskHandle = osThreadNew(start_default_task, NULL, &default_task_attributes);
 8000dac:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <main+0xc0>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	481a      	ldr	r0, [pc, #104]	; (8000e1c <main+0xc4>)
 8000db2:	f007 fb45 	bl	8008440 <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <main+0xc8>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of wright_to_displ */
  wright_to_displHandle = osThreadNew(start_wright_to_display_task, NULL, &wright_to_displ_attributes);
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <main+0xcc>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4819      	ldr	r0, [pc, #100]	; (8000e28 <main+0xd0>)
 8000dc2:	f007 fb3d 	bl	8008440 <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a18      	ldr	r2, [pc, #96]	; (8000e2c <main+0xd4>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of read_heart_rate */
  read_heart_rateHandle = osThreadNew(start_read_heart_rate_task, NULL, &read_heart_rate_attributes);
 8000dcc:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <main+0xd8>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <main+0xdc>)
 8000dd2:	f007 fb35 	bl	8008440 <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <main+0xe0>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* creation of read_acceloroma */
  read_acceloromaHandle = osThreadNew(start_read_acceloromater_task, NULL, &read_acceloroma_attributes);
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <main+0xe4>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <main+0xe8>)
 8000de2:	f007 fb2d 	bl	8008440 <osThreadNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <main+0xec>)
 8000dea:	6013      	str	r3, [r2, #0]

  /* creation of date_and_time_t */
  date_and_time_tHandle = osThreadNew(start_date_and_time_task, NULL, &date_and_time_t_attributes);
 8000dec:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <main+0xf0>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4816      	ldr	r0, [pc, #88]	; (8000e4c <main+0xf4>)
 8000df2:	f007 fb25 	bl	8008440 <osThreadNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <main+0xf8>)
 8000dfa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dfc:	f007 fafa 	bl	80083f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <main+0xa8>
 8000e02:	bf00      	nop
 8000e04:	20000028 	.word	0x20000028
 8000e08:	0800bca4 	.word	0x0800bca4
 8000e0c:	20000e58 	.word	0x20000e58
 8000e10:	0800bdbc 	.word	0x0800bdbc
 8000e14:	200001d4 	.word	0x200001d4
 8000e18:	0800bd08 	.word	0x0800bd08
 8000e1c:	080013b3 	.word	0x080013b3
 8000e20:	200001c0 	.word	0x200001c0
 8000e24:	0800bd2c 	.word	0x0800bd2c
 8000e28:	080013c5 	.word	0x080013c5
 8000e2c:	200001c4 	.word	0x200001c4
 8000e30:	0800bd50 	.word	0x0800bd50
 8000e34:	080014f9 	.word	0x080014f9
 8000e38:	200001c8 	.word	0x200001c8
 8000e3c:	0800bd74 	.word	0x0800bd74
 8000e40:	08001555 	.word	0x08001555
 8000e44:	200001cc 	.word	0x200001cc
 8000e48:	0800bd98 	.word	0x0800bd98
 8000e4c:	08001569 	.word	0x08001569
 8000e50:	200001d0 	.word	0x200001d0

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b096      	sub	sp, #88	; 0x58
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	2244      	movs	r2, #68	; 0x44
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00a fab6 	bl	800b3d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e7a:	f003 f8d9 	bl	8004030 <HAL_PWREx_ControlVoltageScaling>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e84:	f000 fbd2 	bl	800162c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e92:	2310      	movs	r3, #16
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e96:	2301      	movs	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 f90e 	bl	80040dc <HAL_RCC_OscConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000ec6:	f000 fbb1 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eca:	230f      	movs	r3, #15
 8000ecc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fcd6 	bl	8004894 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000eee:	f000 fb9d 	bl	800162c <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3758      	adds	r7, #88	; 0x58
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <MX_I2C1_Init+0x78>)
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <MX_I2C1_Init+0x7c>)
 8000f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f38:	f001 fbaa 	bl	8002690 <HAL_I2C_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f42:	f000 fb73 	bl	800162c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f46:	2100      	movs	r1, #0
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f4a:	f002 ffcb 	bl	8003ee4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f54:	f000 fb6a 	bl	800162c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_I2C1_Init+0x74>)
 8000f5c:	f003 f80d 	bl	8003f7a <HAL_I2CEx_ConfigDigitalFilter>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f66:	f000 fb61 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000c0 	.word	0x200000c0
 8000f74:	40005400 	.word	0x40005400
 8000f78:	10909cec 	.word	0x10909cec

08000f7c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b092      	sub	sp, #72	; 0x48
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	222c      	movs	r2, #44	; 0x2c
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00a fa19 	bl	800b3d4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa2:	4b44      	ldr	r3, [pc, #272]	; (80010b4 <MX_RTC_Init+0x138>)
 8000fa4:	4a44      	ldr	r2, [pc, #272]	; (80010b8 <MX_RTC_Init+0x13c>)
 8000fa6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <MX_RTC_Init+0x138>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fae:	4b41      	ldr	r3, [pc, #260]	; (80010b4 <MX_RTC_Init+0x138>)
 8000fb0:	227f      	movs	r2, #127	; 0x7f
 8000fb2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fb4:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <MX_RTC_Init+0x138>)
 8000fb6:	22ff      	movs	r2, #255	; 0xff
 8000fb8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fba:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <MX_RTC_Init+0x138>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000fc0:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <MX_RTC_Init+0x138>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <MX_RTC_Init+0x138>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fcc:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <MX_RTC_Init+0x138>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fd2:	4838      	ldr	r0, [pc, #224]	; (80010b4 <MX_RTC_Init+0x138>)
 8000fd4:	f004 fb70 	bl	80056b8 <HAL_RTC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000fde:	f000 fb25 	bl	800162c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x18;
 8000fe2:	2318      	movs	r3, #24
 8000fe4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ffc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001000:	2201      	movs	r2, #1
 8001002:	4619      	mov	r1, r3
 8001004:	482b      	ldr	r0, [pc, #172]	; (80010b4 <MX_RTC_Init+0x138>)
 8001006:	f004 fbdf 	bl	80057c8 <HAL_RTC_SetTime>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001010:	f000 fb0c 	bl	800162c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001014:	2303      	movs	r3, #3
 8001016:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_DECEMBER;
 800101a:	2312      	movs	r3, #18
 800101c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x11;
 8001020:	2311      	movs	r3, #17
 8001022:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800102c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	481f      	ldr	r0, [pc, #124]	; (80010b4 <MX_RTC_Init+0x138>)
 8001036:	f004 fcc0 	bl	80059ba <HAL_RTC_SetDate>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001040:	f000 faf4 	bl	800162c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x3;
 8001044:	2303      	movs	r3, #3
 8001046:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x3;
 8001048:	2303      	movs	r3, #3
 800104a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800104c:	2300      	movs	r3, #0
 800104e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001068:	2301      	movs	r3, #1
 800106a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800106e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	2201      	movs	r2, #1
 8001078:	4619      	mov	r1, r3
 800107a:	480e      	ldr	r0, [pc, #56]	; (80010b4 <MX_RTC_Init+0x138>)
 800107c:	f004 fd72 	bl	8005b64 <HAL_RTC_SetAlarm_IT>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001086:	f000 fad1 	bl	800162c <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_512HZ) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <MX_RTC_Init+0x138>)
 800108e:	f004 ffc5 	bl	800601c <HAL_RTCEx_SetCalibrationOutPut>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_RTC_Init+0x120>
  {
    Error_Handler();
 8001098:	f000 fac8 	bl	800162c <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_RTC_Init+0x138>)
 800109e:	f005 f804 	bl	80060aa <HAL_RTCEx_SetRefClock>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_RTC_Init+0x130>
  {
    Error_Handler();
 80010a8:	f000 fac0 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3748      	adds	r7, #72	; 0x48
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000114 	.word	0x20000114
 80010b8:	40002800 	.word	0x40002800

080010bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010c2:	4a15      	ldr	r2, [pc, #84]	; (8001118 <MX_USART2_UART_Init+0x5c>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_USART2_UART_Init+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_USART2_UART_Init+0x58>)
 8001100:	f005 fad4 	bl	80066ac <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800110a:	f000 fa8f 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000138 	.word	0x20000138
 8001118:	40004400 	.word	0x40004400

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b36      	ldr	r3, [pc, #216]	; (800120c <MX_GPIO_Init+0xf0>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a35      	ldr	r2, [pc, #212]	; (800120c <MX_GPIO_Init+0xf0>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b33      	ldr	r3, [pc, #204]	; (800120c <MX_GPIO_Init+0xf0>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <MX_GPIO_Init+0xf0>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a2f      	ldr	r2, [pc, #188]	; (800120c <MX_GPIO_Init+0xf0>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <MX_GPIO_Init+0xf0>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <MX_GPIO_Init+0xf0>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a29      	ldr	r2, [pc, #164]	; (800120c <MX_GPIO_Init+0xf0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b27      	ldr	r3, [pc, #156]	; (800120c <MX_GPIO_Init+0xf0>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_GPIO_Init+0xf0>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a23      	ldr	r2, [pc, #140]	; (800120c <MX_GPIO_Init+0xf0>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_GPIO_Init+0xf0>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2120      	movs	r1, #32
 8001196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119a:	f001 fa49 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800119e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4816      	ldr	r0, [pc, #88]	; (8001210 <MX_GPIO_Init+0xf4>)
 80011b6:	f001 f891 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : heartRateInterrupt_Pin */
  GPIO_InitStruct.Pin = heartRateInterrupt_Pin;
 80011ba:	2301      	movs	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(heartRateInterrupt_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4810      	ldr	r0, [pc, #64]	; (8001210 <MX_GPIO_Init+0xf4>)
 80011d0:	f001 f884 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d4:	2320      	movs	r3, #32
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f001 f875 	bl	80022dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	210f      	movs	r1, #15
 80011f6:	2006      	movs	r0, #6
 80011f8:	f000 fff6 	bl	80021e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011fc:	2006      	movs	r0, #6
 80011fe:	f001 f80f 	bl	8002220 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800

08001214 <setupMax30102>:

/* USER CODE BEGIN 4 */
void setupMax30102 (max30102_t *max30102)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]


	max30102_init(max30102, &hi2c1);
 800121c:	491c      	ldr	r1, [pc, #112]	; (8001290 <setupMax30102+0x7c>)
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f005 ff5f 	bl	80070e2 <max30102_init>
	max30102_reset(max30102);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f005 ffd3 	bl	80071d0 <max30102_reset>
	max30102_clear_fifo(max30102);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f006 f956 	bl	80074dc <max30102_clear_fifo>
	// FIFO configurations
	max30102_set_fifo_config(max30102, max30102_smp_ave_2, 1, 16);
 8001230:	2310      	movs	r3, #16
 8001232:	2201      	movs	r2, #1
 8001234:	2101      	movs	r1, #1
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f006 f916 	bl	8007468 <max30102_set_fifo_config>
	max30102_set_mode(max30102, max30102_spo2);
 800123c:	2103      	movs	r1, #3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f006 f82f 	bl	80072a2 <max30102_set_mode>
	// LED configurations
	max30102_set_led_pulse_width(max30102, max30102_pw_16_bit);
 8001244:	2101      	movs	r1, #1
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f006 f875 	bl	8007336 <max30102_set_led_pulse_width>
	max30102_set_adc_resolution(max30102, max30102_adc_4096);
 800124c:	2101      	movs	r1, #1
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f006 f894 	bl	800737c <max30102_set_adc_resolution>
	max30102_set_sampling_rate(max30102, max30102_sr_800);
 8001254:	2104      	movs	r1, #4
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f006 f849 	bl	80072ee <max30102_set_sampling_rate>
	max30102_set_led_current_1(max30102, 10);
 800125c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f006 f8b1 	bl	80073c8 <max30102_set_led_current_1>
	max30102_set_led_current_2(max30102, 10);
 8001266:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f006 f8d4 	bl	8007418 <max30102_set_led_current_2>

	//max30102_set_multi_led_slot_1_2(max30102, max30102_led_red, max30102_led_off);
	//max30102_set_multi_led_slot_3_4(max30102, max30102_led_ir, max30102_led_off);

	// Enable FIFO_A_FULL interrupt
	max30102_set_a_full(max30102, 1);
 8001270:	2101      	movs	r1, #1
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f005 ffbd 	bl	80071f2 <max30102_set_a_full>
	// Enable die temperature measurement
	max30102_set_die_temp_en(max30102, 1);
 8001278:	2101      	movs	r1, #1
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f005 fff9 	bl	8007272 <max30102_set_die_temp_en>
	// Enable DIE_TEMP_RDY interrupt
	max30102_set_die_temp_rdy(max30102, 1);
 8001280:	2101      	movs	r1, #1
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f005 ffdd 	bl	8007242 <max30102_set_die_temp_rdy>
	//max30102_set_ppg_rdy(max30102, 1);
	//max30102_set_alc_ovf(max30102, 1);


}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200000c0 	.word	0x200000c0

08001294 <max30102_calculate_sample_data>:

void max30102_calculate_sample_data(int8_t num_samples)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	; 0x50
 8001298:	af04      	add	r7, sp, #16
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	/*
	uint8_t MSG[35] = {'\0'};
	sprintf(MSG, "  invalid bpm! %i", (unsigned int)bpm);
	HAL_UART_Transmit(&huart2, MSG, sizeof(MSG),HAL_MAX_DELAY);
	*/
	int8_t msg[35] = {'\0'};
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	221f      	movs	r2, #31
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f00a f892 	bl	800b3d4 <memset>

	for(int i = 0; i < num_samples; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012b4:	e061      	b.n	800137a <max30102_calculate_sample_data+0xe6>
	{
//		sprintf(msg, "%i : %i ", (int)max30102._ir_samples[i],(int)max30102._red_samples[i]);
//		HAL_UART_Transmit(&huart2, msg, sizeof(msg),HAL_MAX_DELAY);
		userHeartData.irBuffer[userHeartData.bufferCounter] = max30102._ir_samples[i];
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	441a      	add	r2, r3
 80012c2:	4934      	ldr	r1, [pc, #208]	; (8001394 <max30102_calculate_sample_data+0x100>)
 80012c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	6013      	str	r3, [r2, #0]
		userHeartData.redBuffer[userHeartData.bufferCounter] = max30102._red_samples[i];
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4b2f      	ldr	r3, [pc, #188]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	441a      	add	r2, r3
 80012da:	492e      	ldr	r1, [pc, #184]	; (8001394 <max30102_calculate_sample_data+0x100>)
 80012dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012de:	3320      	adds	r3, #32
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	6013      	str	r3, [r2, #0]
		userHeartData.bufferCounter++;
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 80012f0:	6093      	str	r3, [r2, #8]
		if(userHeartData.bufferCounter == BUFFER_SIZE)
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80012fa:	d134      	bne.n	8001366 <max30102_calculate_sample_data+0xd2>
		{
			memset(msg, 0, sizeof msg);
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	2223      	movs	r2, #35	; 0x23
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f00a f865 	bl	800b3d4 <memset>
			int32_t spo2;
			int8_t spo2V;
			int32_t bpm;
			int8_t bpmV;
			maxim_heart_rate_and_oxygen_saturation(userHeartData.irBuffer, userHeartData.redBuffer, MAX30102_BUFFER_LENGTH-MAX30102_SAMPLING_RATE,
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 8001310:	6859      	ldr	r1, [r3, #4]
 8001312:	f107 030b 	add.w	r3, r7, #11
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	f107 0313 	add.w	r3, r7, #19
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001330:	f006 f95a 	bl	80075e8 <maxim_heart_rate_and_oxygen_saturation>
					0, &spo2, &spo2V, &bpm, &bpmV);
	        if(spo2V)
 8001334:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <max30102_calculate_sample_data+0xb0>
	        {
	        	userData.spO2 = spo2;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <max30102_calculate_sample_data+0x104>)
 8001340:	6113      	str	r3, [r2, #16]
 8001342:	e002      	b.n	800134a <max30102_calculate_sample_data+0xb6>
	        }
	        else{
	        	userData.spO2 = 69;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <max30102_calculate_sample_data+0x104>)
 8001346:	2245      	movs	r2, #69	; 0x45
 8001348:	611a      	str	r2, [r3, #16]
	        }

	        if(bpmV)
 800134a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <max30102_calculate_sample_data+0xc6>
	        {

	        	userData.bpm = bpm;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4a10      	ldr	r2, [pc, #64]	; (8001398 <max30102_calculate_sample_data+0x104>)
 8001356:	60d3      	str	r3, [r2, #12]
 8001358:	e002      	b.n	8001360 <max30102_calculate_sample_data+0xcc>
	        }
	        else{
	        	userData.bpm = 69;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <max30102_calculate_sample_data+0x104>)
 800135c:	2245      	movs	r2, #69	; 0x45
 800135e:	60da      	str	r2, [r3, #12]
	        }
	        userHeartData.bufferCounter = 0;
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <max30102_calculate_sample_data+0xfc>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
		}

		memset(msg, 0, sizeof msg);
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	2223      	movs	r2, #35	; 0x23
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f00a f830 	bl	800b3d4 <memset>
	for(int i = 0; i < num_samples; i++)
 8001374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001376:	3301      	adds	r3, #1
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001380:	429a      	cmp	r2, r3
 8001382:	db98      	blt.n	80012b6 <max30102_calculate_sample_data+0x22>
	}
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3740      	adds	r7, #64	; 0x40
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000018 	.word	0x20000018
 8001394:	20000e58 	.word	0x20000e58
 8001398:	20000000 	.word	0x20000000

0800139c <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == heartRateInterrupt_Pin)
	{
		//max30102_interrupt_handler(&max30102);
		//max30102_on_interrupt(&max30102);
	}
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <start_default_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_default_task */
void start_default_task(void *argument)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80013ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013be:	f007 f8d1 	bl	8008564 <osDelay>
 80013c2:	e7fa      	b.n	80013ba <start_default_task+0x8>

080013c4 <start_wright_to_display_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_wright_to_display_task */
void start_wright_to_display_task(void *argument)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b098      	sub	sp, #96	; 0x60
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_wright_to_display_task */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 80013cc:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <start_wright_to_display_task+0x110>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	4618      	mov	r0, r3
 80013d6:	f007 fe53 	bl	8009080 <xQueueSemaphoreTake>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d174      	bne.n	80014ca <start_wright_to_display_task+0x106>
	  {

		  ssd1306_Fill(Black);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 fc55 	bl	8001c90 <ssd1306_Fill>
		  ssd1306_SetCursor(0,0);
 80013e6:	2100      	movs	r1, #0
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 fd9f 	bl	8001f2c <ssd1306_SetCursor>

		  char temp [4][19];
		  //"     hh-mm PM     ";
		  char *ampm = ((userData.am) ? "AM" : "PM");
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <start_wright_to_display_task+0x114>)
 80013f0:	7a1b      	ldrb	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <start_wright_to_display_task+0x36>
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <start_wright_to_display_task+0x118>)
 80013f8:	e000      	b.n	80013fc <start_wright_to_display_task+0x38>
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <start_wright_to_display_task+0x11c>)
 80013fc:	657b      	str	r3, [r7, #84]	; 0x54
		  snprintf(temp[0], 19, "     %02i-%02i %.2s     " ,userData.hour ,userData.min ,ampm);
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <start_wright_to_display_task+0x114>)
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <start_wright_to_display_task+0x114>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f107 0008 	add.w	r0, r7, #8
 800140a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800140c:	9201      	str	r2, [sp, #4]
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	460b      	mov	r3, r1
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <start_wright_to_display_task+0x120>)
 8001414:	2113      	movs	r1, #19
 8001416:	f009 ffa9 	bl	800b36c <sniprintf>
		  ssd1306_WriteString(temp[0], Font_7x10 ,White);
 800141a:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <start_wright_to_display_task+0x124>)
 800141c:	f107 0008 	add.w	r0, r7, #8
 8001420:	2301      	movs	r3, #1
 8001422:	ca06      	ldmia	r2, {r1, r2}
 8001424:	f000 fd5c 	bl	8001ee0 <ssd1306_WriteString>

		  ssd1306_SetCursor(0,20);
 8001428:	2114      	movs	r1, #20
 800142a:	2000      	movs	r0, #0
 800142c:	f000 fd7e 	bl	8001f2c <ssd1306_SetCursor>
		  snprintf(temp[1], 19, "BPM: %i", userData.bpm);
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <start_wright_to_display_task+0x114>)
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	f103 0013 	add.w	r0, r3, #19
 800143c:	4613      	mov	r3, r2
 800143e:	4a2b      	ldr	r2, [pc, #172]	; (80014ec <start_wright_to_display_task+0x128>)
 8001440:	2113      	movs	r1, #19
 8001442:	f009 ff93 	bl	800b36c <sniprintf>
		  ssd1306_WriteString(temp[1], Font_7x10, White);
 8001446:	4a28      	ldr	r2, [pc, #160]	; (80014e8 <start_wright_to_display_task+0x124>)
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	f103 0013 	add.w	r0, r3, #19
 8001450:	2301      	movs	r3, #1
 8001452:	ca06      	ldmia	r2, {r1, r2}
 8001454:	f000 fd44 	bl	8001ee0 <ssd1306_WriteString>

		  ssd1306_SetCursor(0,30);
 8001458:	211e      	movs	r1, #30
 800145a:	2000      	movs	r0, #0
 800145c:	f000 fd66 	bl	8001f2c <ssd1306_SetCursor>
		  snprintf(temp[2], 19, "BO2: %i%%", userData.spO2);
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <start_wright_to_display_task+0x114>)
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800146c:	4613      	mov	r3, r2
 800146e:	4a20      	ldr	r2, [pc, #128]	; (80014f0 <start_wright_to_display_task+0x12c>)
 8001470:	2113      	movs	r1, #19
 8001472:	f009 ff7b 	bl	800b36c <sniprintf>
		  ssd1306_WriteString(temp[2], Font_7x10, White);
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <start_wright_to_display_task+0x124>)
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8001480:	2301      	movs	r3, #1
 8001482:	ca06      	ldmia	r2, {r1, r2}
 8001484:	f000 fd2c 	bl	8001ee0 <ssd1306_WriteString>


		  ssd1306_SetCursor(0,40);
 8001488:	2128      	movs	r1, #40	; 0x28
 800148a:	2000      	movs	r0, #0
 800148c:	f000 fd4e 	bl	8001f2c <ssd1306_SetCursor>
		  snprintf(temp[3], 19, "Steps: %i", userData.steps);
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <start_wright_to_display_task+0x114>)
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800149c:	4613      	mov	r3, r2
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <start_wright_to_display_task+0x130>)
 80014a0:	2113      	movs	r1, #19
 80014a2:	f009 ff63 	bl	800b36c <sniprintf>
		  ssd1306_WriteString(temp[3], Font_7x10, White);
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <start_wright_to_display_task+0x124>)
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80014b0:	2301      	movs	r3, #1
 80014b2:	ca06      	ldmia	r2, {r1, r2}
 80014b4:	f000 fd14 	bl	8001ee0 <ssd1306_WriteString>
		  ssd1306_UpdateScreen();
 80014b8:	f000 fc0e 	bl	8001cd8 <ssd1306_UpdateScreen>

	  xSemaphoreGive(i2CMutexHandle);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <start_wright_to_display_task+0x110>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	f007 fb61 	bl	8008b8c <xQueueGenericSend>
	  }

	  osDelay(1000);
 80014ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ce:	f007 f849 	bl	8008564 <osDelay>
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 80014d2:	e77b      	b.n	80013cc <start_wright_to_display_task+0x8>
 80014d4:	200001d4 	.word	0x200001d4
 80014d8:	20000000 	.word	0x20000000
 80014dc:	0800bcac 	.word	0x0800bcac
 80014e0:	0800bcb0 	.word	0x0800bcb0
 80014e4:	0800bcb4 	.word	0x0800bcb4
 80014e8:	20000028 	.word	0x20000028
 80014ec:	0800bcd0 	.word	0x0800bcd0
 80014f0:	0800bcd8 	.word	0x0800bcd8
 80014f4:	0800bce4 	.word	0x0800bce4

080014f8 <start_read_heart_rate_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_heart_rate_task */
void start_read_heart_rate_task(void *argument)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

	//if(max30102_has_interrupt(&max30102))
	//{
		//taskENTER_CRITICAL();

		if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <start_read_heart_rate_task+0x54>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	4618      	mov	r0, r3
 800150a:	f007 fdb9 	bl	8009080 <xQueueSemaphoreTake>
 800150e:	4603      	mov	r3, r0
 8001510:	2b01      	cmp	r3, #1
 8001512:	d116      	bne.n	8001542 <start_read_heart_rate_task+0x4a>
		{
			uint8_t reg[2] = {0x00};
 8001514:	2300      	movs	r3, #0
 8001516:	81bb      	strh	r3, [r7, #12]
			    // Interrupt flag in registers 0x00 and 0x01 are cleared on read
			    max30102_read(&max30102, MAX30102_INTERRUPT_STATUS_1, reg, 2);
 8001518:	f107 020c 	add.w	r2, r7, #12
 800151c:	2302      	movs	r3, #2
 800151e:	2100      	movs	r1, #0
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <start_read_heart_rate_task+0x58>)
 8001522:	f005 fe30 	bl	8007186 <max30102_read>

			    if (!(reg[0] >> MAX30102_INTERRUPT_A_FULL) & 0x01)
 8001526:	7b3b      	ldrb	r3, [r7, #12]
 8001528:	b25b      	sxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	db02      	blt.n	8001534 <start_read_heart_rate_task+0x3c>
			    {

			        // FIFO almost full
			        max30102_read_fifo(&max30102);
 800152e:	4808      	ldr	r0, [pc, #32]	; (8001550 <start_read_heart_rate_task+0x58>)
 8001530:	f005 fff3 	bl	800751a <max30102_read_fifo>
			    }
			//max30102_interrupt_handler(&max30102);
			xSemaphoreGive(i2CMutexHandle);
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <start_read_heart_rate_task+0x54>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	f007 fb25 	bl	8008b8c <xQueueGenericSend>



		//taskEXIT_CRITICAL();
	//}
    osDelay(1000);
 8001542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001546:	f007 f80d 	bl	8008564 <osDelay>
		if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 800154a:	e7d9      	b.n	8001500 <start_read_heart_rate_task+0x8>
 800154c:	200001d4 	.word	0x200001d4
 8001550:	20000e58 	.word	0x20000e58

08001554 <start_read_acceloromater_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_read_acceloromater_task */
void start_read_acceloromater_task(void *argument)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


    osDelay(1000);
 800155c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001560:	f007 f800 	bl	8008564 <osDelay>
 8001564:	e7fa      	b.n	800155c <start_read_acceloromater_task+0x8>
	...

08001568 <start_date_and_time_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_date_and_time_task */
void start_date_and_time_task(void *argument)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_date_and_time_task */
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 8001570:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <start_date_and_time_task+0x8c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fd81 	bl	8009080 <xQueueSemaphoreTake>
 800157e:	4603      	mov	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	d132      	bne.n	80015ea <start_date_and_time_task+0x82>
	  {
		 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001584:	2200      	movs	r2, #0
 8001586:	491c      	ldr	r1, [pc, #112]	; (80015f8 <start_date_and_time_task+0x90>)
 8001588:	481c      	ldr	r0, [pc, #112]	; (80015fc <start_date_and_time_task+0x94>)
 800158a:	f004 fa9d 	bl	8005ac8 <HAL_RTC_GetDate>
		 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800158e:	2200      	movs	r2, #0
 8001590:	491b      	ldr	r1, [pc, #108]	; (8001600 <start_date_and_time_task+0x98>)
 8001592:	481a      	ldr	r0, [pc, #104]	; (80015fc <start_date_and_time_task+0x94>)
 8001594:	f004 f9b5 	bl	8005902 <HAL_RTC_GetTime>
		 if(sTime.Hours < 12){
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <start_date_and_time_task+0x98>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b0b      	cmp	r3, #11
 800159e:	d810      	bhi.n	80015c2 <start_date_and_time_task+0x5a>
			 userData.am = 1;
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <start_date_and_time_task+0x9c>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	721a      	strb	r2, [r3, #8]
			 if(sTime.Hours == 0){
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <start_date_and_time_task+0x98>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d103      	bne.n	80015b6 <start_date_and_time_task+0x4e>
				 userData.hour = 12;
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <start_date_and_time_task+0x9c>)
 80015b0:	220c      	movs	r2, #12
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e00d      	b.n	80015d2 <start_date_and_time_task+0x6a>
			 } else {
				 userData.hour = sTime.Hours;
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <start_date_and_time_task+0x98>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	461a      	mov	r2, r3
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <start_date_and_time_task+0x9c>)
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e007      	b.n	80015d2 <start_date_and_time_task+0x6a>
			 }

		 } else {
		 	userData.am = 0;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <start_date_and_time_task+0x9c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	721a      	strb	r2, [r3, #8]
		 	userData.hour = sTime.Hours - 12;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <start_date_and_time_task+0x98>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	3b0c      	subs	r3, #12
 80015ce:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <start_date_and_time_task+0x9c>)
 80015d0:	6013      	str	r3, [r2, #0]
		 }

		 	  userData.min = sTime.Minutes;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <start_date_and_time_task+0x98>)
 80015d4:	785b      	ldrb	r3, [r3, #1]
 80015d6:	461a      	mov	r2, r3
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <start_date_and_time_task+0x9c>)
 80015da:	605a      	str	r2, [r3, #4]
		 	  xSemaphoreGive(i2CMutexHandle);
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <start_date_and_time_task+0x8c>)
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	f007 fad1 	bl	8008b8c <xQueueGenericSend>
	  }

	  osDelay(1000);
 80015ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015ee:	f006 ffb9 	bl	8008564 <osDelay>
	  if(xSemaphoreTake(i2CMutexHandle, portMAX_DELAY) == pdTRUE)
 80015f2:	e7bd      	b.n	8001570 <start_date_and_time_task+0x8>
 80015f4:	200001d4 	.word	0x200001d4
 80015f8:	200000bc 	.word	0x200000bc
 80015fc:	20000114 	.word	0x20000114
 8001600:	200000a8 	.word	0x200000a8
 8001604:	20000000 	.word	0x20000000

08001608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800161a:	f000 fce9 	bl	8001ff0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40001000 	.word	0x40001000

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	e7fe      	b.n	8001634 <Error_Handler+0x8>
	...

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_MspInit+0x4c>)
 8001640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_MspInit+0x4c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6613      	str	r3, [r2, #96]	; 0x60
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_MspInit+0x4c>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_MspInit+0x4c>)
 8001658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6593      	str	r3, [r2, #88]	; 0x58
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_MspInit+0x4c>)
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	210f      	movs	r1, #15
 8001672:	f06f 0001 	mvn.w	r0, #1
 8001676:	f000 fdb7 	bl	80021e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0ac      	sub	sp, #176	; 0xb0
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2288      	movs	r2, #136	; 0x88
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f009 fe93 	bl	800b3d4 <memset>
  if(hi2c->Instance==I2C1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a29      	ldr	r2, [pc, #164]	; (8001758 <HAL_I2C_MspInit+0xd0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d14b      	bne.n	8001750 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016b8:	2340      	movs	r3, #64	; 0x40
 80016ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fb3b 	bl	8004d40 <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80016d0:	f7ff ffac 	bl	800162c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_I2C_MspInit+0xd4>)
 80016d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <HAL_I2C_MspInit+0xd4>)
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_I2C_MspInit+0xd4>)
 80016e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f4:	2312      	movs	r3, #18
 80016f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001706:	2304      	movs	r3, #4
 8001708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001710:	4619      	mov	r1, r3
 8001712:	4813      	ldr	r0, [pc, #76]	; (8001760 <HAL_I2C_MspInit+0xd8>)
 8001714:	f000 fde2 	bl	80022dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_I2C_MspInit+0xd4>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_I2C_MspInit+0xd4>)
 800171e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001722:	6593      	str	r3, [r2, #88]	; 0x58
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_I2C_MspInit+0xd4>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2105      	movs	r1, #5
 8001734:	201f      	movs	r0, #31
 8001736:	f000 fd57 	bl	80021e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800173a:	201f      	movs	r0, #31
 800173c:	f000 fd70 	bl	8002220 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2105      	movs	r1, #5
 8001744:	2020      	movs	r0, #32
 8001746:	f000 fd4f 	bl	80021e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800174a:	2020      	movs	r0, #32
 800174c:	f000 fd68 	bl	8002220 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	37b0      	adds	r7, #176	; 0xb0
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40005400 	.word	0x40005400
 800175c:	40021000 	.word	0x40021000
 8001760:	48000400 	.word	0x48000400

08001764 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b0aa      	sub	sp, #168	; 0xa8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	2288      	movs	r2, #136	; 0x88
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f009 fe25 	bl	800b3d4 <memset>
  if(hrtc->Instance==RTC)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a25      	ldr	r2, [pc, #148]	; (8001824 <HAL_RTC_MspInit+0xc0>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d142      	bne.n	800181a <HAL_RTC_MspInit+0xb6>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001798:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800179a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	4618      	mov	r0, r3
 80017a8:	f003 faca 	bl	8004d40 <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 80017b2:	f7ff ff3b 	bl	800162c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <HAL_RTC_MspInit+0xc4>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <HAL_RTC_MspInit+0xc4>)
 80017be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_RTC_MspInit+0xc4>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_RTC_MspInit+0xc4>)
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RTC_MspInit+0xc4>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT_CALIB
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80017de:	f248 0304 	movw	r3, #32772	; 0x8004
 80017e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001802:	4619      	mov	r1, r3
 8001804:	4809      	ldr	r0, [pc, #36]	; (800182c <HAL_RTC_MspInit+0xc8>)
 8001806:	f000 fd69 	bl	80022dc <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	2029      	movs	r0, #41	; 0x29
 8001810:	f000 fcea 	bl	80021e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001814:	2029      	movs	r0, #41	; 0x29
 8001816:	f000 fd03 	bl	8002220 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	37a8      	adds	r7, #168	; 0xa8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40002800 	.word	0x40002800
 8001828:	40021000 	.word	0x40021000
 800182c:	48000400 	.word	0x48000400

08001830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ac      	sub	sp, #176	; 0xb0
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2288      	movs	r2, #136	; 0x88
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fdbf 	bl	800b3d4 <memset>
  if(huart->Instance==USART2)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a21      	ldr	r2, [pc, #132]	; (80018e0 <HAL_UART_MspInit+0xb0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d13b      	bne.n	80018d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001860:	2302      	movs	r3, #2
 8001862:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001864:	2300      	movs	r3, #0
 8001866:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fa67 	bl	8004d40 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001878:	f7ff fed8 	bl	800162c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_UART_MspInit+0xb4>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <HAL_UART_MspInit+0xb4>)
 8001882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001886:	6593      	str	r3, [r2, #88]	; 0x58
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_UART_MspInit+0xb4>)
 800188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_UART_MspInit+0xb4>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_UART_MspInit+0xb4>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_UART_MspInit+0xb4>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ac:	230c      	movs	r3, #12
 80018ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018be:	2303      	movs	r3, #3
 80018c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018c4:	2307      	movs	r3, #7
 80018c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d4:	f000 fd02 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	37b0      	adds	r7, #176	; 0xb0
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40004400 	.word	0x40004400
 80018e4:	40021000 	.word	0x40021000

080018e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018f6:	4b34      	ldr	r3, [pc, #208]	; (80019c8 <HAL_InitTick+0xe0>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	4a33      	ldr	r2, [pc, #204]	; (80019c8 <HAL_InitTick+0xe0>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6593      	str	r3, [r2, #88]	; 0x58
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <HAL_InitTick+0xe0>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800190e:	f107 0210 	add.w	r2, r7, #16
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f003 f97f 	bl	8004c1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001928:	f003 f94c 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 800192c:	6378      	str	r0, [r7, #52]	; 0x34
 800192e:	e004      	b.n	800193a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001930:	f003 f948 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8001934:	4603      	mov	r3, r0
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193c:	4a23      	ldr	r2, [pc, #140]	; (80019cc <HAL_InitTick+0xe4>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9b      	lsrs	r3, r3, #18
 8001944:	3b01      	subs	r3, #1
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_InitTick+0xe8>)
 800194a:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <HAL_InitTick+0xec>)
 800194c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800194e:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <HAL_InitTick+0xe8>)
 8001950:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001954:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001956:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <HAL_InitTick+0xe8>)
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_InitTick+0xe8>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_InitTick+0xe8>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_InitTick+0xe8>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800196e:	4818      	ldr	r0, [pc, #96]	; (80019d0 <HAL_InitTick+0xe8>)
 8001970:	f004 fbe9 	bl	8006146 <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800197a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800197e:	2b00      	cmp	r3, #0
 8001980:	d11b      	bne.n	80019ba <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001982:	4813      	ldr	r0, [pc, #76]	; (80019d0 <HAL_InitTick+0xe8>)
 8001984:	f004 fc40 	bl	8006208 <HAL_TIM_Base_Start_IT>
 8001988:	4603      	mov	r3, r0
 800198a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800198e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001992:	2b00      	cmp	r3, #0
 8001994:	d111      	bne.n	80019ba <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001996:	2036      	movs	r0, #54	; 0x36
 8001998:	f000 fc42 	bl	8002220 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b0f      	cmp	r3, #15
 80019a0:	d808      	bhi.n	80019b4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019a2:	2200      	movs	r2, #0
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	2036      	movs	r0, #54	; 0x36
 80019a8:	f000 fc1e 	bl	80021e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_InitTick+0xf0>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e002      	b.n	80019ba <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3738      	adds	r7, #56	; 0x38
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	20000f60 	.word	0x20000f60
 80019d4:	40001000 	.word	0x40001000
 80019d8:	20000030 	.word	0x20000030

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(heartRateInterrupt_Pin);
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	f000 fe27 	bl	8002660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <I2C1_EV_IRQHandler+0x10>)
 8001a1e:	f001 f9f5 	bl	8002e0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200000c0 	.word	0x200000c0

08001a2c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <I2C1_ER_IRQHandler+0x10>)
 8001a32:	f001 fa05 	bl	8002e40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200000c0 	.word	0x200000c0

08001a40 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <RTC_Alarm_IRQHandler+0x10>)
 8001a46:	f004 f9c9 	bl	8005ddc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000114 	.word	0x20000114

08001a54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM6_DAC_IRQHandler+0x10>)
 8001a5a:	f004 fc45 	bl	80062e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000f60 	.word	0x20000f60

08001a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <_sbrk+0x5c>)
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <_sbrk+0x60>)
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <_sbrk+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <_sbrk+0x64>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <_sbrk+0x68>)
 8001a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d207      	bcs.n	8001aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a98:	f009 fd0a 	bl	800b4b0 <__errno>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	e009      	b.n	8001abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <_sbrk+0x64>)
 8001ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20018000 	.word	0x20018000
 8001ac8:	00000400 	.word	0x00000400
 8001acc:	20000fac 	.word	0x20000fac
 8001ad0:	20005588 	.word	0x20005588

08001ad4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <SystemInit+0x20>)
 8001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <SystemInit+0x20>)
 8001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001afc:	f7ff ffea 	bl	8001ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b00:	480c      	ldr	r0, [pc, #48]	; (8001b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b02:	490d      	ldr	r1, [pc, #52]	; (8001b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <LoopForever+0xe>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b08:	e002      	b.n	8001b10 <LoopCopyDataInit>

08001b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b0e:	3304      	adds	r3, #4

08001b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b14:	d3f9      	bcc.n	8001b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b18:	4c0a      	ldr	r4, [pc, #40]	; (8001b44 <LoopForever+0x16>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b1c:	e001      	b.n	8001b22 <LoopFillZerobss>

08001b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b20:	3204      	adds	r2, #4

08001b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b24:	d3fb      	bcc.n	8001b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b26:	f009 fcc9 	bl	800b4bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2a:	f7ff f915 	bl	8000d58 <main>

08001b2e <LoopForever>:

LoopForever:
    b LoopForever
 8001b2e:	e7fe      	b.n	8001b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b38:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001b3c:	0800c6bc 	.word	0x0800c6bc
  ldr r2, =_sbss
 8001b40:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001b44:	20005584 	.word	0x20005584

08001b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b48:	e7fe      	b.n	8001b48 <ADC1_2_IRQHandler>

08001b4a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	9301      	str	r3, [sp, #4]
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	2301      	movs	r3, #1
 8001b72:	2200      	movs	r2, #0
 8001b74:	2178      	movs	r1, #120	; 0x78
 8001b76:	4803      	ldr	r0, [pc, #12]	; (8001b84 <ssd1306_WriteCommand+0x2c>)
 8001b78:	f001 f834 	bl	8002be4 <HAL_I2C_Mem_Write>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200000c0 	.word	0x200000c0

08001b88 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af04      	add	r7, sp, #16
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9a:	9202      	str	r2, [sp, #8]
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	2240      	movs	r2, #64	; 0x40
 8001ba6:	2178      	movs	r1, #120	; 0x78
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <ssd1306_WriteData+0x30>)
 8001baa:	f001 f81b 	bl	8002be4 <HAL_I2C_Mem_Write>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	200000c0 	.word	0x200000c0

08001bbc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001bc0:	f7ff ffc3 	bl	8001b4a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001bc4:	2064      	movs	r0, #100	; 0x64
 8001bc6:	f000 fa33 	bl	8002030 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f9da 	bl	8001f84 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001bd0:	2020      	movs	r0, #32
 8001bd2:	f7ff ffc1 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff ffbe 	bl	8001b58 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bdc:	20b0      	movs	r0, #176	; 0xb0
 8001bde:	f7ff ffbb 	bl	8001b58 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001be2:	20c8      	movs	r0, #200	; 0xc8
 8001be4:	f7ff ffb8 	bl	8001b58 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff ffb5 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001bee:	2010      	movs	r0, #16
 8001bf0:	f7ff ffb2 	bl	8001b58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001bf4:	2040      	movs	r0, #64	; 0x40
 8001bf6:	f7ff ffaf 	bl	8001b58 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001bfa:	20ff      	movs	r0, #255	; 0xff
 8001bfc:	f000 f9ae 	bl	8001f5c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c00:	20a1      	movs	r0, #161	; 0xa1
 8001c02:	f7ff ffa9 	bl	8001b58 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c06:	20a6      	movs	r0, #166	; 0xa6
 8001c08:	f7ff ffa6 	bl	8001b58 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c0c:	20a8      	movs	r0, #168	; 0xa8
 8001c0e:	f7ff ffa3 	bl	8001b58 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c12:	203f      	movs	r0, #63	; 0x3f
 8001c14:	f7ff ffa0 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c18:	20a4      	movs	r0, #164	; 0xa4
 8001c1a:	f7ff ff9d 	bl	8001b58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c1e:	20d3      	movs	r0, #211	; 0xd3
 8001c20:	f7ff ff9a 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ff97 	bl	8001b58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c2a:	20d5      	movs	r0, #213	; 0xd5
 8001c2c:	f7ff ff94 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001c30:	20f0      	movs	r0, #240	; 0xf0
 8001c32:	f7ff ff91 	bl	8001b58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001c36:	20d9      	movs	r0, #217	; 0xd9
 8001c38:	f7ff ff8e 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001c3c:	2022      	movs	r0, #34	; 0x22
 8001c3e:	f7ff ff8b 	bl	8001b58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001c42:	20da      	movs	r0, #218	; 0xda
 8001c44:	f7ff ff88 	bl	8001b58 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001c48:	2012      	movs	r0, #18
 8001c4a:	f7ff ff85 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001c4e:	20db      	movs	r0, #219	; 0xdb
 8001c50:	f7ff ff82 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001c54:	2020      	movs	r0, #32
 8001c56:	f7ff ff7f 	bl	8001b58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001c5a:	208d      	movs	r0, #141	; 0x8d
 8001c5c:	f7ff ff7c 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001c60:	2014      	movs	r0, #20
 8001c62:	f7ff ff79 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001c66:	2001      	movs	r0, #1
 8001c68:	f000 f98c 	bl	8001f84 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f000 f80f 	bl	8001c90 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001c72:	f000 f831 	bl	8001cd8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <ssd1306_Init+0xd0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <ssd1306_Init+0xd0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001c82:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <ssd1306_Init+0xd0>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	711a      	strb	r2, [r3, #4]
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200013b0 	.word	0x200013b0

08001c90 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	e00d      	b.n	8001cbc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <ssd1306_Fill+0x1a>
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	e000      	b.n	8001cac <ssd1306_Fill+0x1c>
 8001caa:	21ff      	movs	r1, #255	; 0xff
 8001cac:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <ssd1306_Fill+0x44>)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc2:	d3ed      	bcc.n	8001ca0 <ssd1306_Fill+0x10>
    }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000fb0 	.word	0x20000fb0

08001cd8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001cde:	2300      	movs	r3, #0
 8001ce0:	71fb      	strb	r3, [r7, #7]
 8001ce2:	e016      	b.n	8001d12 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	3b50      	subs	r3, #80	; 0x50
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff34 	bl	8001b58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff ff31 	bl	8001b58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001cf6:	2010      	movs	r0, #16
 8001cf8:	f7ff ff2e 	bl	8001b58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <ssd1306_UpdateScreen+0x4c>)
 8001d02:	4413      	add	r3, r2
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff3e 	bl	8001b88 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	71fb      	strb	r3, [r7, #7]
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b07      	cmp	r3, #7
 8001d16:	d9e5      	bls.n	8001ce4 <ssd1306_UpdateScreen+0xc>
    }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000fb0 	.word	0x20000fb0

08001d28 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	460b      	mov	r3, r1
 8001d34:	71bb      	strb	r3, [r7, #6]
 8001d36:	4613      	mov	r3, r2
 8001d38:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	db3d      	blt.n	8001dbe <ssd1306_DrawPixel+0x96>
 8001d42:	79bb      	ldrb	r3, [r7, #6]
 8001d44:	2b3f      	cmp	r3, #63	; 0x3f
 8001d46:	d83a      	bhi.n	8001dbe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001d48:	797b      	ldrb	r3, [r7, #5]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d11a      	bne.n	8001d84 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	79bb      	ldrb	r3, [r7, #6]
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	b2d8      	uxtb	r0, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	01db      	lsls	r3, r3, #7
 8001d5a:	4413      	add	r3, r2
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <ssd1306_DrawPixel+0xa4>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	b25a      	sxtb	r2, r3
 8001d62:	79bb      	ldrb	r3, [r7, #6]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b259      	sxtb	r1, r3
 8001d74:	79fa      	ldrb	r2, [r7, #7]
 8001d76:	4603      	mov	r3, r0
 8001d78:	01db      	lsls	r3, r3, #7
 8001d7a:	4413      	add	r3, r2
 8001d7c:	b2c9      	uxtb	r1, r1
 8001d7e:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <ssd1306_DrawPixel+0xa4>)
 8001d80:	54d1      	strb	r1, [r2, r3]
 8001d82:	e01d      	b.n	8001dc0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d84:	79fa      	ldrb	r2, [r7, #7]
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	08db      	lsrs	r3, r3, #3
 8001d8a:	b2d8      	uxtb	r0, r3
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	01db      	lsls	r3, r3, #7
 8001d90:	4413      	add	r3, r2
 8001d92:	4a0e      	ldr	r2, [pc, #56]	; (8001dcc <ssd1306_DrawPixel+0xa4>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	b25a      	sxtb	r2, r3
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	4013      	ands	r3, r2
 8001dac:	b259      	sxtb	r1, r3
 8001dae:	79fa      	ldrb	r2, [r7, #7]
 8001db0:	4603      	mov	r3, r0
 8001db2:	01db      	lsls	r3, r3, #7
 8001db4:	4413      	add	r3, r2
 8001db6:	b2c9      	uxtb	r1, r1
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <ssd1306_DrawPixel+0xa4>)
 8001dba:	54d1      	strb	r1, [r2, r3]
 8001dbc:	e000      	b.n	8001dc0 <ssd1306_DrawPixel+0x98>
        return;
 8001dbe:	bf00      	nop
    }
}
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000fb0 	.word	0x20000fb0

08001dd0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	1d38      	adds	r0, r7, #4
 8001dda:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dde:	461a      	mov	r2, r3
 8001de0:	4623      	mov	r3, r4
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	4613      	mov	r3, r2
 8001de6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b1f      	cmp	r3, #31
 8001dec:	d902      	bls.n	8001df4 <ssd1306_WriteChar+0x24>
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b7e      	cmp	r3, #126	; 0x7e
 8001df2:	d901      	bls.n	8001df8 <ssd1306_WriteChar+0x28>
        return 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e06d      	b.n	8001ed4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001df8:	4b38      	ldr	r3, [pc, #224]	; (8001edc <ssd1306_WriteChar+0x10c>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	793b      	ldrb	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	dc06      	bgt.n	8001e14 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001e06:	4b35      	ldr	r3, [pc, #212]	; (8001edc <ssd1306_WriteChar+0x10c>)
 8001e08:	885b      	ldrh	r3, [r3, #2]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	797b      	ldrb	r3, [r7, #5]
 8001e0e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e10:	2b40      	cmp	r3, #64	; 0x40
 8001e12:	dd01      	ble.n	8001e18 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e05d      	b.n	8001ed4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	e04c      	b.n	8001eb8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	3b20      	subs	r3, #32
 8001e24:	7979      	ldrb	r1, [r7, #5]
 8001e26:	fb01 f303 	mul.w	r3, r1, r3
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	440b      	add	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	e034      	b.n	8001ea8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d012      	beq.n	8001e74 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <ssd1306_WriteChar+0x10c>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	b2d8      	uxtb	r0, r3
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <ssd1306_WriteChar+0x10c>)
 8001e5e:	885b      	ldrh	r3, [r3, #2]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	4413      	add	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	7bba      	ldrb	r2, [r7, #14]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7ff ff5b 	bl	8001d28 <ssd1306_DrawPixel>
 8001e72:	e016      	b.n	8001ea2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <ssd1306_WriteChar+0x10c>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	b2d8      	uxtb	r0, r3
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <ssd1306_WriteChar+0x10c>)
 8001e84:	885b      	ldrh	r3, [r3, #2]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	b2d9      	uxtb	r1, r3
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f7ff ff43 	bl	8001d28 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	793b      	ldrb	r3, [r7, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d3c5      	bcc.n	8001e3e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
 8001eb8:	797b      	ldrb	r3, [r7, #5]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d3ad      	bcc.n	8001e1e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <ssd1306_WriteChar+0x10c>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	793b      	ldrb	r3, [r7, #4]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	4b03      	ldr	r3, [pc, #12]	; (8001edc <ssd1306_WriteChar+0x10c>)
 8001ed0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3724      	adds	r7, #36	; 0x24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}
 8001edc:	200013b0 	.word	0x200013b0

08001ee0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	1d38      	adds	r0, r7, #4
 8001eea:	e880 0006 	stmia.w	r0, {r1, r2}
 8001eee:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001ef0:	e012      	b.n	8001f18 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	7818      	ldrb	r0, [r3, #0]
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	1d3a      	adds	r2, r7, #4
 8001efa:	ca06      	ldmia	r2, {r1, r2}
 8001efc:	f7ff ff68 	bl	8001dd0 <ssd1306_WriteChar>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d002      	beq.n	8001f12 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	e008      	b.n	8001f24 <ssd1306_WriteString+0x44>
        }
        str++;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3301      	adds	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e8      	bne.n	8001ef2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	781b      	ldrb	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	460a      	mov	r2, r1
 8001f36:	71fb      	strb	r3, [r7, #7]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <ssd1306_SetCursor+0x2c>)
 8001f42:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f44:	79bb      	ldrb	r3, [r7, #6]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <ssd1306_SetCursor+0x2c>)
 8001f4a:	805a      	strh	r2, [r3, #2]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	200013b0 	.word	0x200013b0

08001f5c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001f66:	2381      	movs	r3, #129	; 0x81
 8001f68:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fdf3 	bl	8001b58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fdef 	bl	8001b58 <ssd1306_WriteCommand>
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f94:	23af      	movs	r3, #175	; 0xaf
 8001f96:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <ssd1306_SetDisplayOn+0x38>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	715a      	strb	r2, [r3, #5]
 8001f9e:	e004      	b.n	8001faa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001fa0:	23ae      	movs	r3, #174	; 0xae
 8001fa2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <ssd1306_SetDisplayOn+0x38>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fdd3 	bl	8001b58 <ssd1306_WriteCommand>
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200013b0 	.word	0x200013b0

08001fc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fca:	2003      	movs	r0, #3
 8001fcc:	f000 f901 	bl	80021d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fd0:	200f      	movs	r0, #15
 8001fd2:	f7ff fc89 	bl	80018e8 <HAL_InitTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	71fb      	strb	r3, [r7, #7]
 8001fe0:	e001      	b.n	8001fe6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fe2:	f7ff fb29 	bl	8001638 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000034 	.word	0x20000034
 8002014:	200013b8 	.word	0x200013b8

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200013b8 	.word	0x200013b8

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_Delay+0x44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000034 	.word	0x20000034

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	; (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff4c 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021fa:	f7ff ff61 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 80021fe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	6978      	ldr	r0, [r7, #20]
 8002206:	f7ff ffb1 	bl	800216c <NVIC_EncodePriority>
 800220a:	4602      	mov	r2, r0
 800220c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff80 	bl	8002118 <__NVIC_SetPriority>
}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff ff54 	bl	80020dc <__NVIC_EnableIRQ>
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d005      	beq.n	8002260 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e029      	b.n	80022b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 020e 	bic.w	r2, r2, #14
 800226e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	f003 021c 	and.w	r2, r3, #28
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	2101      	movs	r1, #1
 800228e:	fa01 f202 	lsl.w	r2, r1, r2
 8002292:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
    }
  }
  return status;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022cc:	b2db      	uxtb	r3, r3
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ea:	e17f      	b.n	80025ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2101      	movs	r1, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8171 	beq.w	80025e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b01      	cmp	r3, #1
 800230e:	d005      	beq.n	800231c <HAL_GPIO_Init+0x40>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d130      	bne.n	800237e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002352:	2201      	movs	r2, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	f003 0201 	and.w	r2, r3, #1
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b03      	cmp	r3, #3
 8002388:	d118      	bne.n	80023bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002390:	2201      	movs	r2, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	08db      	lsrs	r3, r3, #3
 80023a6:	f003 0201 	and.w	r2, r3, #1
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d017      	beq.n	80023f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d123      	bne.n	800244c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	6939      	ldr	r1, [r7, #16]
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80ac 	beq.w	80025e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	4b5f      	ldr	r3, [pc, #380]	; (800260c <HAL_GPIO_Init+0x330>)
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	4a5e      	ldr	r2, [pc, #376]	; (800260c <HAL_GPIO_Init+0x330>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6613      	str	r3, [r2, #96]	; 0x60
 800249a:	4b5c      	ldr	r3, [pc, #368]	; (800260c <HAL_GPIO_Init+0x330>)
 800249c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a6:	4a5a      	ldr	r2, [pc, #360]	; (8002610 <HAL_GPIO_Init+0x334>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d0:	d025      	beq.n	800251e <HAL_GPIO_Init+0x242>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <HAL_GPIO_Init+0x338>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d01f      	beq.n	800251a <HAL_GPIO_Init+0x23e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4e      	ldr	r2, [pc, #312]	; (8002618 <HAL_GPIO_Init+0x33c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x23a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_GPIO_Init+0x340>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x236>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4c      	ldr	r2, [pc, #304]	; (8002620 <HAL_GPIO_Init+0x344>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x232>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4b      	ldr	r2, [pc, #300]	; (8002624 <HAL_GPIO_Init+0x348>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x22e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4a      	ldr	r2, [pc, #296]	; (8002628 <HAL_GPIO_Init+0x34c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x22a>
 8002502:	2306      	movs	r3, #6
 8002504:	e00c      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002506:	2307      	movs	r3, #7
 8002508:	e00a      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800250a:	2305      	movs	r3, #5
 800250c:	e008      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800250e:	2304      	movs	r3, #4
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002512:	2303      	movs	r3, #3
 8002514:	e004      	b.n	8002520 <HAL_GPIO_Init+0x244>
 8002516:	2302      	movs	r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x244>
 800251e:	2300      	movs	r3, #0
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	f002 0203 	and.w	r2, r2, #3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4093      	lsls	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002530:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_GPIO_Init+0x334>)
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_GPIO_Init+0x350>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <HAL_GPIO_Init+0x350>)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_GPIO_Init+0x350>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_GPIO_Init+0x350>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_GPIO_Init+0x350>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_GPIO_Init+0x350>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_GPIO_Init+0x350>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_GPIO_Init+0x350>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f47f ae78 	bne.w	80022ec <HAL_GPIO_Init+0x10>
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	371c      	adds	r7, #28
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40010000 	.word	0x40010000
 8002614:	48000400 	.word	0x48000400
 8002618:	48000800 	.word	0x48000800
 800261c:	48000c00 	.word	0x48000c00
 8002620:	48001000 	.word	0x48001000
 8002624:	48001400 	.word	0x48001400
 8002628:	48001800 	.word	0x48001800
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800264c:	e002      	b.n	8002654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d006      	beq.n	8002684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fe8c 	bl	800139c <HAL_GPIO_EXTI_Callback>
  }
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40010400 	.word	0x40010400

08002690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e08d      	b.n	80027be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe ffe6 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	; 0x24
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e006      	b.n	8002718 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002716:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d108      	bne.n	8002732 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	e007      	b.n	8002742 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002740:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002754:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002764:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69d9      	ldr	r1, [r3, #28]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1a      	ldr	r2, [r3, #32]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	461a      	mov	r2, r3
 80027d4:	460b      	mov	r3, r1
 80027d6:	817b      	strh	r3, [r7, #10]
 80027d8:	4613      	mov	r3, r2
 80027da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	f040 80fd 	bne.w	80029e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0x30>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0f6      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x21e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002800:	f7ff fc0a 	bl	8002018 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2319      	movs	r3, #25
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f001 f89b 	bl	800394e <I2C_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e0e1      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2210      	movs	r2, #16
 800282e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	893a      	ldrh	r2, [r7, #8]
 8002842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2bff      	cmp	r3, #255	; 0xff
 8002852:	d906      	bls.n	8002862 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	22ff      	movs	r2, #255	; 0xff
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800285a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	e007      	b.n	8002872 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800286c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002870:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d024      	beq.n	80028c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	8979      	ldrh	r1, [r7, #10]
 80028b6:	4b4e      	ldr	r3, [pc, #312]	; (80029f0 <HAL_I2C_Master_Transmit+0x228>)
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f001 fa81 	bl	8003dc4 <I2C_TransferConfig>
 80028c2:	e066      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	8979      	ldrh	r1, [r7, #10]
 80028cc:	4b48      	ldr	r3, [pc, #288]	; (80029f0 <HAL_I2C_Master_Transmit+0x228>)
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f001 fa76 	bl	8003dc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028d8:	e05b      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	6a39      	ldr	r1, [r7, #32]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f001 f884 	bl	80039ec <I2C_WaitOnTXISFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e07b      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	781a      	ldrb	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d034      	beq.n	8002992 <HAL_I2C_Master_Transmit+0x1ca>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	d130      	bne.n	8002992 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	2200      	movs	r2, #0
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 f807 	bl	800394e <I2C_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e04d      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	2bff      	cmp	r3, #255	; 0xff
 8002952:	d90e      	bls.n	8002972 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	22ff      	movs	r2, #255	; 0xff
 8002958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295e:	b2da      	uxtb	r2, r3
 8002960:	8979      	ldrh	r1, [r7, #10]
 8002962:	2300      	movs	r3, #0
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f001 fa2a 	bl	8003dc4 <I2C_TransferConfig>
 8002970:	e00f      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	b2da      	uxtb	r2, r3
 8002982:	8979      	ldrh	r1, [r7, #10]
 8002984:	2300      	movs	r3, #0
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f001 fa19 	bl	8003dc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29b      	uxth	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d19e      	bne.n	80028da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	6a39      	ldr	r1, [r7, #32]
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f001 f86a 	bl	8003a7a <I2C_WaitOnSTOPFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e01a      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2220      	movs	r2, #32
 80029b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_I2C_Master_Transmit+0x22c>)
 80029c4:	400b      	ands	r3, r1
 80029c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	80002000 	.word	0x80002000
 80029f4:	fe00e800 	.word	0xfe00e800

080029f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	461a      	mov	r2, r3
 8002a04:	460b      	mov	r3, r1
 8002a06:	817b      	strh	r3, [r7, #10]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	f040 80db 	bne.w	8002bd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_I2C_Master_Receive+0x30>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e0d4      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x1da>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a30:	f7ff faf2 	bl	8002018 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2319      	movs	r3, #25
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 ff83 	bl	800394e <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0bf      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2222      	movs	r2, #34	; 0x22
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	893a      	ldrh	r2, [r7, #8]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2bff      	cmp	r3, #255	; 0xff
 8002a82:	d90e      	bls.n	8002aa2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	22ff      	movs	r2, #255	; 0xff
 8002a88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	8979      	ldrh	r1, [r7, #10]
 8002a92:	4b52      	ldr	r3, [pc, #328]	; (8002bdc <HAL_I2C_Master_Receive+0x1e4>)
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f001 f992 	bl	8003dc4 <I2C_TransferConfig>
 8002aa0:	e06d      	b.n	8002b7e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <HAL_I2C_Master_Receive+0x1e4>)
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f001 f981 	bl	8003dc4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ac2:	e05c      	b.n	8002b7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	6a39      	ldr	r1, [r7, #32]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f001 f819 	bl	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e07c      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d034      	beq.n	8002b7e <HAL_I2C_Master_Receive+0x186>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d130      	bne.n	8002b7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	2200      	movs	r2, #0
 8002b24:	2180      	movs	r1, #128	; 0x80
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 ff11 	bl	800394e <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e04d      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2bff      	cmp	r3, #255	; 0xff
 8002b3e:	d90e      	bls.n	8002b5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	22ff      	movs	r2, #255	; 0xff
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	8979      	ldrh	r1, [r7, #10]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f001 f934 	bl	8003dc4 <I2C_TransferConfig>
 8002b5c:	e00f      	b.n	8002b7e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	8979      	ldrh	r1, [r7, #10]
 8002b70:	2300      	movs	r3, #0
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f001 f923 	bl	8003dc4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d19d      	bne.n	8002ac4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	6a39      	ldr	r1, [r7, #32]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 ff74 	bl	8003a7a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e01a      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6859      	ldr	r1, [r3, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_I2C_Master_Receive+0x1e8>)
 8002bb0:	400b      	ands	r3, r1
 8002bb2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	80002400 	.word	0x80002400
 8002be0:	fe00e800 	.word	0xfe00e800

08002be4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	817b      	strh	r3, [r7, #10]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	813b      	strh	r3, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 80f9 	bne.w	8002dfe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_I2C_Mem_Write+0x34>
 8002c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d105      	bne.n	8002c24 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0ed      	b.n	8002e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2C_Mem_Write+0x4e>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0e6      	b.n	8002e00 <HAL_I2C_Mem_Write+0x21c>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c3a:	f7ff f9ed 	bl	8002018 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2319      	movs	r3, #25
 8002c46:	2201      	movs	r2, #1
 8002c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fe7e 	bl	800394e <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0d1      	b.n	8002e00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2221      	movs	r2, #33	; 0x21
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c84:	88f8      	ldrh	r0, [r7, #6]
 8002c86:	893a      	ldrh	r2, [r7, #8]
 8002c88:	8979      	ldrh	r1, [r7, #10]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	4603      	mov	r3, r0
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fa67 	bl	8003168 <I2C_RequestMemoryWrite>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0a9      	b.n	8002e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2bff      	cmp	r3, #255	; 0xff
 8002cb4:	d90e      	bls.n	8002cd4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	8979      	ldrh	r1, [r7, #10]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f001 f879 	bl	8003dc4 <I2C_TransferConfig>
 8002cd2:	e00f      	b.n	8002cf4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	8979      	ldrh	r1, [r7, #10]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f001 f868 	bl	8003dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fe77 	bl	80039ec <I2C_WaitOnTXISFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e07b      	b.n	8002e00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d034      	beq.n	8002dac <HAL_I2C_Mem_Write+0x1c8>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d130      	bne.n	8002dac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	2200      	movs	r2, #0
 8002d52:	2180      	movs	r1, #128	; 0x80
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fdfa 	bl	800394e <I2C_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e04d      	b.n	8002e00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2bff      	cmp	r3, #255	; 0xff
 8002d6c:	d90e      	bls.n	8002d8c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	22ff      	movs	r2, #255	; 0xff
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	8979      	ldrh	r1, [r7, #10]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f001 f81d 	bl	8003dc4 <I2C_TransferConfig>
 8002d8a:	e00f      	b.n	8002dac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	8979      	ldrh	r1, [r7, #10]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f001 f80c 	bl	8003dc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d19e      	bne.n	8002cf4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fe5d 	bl	8003a7a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e01a      	b.n	8002e00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_I2C_Mem_Write+0x224>)
 8002dde:	400b      	ands	r3, r1
 8002de0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	fe00e800 	.word	0xfe00e800

08002e0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00f      	beq.n	8002e82 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e80:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00f      	beq.n	8002eac <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f043 0208 	orr.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eaa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00f      	beq.n	8002ed6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	f043 0202 	orr.w	r2, r3, #2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 030b 	and.w	r3, r3, #11
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fbd7 	bl	800369c <I2C_ITError>
  }
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	70fb      	strb	r3, [r7, #3]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <I2C_Slave_ISR_IT+0x24>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e0e1      	b.n	800315e <I2C_Slave_ISR_IT+0x1e8>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002fb6:	6939      	ldr	r1, [r7, #16]
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fa09 	bl	80033d0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d04b      	beq.n	8003060 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d046      	beq.n	8003060 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d128      	bne.n	800302e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b28      	cmp	r3, #40	; 0x28
 8002fe6:	d108      	bne.n	8002ffa <I2C_Slave_ISR_IT+0x84>
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fee:	d104      	bne.n	8002ffa <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ff0:	6939      	ldr	r1, [r7, #16]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fafe 	bl	80035f4 <I2C_ITListenCplt>
 8002ff8:	e031      	b.n	800305e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b29      	cmp	r3, #41	; 0x29
 8003004:	d10e      	bne.n	8003024 <I2C_Slave_ISR_IT+0xae>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800300c:	d00a      	beq.n	8003024 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2210      	movs	r2, #16
 8003014:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fc57 	bl	80038ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f97b 	bl	8003318 <I2C_ITSlaveSeqCplt>
 8003022:	e01c      	b.n	800305e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800302c:	e08f      	b.n	800314e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2210      	movs	r2, #16
 8003034:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <I2C_Slave_ISR_IT+0xda>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304e:	d17e      	bne.n	800314e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	4619      	mov	r1, r3
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fb20 	bl	800369c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800305c:	e077      	b.n	800314e <I2C_Slave_ISR_IT+0x1d8>
 800305e:	e076      	b.n	800314e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d02f      	beq.n	80030ca <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02a      	beq.n	80030ca <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d018      	beq.n	80030b0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d14b      	bne.n	8003152 <I2C_Slave_ISR_IT+0x1dc>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030c0:	d047      	beq.n	8003152 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f928 	bl	8003318 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80030c8:	e043      	b.n	8003152 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d009      	beq.n	80030e8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d004      	beq.n	80030e8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80030de:	6939      	ldr	r1, [r7, #16]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f895 	bl	8003210 <I2C_ITAddrCplt>
 80030e6:	e035      	b.n	8003154 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d030      	beq.n	8003154 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d02b      	beq.n	8003154 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d018      	beq.n	8003138 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
 8003136:	e00d      	b.n	8003154 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800313e:	d002      	beq.n	8003146 <I2C_Slave_ISR_IT+0x1d0>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f8e6 	bl	8003318 <I2C_ITSlaveSeqCplt>
 800314c:	e002      	b.n	8003154 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003152:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	8979      	ldrh	r1, [r7, #10]
 8003188:	4b20      	ldr	r3, [pc, #128]	; (800320c <I2C_RequestMemoryWrite+0xa4>)
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fe17 	bl	8003dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	69b9      	ldr	r1, [r7, #24]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fc26 	bl	80039ec <I2C_WaitOnTXISFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e02c      	b.n	8003204 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031b0:	893b      	ldrh	r3, [r7, #8]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
 80031ba:	e015      	b.n	80031e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031bc:	893b      	ldrh	r3, [r7, #8]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ca:	69fa      	ldr	r2, [r7, #28]
 80031cc:	69b9      	ldr	r1, [r7, #24]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fc0c 	bl	80039ec <I2C_WaitOnTXISFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e012      	b.n	8003204 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031de:	893b      	ldrh	r3, [r7, #8]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2180      	movs	r1, #128	; 0x80
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fbab 	bl	800394e <I2C_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	80002000 	.word	0x80002000

08003210 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003226:	2b28      	cmp	r3, #40	; 0x28
 8003228:	d16a      	bne.n	8003300 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	b29b      	uxth	r3, r3
 8003244:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003248:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003256:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	b29b      	uxth	r3, r3
 8003260:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003264:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d138      	bne.n	80032e0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	09db      	lsrs	r3, r3, #7
 8003272:	b29a      	uxth	r2, r3
 8003274:	89bb      	ldrh	r3, [r7, #12]
 8003276:	4053      	eors	r3, r2
 8003278:	b29b      	uxth	r3, r3
 800327a:	f003 0306 	and.w	r3, r3, #6
 800327e:	2b00      	cmp	r3, #0
 8003280:	d11c      	bne.n	80032bc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003282:	897b      	ldrh	r3, [r7, #10]
 8003284:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	2b02      	cmp	r3, #2
 8003296:	d13b      	bne.n	8003310 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2208      	movs	r2, #8
 80032a4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032ae:	89ba      	ldrh	r2, [r7, #12]
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	4619      	mov	r1, r3
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fe32 	bl	8002f1e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80032ba:	e029      	b.n	8003310 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80032bc:	893b      	ldrh	r3, [r7, #8]
 80032be:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80032c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fdaf 	bl	8003e28 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032d2:	89ba      	ldrh	r2, [r7, #12]
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff fe20 	bl	8002f1e <HAL_I2C_AddrCallback>
}
 80032de:	e017      	b.n	8003310 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80032e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fd9f 	bl	8003e28 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032f2:	89ba      	ldrh	r2, [r7, #12]
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fe10 	bl	8002f1e <HAL_I2C_AddrCallback>
}
 80032fe:	e007      	b.n	8003310 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2208      	movs	r2, #8
 8003306:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e00c      	b.n	8003366 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003364:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b29      	cmp	r3, #41	; 0x29
 8003370:	d112      	bne.n	8003398 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2228      	movs	r2, #40	; 0x28
 8003376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2221      	movs	r2, #33	; 0x21
 800337e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003380:	2101      	movs	r1, #1
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fd50 	bl	8003e28 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff fdb0 	bl	8002ef6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003396:	e017      	b.n	80033c8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b2a      	cmp	r3, #42	; 0x2a
 80033a2:	d111      	bne.n	80033c8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2228      	movs	r2, #40	; 0x28
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2222      	movs	r2, #34	; 0x22
 80033b0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033b2:	2102      	movs	r1, #2
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fd37 	bl	8003e28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fda1 	bl	8002f0a <HAL_I2C_SlaveRxCpltCallback>
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2220      	movs	r2, #32
 80033f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b21      	cmp	r3, #33	; 0x21
 80033fa:	d002      	beq.n	8003402 <I2C_ITSlaveCplt+0x32>
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b29      	cmp	r3, #41	; 0x29
 8003400:	d108      	bne.n	8003414 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003402:	f248 0101 	movw	r1, #32769	; 0x8001
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fd0e 	bl	8003e28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2221      	movs	r2, #33	; 0x21
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
 8003412:	e019      	b.n	8003448 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b22      	cmp	r3, #34	; 0x22
 8003418:	d002      	beq.n	8003420 <I2C_ITSlaveCplt+0x50>
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b2a      	cmp	r3, #42	; 0x2a
 800341e:	d108      	bne.n	8003432 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003420:	f248 0102 	movw	r1, #32770	; 0x8002
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fcff 	bl	8003e28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2222      	movs	r2, #34	; 0x22
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
 8003430:	e00a      	b.n	8003448 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b28      	cmp	r3, #40	; 0x28
 8003436:	d107      	bne.n	8003448 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003438:	f248 0103 	movw	r1, #32771	; 0x8003
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fcf3 	bl	8003e28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003456:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b62      	ldr	r3, [pc, #392]	; (80035ec <I2C_ITSlaveCplt+0x21c>)
 8003464:	400b      	ands	r3, r1
 8003466:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fa2e 	bl	80038ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d013      	beq.n	80034a0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003486:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01f      	beq.n	80034d0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800349e:	e017      	b.n	80034d0 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d020      	beq.n	800351c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0204 	orr.w	r2, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f8a4 	bl	800369c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b28      	cmp	r3, #40	; 0x28
 800355e:	d141      	bne.n	80035e4 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003560:	6979      	ldr	r1, [r7, #20]
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f846 	bl	80035f4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003568:	e03c      	b.n	80035e4 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003572:	d014      	beq.n	800359e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fecf 	bl	8003318 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <I2C_ITSlaveCplt+0x220>)
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fccf 	bl	8002f3a <HAL_I2C_ListenCpltCallback>
}
 800359c:	e022      	b.n	80035e4 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b22      	cmp	r3, #34	; 0x22
 80035a8:	d10e      	bne.n	80035c8 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fca2 	bl	8002f0a <HAL_I2C_SlaveRxCpltCallback>
}
 80035c6:	e00d      	b.n	80035e4 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fc89 	bl	8002ef6 <HAL_I2C_SlaveTxCpltCallback>
}
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	fe00e800 	.word	0xfe00e800
 80035f0:	ffff0000 	.word	0xffff0000

080035f4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a25      	ldr	r2, [pc, #148]	; (8003698 <I2C_ITListenCplt+0xa4>)
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d022      	beq.n	8003670 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	d012      	beq.n	8003670 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003670:	f248 0103 	movw	r1, #32771	; 0x8003
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fbd7 	bl	8003e28 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2210      	movs	r2, #16
 8003680:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fc55 	bl	8002f3a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	ffff0000 	.word	0xffff0000

0800369c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ac:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a6d      	ldr	r2, [pc, #436]	; (8003870 <I2C_ITError+0x1d4>)
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b28      	cmp	r3, #40	; 0x28
 80036d2:	d005      	beq.n	80036e0 <I2C_ITError+0x44>
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b29      	cmp	r3, #41	; 0x29
 80036d8:	d002      	beq.n	80036e0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b2a      	cmp	r3, #42	; 0x2a
 80036de:	d10b      	bne.n	80036f8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036e0:	2103      	movs	r1, #3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fba0 	bl	8003e28 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2228      	movs	r2, #40	; 0x28
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a60      	ldr	r2, [pc, #384]	; (8003874 <I2C_ITError+0x1d8>)
 80036f4:	635a      	str	r2, [r3, #52]	; 0x34
 80036f6:	e030      	b.n	800375a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036f8:	f248 0103 	movw	r1, #32771	; 0x8003
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb93 	bl	8003e28 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8e1 	bl	80038ca <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b60      	cmp	r3, #96	; 0x60
 8003712:	d01f      	beq.n	8003754 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b20      	cmp	r3, #32
 8003728:	d114      	bne.n	8003754 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d109      	bne.n	800374c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2210      	movs	r2, #16
 800373e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f043 0204 	orr.w	r2, r3, #4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2220      	movs	r2, #32
 8003752:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	2b00      	cmp	r3, #0
 8003766:	d039      	beq.n	80037dc <I2C_ITError+0x140>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b11      	cmp	r3, #17
 800376c:	d002      	beq.n	8003774 <I2C_ITError+0xd8>
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b21      	cmp	r3, #33	; 0x21
 8003772:	d133      	bne.n	80037dc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003782:	d107      	bne.n	8003794 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003792:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	4618      	mov	r0, r3
 800379a:	f7fe fd90 	bl	80022be <HAL_DMA_GetState>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d017      	beq.n	80037d4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	4a33      	ldr	r2, [pc, #204]	; (8003878 <I2C_ITError+0x1dc>)
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fd3f 	bl	800223c <HAL_DMA_Abort_IT>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d04d      	beq.n	8003860 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037ce:	4610      	mov	r0, r2
 80037d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037d2:	e045      	b.n	8003860 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f851 	bl	800387c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037da:	e041      	b.n	8003860 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d039      	beq.n	8003858 <I2C_ITError+0x1bc>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b12      	cmp	r3, #18
 80037e8:	d002      	beq.n	80037f0 <I2C_ITError+0x154>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b22      	cmp	r3, #34	; 0x22
 80037ee:	d133      	bne.n	8003858 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037fe:	d107      	bne.n	8003810 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800380e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fd52 	bl	80022be <HAL_DMA_GetState>
 800381a:	4603      	mov	r3, r0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d017      	beq.n	8003850 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <I2C_ITError+0x1dc>)
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe fd01 	bl	800223c <HAL_DMA_Abort_IT>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d011      	beq.n	8003864 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800384a:	4610      	mov	r0, r2
 800384c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800384e:	e009      	b.n	8003864 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f813 	bl	800387c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003856:	e005      	b.n	8003864 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f80f 	bl	800387c <I2C_TreatErrorCallback>
  }
}
 800385e:	e002      	b.n	8003866 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003864:	bf00      	nop
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	ffff0000 	.word	0xffff0000
 8003874:	08002f77 	.word	0x08002f77
 8003878:	08003913 	.word	0x08003913

0800387c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b60      	cmp	r3, #96	; 0x60
 800388e:	d10e      	bne.n	80038ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fb5b 	bl	8002f62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038ac:	e009      	b.n	80038c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fb46 	bl	8002f4e <HAL_I2C_ErrorCallback>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d103      	bne.n	80038e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2200      	movs	r2, #0
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d007      	beq.n	8003906 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699a      	ldr	r2, [r3, #24]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	619a      	str	r2, [r3, #24]
  }
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	2200      	movs	r2, #0
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	2200      	movs	r2, #0
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff9b 	bl	800387c <I2C_TreatErrorCallback>
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800395e:	e031      	b.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d02d      	beq.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003968:	f7fe fb56 	bl	8002018 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d302      	bcc.n	800397e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d122      	bne.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	429a      	cmp	r2, r3
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	429a      	cmp	r2, r3
 800399a:	d113      	bne.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e00f      	b.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4013      	ands	r3, r2
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d0be      	beq.n	8003960 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039f8:	e033      	b.n	8003a62 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f900 	bl	8003c04 <I2C_IsErrorOccurred>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e031      	b.n	8003a72 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d025      	beq.n	8003a62 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a16:	f7fe faff 	bl	8002018 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d11a      	bne.n	8003a62 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d013      	beq.n	8003a62 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e007      	b.n	8003a72 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d1c4      	bne.n	80039fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a86:	e02f      	b.n	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f8b9 	bl	8003c04 <I2C_IsErrorOccurred>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e02d      	b.n	8003af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9c:	f7fe fabc 	bl	8002018 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11a      	bne.n	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d013      	beq.n	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e007      	b.n	8003af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d1c8      	bne.n	8003a88 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b0c:	e06b      	b.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f876 	bl	8003c04 <I2C_IsErrorOccurred>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e069      	b.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d138      	bne.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d105      	bne.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e055      	b.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d107      	bne.n	8003b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2204      	movs	r2, #4
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
 8003b66:	e002      	b.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2220      	movs	r2, #32
 8003b74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003b82:	400b      	ands	r3, r1
 8003b84:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e029      	b.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe fa39 	bl	8002018 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d116      	bne.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d00f      	beq.n	8003be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e007      	b.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d18c      	bne.n	8003b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	fe00e800 	.word	0xfe00e800

08003c04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d068      	beq.n	8003d02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2210      	movs	r2, #16
 8003c36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c38:	e049      	b.n	8003cce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d045      	beq.n	8003cce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7fe f9e9 	bl	8002018 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <I2C_IsErrorOccurred+0x54>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d13a      	bne.n	8003cce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7a:	d121      	bne.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c82:	d01d      	beq.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d01a      	beq.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c9a:	f7fe f9bd 	bl	8002018 <HAL_GetTick>
 8003c9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ca0:	e00e      	b.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ca2:	f7fe f9b9 	bl	8002018 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b19      	cmp	r3, #25
 8003cae:	d907      	bls.n	8003cc0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f043 0320 	orr.w	r3, r3, #32
 8003cb6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003cbe:	e006      	b.n	8003cce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d1e9      	bne.n	8003ca2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d003      	beq.n	8003ce4 <I2C_IsErrorOccurred+0xe0>
 8003cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0aa      	beq.n	8003c3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d103      	bne.n	8003cf4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	f043 0308 	orr.w	r3, r3, #8
 8003d3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01c      	beq.n	8003db2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff fda6 	bl	80038ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <I2C_IsErrorOccurred+0x1bc>)
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3728      	adds	r7, #40	; 0x28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	fe00e800 	.word	0xfe00e800

08003dc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	607b      	str	r3, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	817b      	strh	r3, [r7, #10]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ddc:	7a7b      	ldrb	r3, [r7, #9]
 8003dde:	041b      	lsls	r3, r3, #16
 8003de0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003de4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003df2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	0d5b      	lsrs	r3, r3, #21
 8003dfe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e02:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <I2C_TransferConfig+0x60>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	43db      	mvns	r3, r3
 8003e08:	ea02 0103 	and.w	r1, r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	03ff63ff 	.word	0x03ff63ff

08003e28 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e38:	887b      	ldrh	r3, [r7, #2]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00f      	beq.n	8003e62 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003e48:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e56:	2b28      	cmp	r3, #40	; 0x28
 8003e58:	d003      	beq.n	8003e62 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e60:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00f      	beq.n	8003e8c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003e72:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e80:	2b28      	cmp	r3, #40	; 0x28
 8003e82:	d003      	beq.n	8003e8c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e8a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da03      	bge.n	8003e9c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d103      	bne.n	8003eaa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003ea8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d103      	bne.n	8003eb8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f043 0320 	orr.w	r3, r3, #32
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003eb8:	887b      	ldrh	r3, [r7, #2]
 8003eba:	2b40      	cmp	r3, #64	; 0x40
 8003ebc:	d103      	bne.n	8003ec6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6819      	ldr	r1, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	601a      	str	r2, [r3, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d138      	bne.n	8003f6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e032      	b.n	8003f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	; 0x24
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d139      	bne.n	8004004 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d101      	bne.n	8003f9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e033      	b.n	8004006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2224      	movs	r2, #36	; 0x24
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	e000      	b.n	8004006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004004:	2302      	movs	r3, #2
  }
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <HAL_PWREx_GetVoltageRange+0x18>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40007000 	.word	0x40007000

08004030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403e:	d130      	bne.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004040:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404c:	d038      	beq.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800404e:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004056:	4a1e      	ldr	r2, [pc, #120]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800405e:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2232      	movs	r2, #50	; 0x32
 8004064:	fb02 f303 	mul.w	r3, r2, r3
 8004068:	4a1b      	ldr	r2, [pc, #108]	; (80040d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0c9b      	lsrs	r3, r3, #18
 8004070:	3301      	adds	r3, #1
 8004072:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004074:	e002      	b.n	800407c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3b01      	subs	r3, #1
 800407a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800407c:	4b14      	ldr	r3, [pc, #80]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004088:	d102      	bne.n	8004090 <HAL_PWREx_ControlVoltageScaling+0x60>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f2      	bne.n	8004076 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004090:	4b0f      	ldr	r3, [pc, #60]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409c:	d110      	bne.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e00f      	b.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ae:	d007      	beq.n	80040c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040b0:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040b8:	4a05      	ldr	r2, [pc, #20]	; (80040d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40007000 	.word	0x40007000
 80040d4:	20000024 	.word	0x20000024
 80040d8:	431bde83 	.word	0x431bde83

080040dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e3ca      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ee:	4b97      	ldr	r3, [pc, #604]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f8:	4b94      	ldr	r3, [pc, #592]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80e4 	beq.w	80042d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_RCC_OscConfig+0x4a>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	f040 808b 	bne.w	8004234 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b01      	cmp	r3, #1
 8004122:	f040 8087 	bne.w	8004234 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004126:	4b89      	ldr	r3, [pc, #548]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_RCC_OscConfig+0x62>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e3a2      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1a      	ldr	r2, [r3, #32]
 8004142:	4b82      	ldr	r3, [pc, #520]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_RCC_OscConfig+0x7c>
 800414e:	4b7f      	ldr	r3, [pc, #508]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004156:	e005      	b.n	8004164 <HAL_RCC_OscConfig+0x88>
 8004158:	4b7c      	ldr	r3, [pc, #496]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004164:	4293      	cmp	r3, r2
 8004166:	d223      	bcs.n	80041b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fd87 	bl	8004c80 <RCC_SetFlashLatencyFromMSIRange>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e383      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800417c:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a72      	ldr	r2, [pc, #456]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004182:	f043 0308 	orr.w	r3, r3, #8
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	4b70      	ldr	r3, [pc, #448]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	496d      	ldr	r1, [pc, #436]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800419a:	4b6c      	ldr	r3, [pc, #432]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	4968      	ldr	r1, [pc, #416]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
 80041ae:	e025      	b.n	80041fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041b0:	4b66      	ldr	r3, [pc, #408]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a65      	ldr	r2, [pc, #404]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80041b6:	f043 0308 	orr.w	r3, r3, #8
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b63      	ldr	r3, [pc, #396]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	4960      	ldr	r1, [pc, #384]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ce:	4b5f      	ldr	r3, [pc, #380]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	495b      	ldr	r1, [pc, #364]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fd47 	bl	8004c80 <RCC_SetFlashLatencyFromMSIRange>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e343      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041fc:	f000 fc4a 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8004200:	4602      	mov	r2, r0
 8004202:	4b52      	ldr	r3, [pc, #328]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	091b      	lsrs	r3, r3, #4
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	4950      	ldr	r1, [pc, #320]	; (8004350 <HAL_RCC_OscConfig+0x274>)
 800420e:	5ccb      	ldrb	r3, [r1, r3]
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
 8004218:	4a4e      	ldr	r2, [pc, #312]	; (8004354 <HAL_RCC_OscConfig+0x278>)
 800421a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800421c:	4b4e      	ldr	r3, [pc, #312]	; (8004358 <HAL_RCC_OscConfig+0x27c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f7fd fb61 	bl	80018e8 <HAL_InitTick>
 8004226:	4603      	mov	r3, r0
 8004228:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d052      	beq.n	80042d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	e327      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d032      	beq.n	80042a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800423c:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a42      	ldr	r2, [pc, #264]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004248:	f7fd fee6 	bl	8002018 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004250:	f7fd fee2 	bl	8002018 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e310      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004262:	4b3a      	ldr	r3, [pc, #232]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800426e:	4b37      	ldr	r3, [pc, #220]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a36      	ldr	r2, [pc, #216]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004274:	f043 0308 	orr.w	r3, r3, #8
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b34      	ldr	r3, [pc, #208]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	4931      	ldr	r1, [pc, #196]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800428c:	4b2f      	ldr	r3, [pc, #188]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	492c      	ldr	r1, [pc, #176]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
 80042a0:	e01a      	b.n	80042d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042a2:	4b2a      	ldr	r3, [pc, #168]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a29      	ldr	r2, [pc, #164]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042ae:	f7fd feb3 	bl	8002018 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042b6:	f7fd feaf 	bl	8002018 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e2dd      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x1da>
 80042d4:	e000      	b.n	80042d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d074      	beq.n	80043ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b08      	cmp	r3, #8
 80042e8:	d005      	beq.n	80042f6 <HAL_RCC_OscConfig+0x21a>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d10e      	bne.n	800430e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d10b      	bne.n	800430e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_RCC_OscConfig+0x270>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d064      	beq.n	80043cc <HAL_RCC_OscConfig+0x2f0>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d160      	bne.n	80043cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e2ba      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004316:	d106      	bne.n	8004326 <HAL_RCC_OscConfig+0x24a>
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a0b      	ldr	r2, [pc, #44]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800431e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e026      	b.n	8004374 <HAL_RCC_OscConfig+0x298>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800432e:	d115      	bne.n	800435c <HAL_RCC_OscConfig+0x280>
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a05      	ldr	r2, [pc, #20]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <HAL_RCC_OscConfig+0x270>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a02      	ldr	r2, [pc, #8]	; (800434c <HAL_RCC_OscConfig+0x270>)
 8004342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	e014      	b.n	8004374 <HAL_RCC_OscConfig+0x298>
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000
 8004350:	0800bdcc 	.word	0x0800bdcc
 8004354:	20000024 	.word	0x20000024
 8004358:	20000030 	.word	0x20000030
 800435c:	4ba0      	ldr	r3, [pc, #640]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a9f      	ldr	r2, [pc, #636]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b9d      	ldr	r3, [pc, #628]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a9c      	ldr	r2, [pc, #624]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd fe4c 	bl	8002018 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7fd fe48 	bl	8002018 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e276      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004396:	4b92      	ldr	r3, [pc, #584]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x2a8>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd fe38 	bl	8002018 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fd fe34 	bl	8002018 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e262      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043be:	4b88      	ldr	r3, [pc, #544]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x2d0>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d060      	beq.n	800449c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d005      	beq.n	80043ec <HAL_RCC_OscConfig+0x310>
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d119      	bne.n	800441a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d116      	bne.n	800441a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ec:	4b7c      	ldr	r3, [pc, #496]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <HAL_RCC_OscConfig+0x328>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e23f      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004404:	4b76      	ldr	r3, [pc, #472]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	061b      	lsls	r3, r3, #24
 8004412:	4973      	ldr	r1, [pc, #460]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004418:	e040      	b.n	800449c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d023      	beq.n	800446a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004422:	4b6f      	ldr	r3, [pc, #444]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6e      	ldr	r2, [pc, #440]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442e:	f7fd fdf3 	bl	8002018 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004436:	f7fd fdef 	bl	8002018 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e21d      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004448:	4b65      	ldr	r3, [pc, #404]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0f0      	beq.n	8004436 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b62      	ldr	r3, [pc, #392]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	495f      	ldr	r1, [pc, #380]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004464:	4313      	orrs	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
 8004468:	e018      	b.n	800449c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800446a:	4b5d      	ldr	r3, [pc, #372]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a5c      	ldr	r2, [pc, #368]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004476:	f7fd fdcf 	bl	8002018 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447e:	f7fd fdcb 	bl	8002018 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e1f9      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004490:	4b53      	ldr	r3, [pc, #332]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d03c      	beq.n	8004522 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01c      	beq.n	80044ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b0:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80044b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b6:	4a4a      	ldr	r2, [pc, #296]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fd fdaa 	bl	8002018 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c8:	f7fd fda6 	bl	8002018 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e1d4      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044da:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80044dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ef      	beq.n	80044c8 <HAL_RCC_OscConfig+0x3ec>
 80044e8:	e01b      	b.n	8004522 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ea:	4b3d      	ldr	r3, [pc, #244]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80044ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f0:	4a3b      	ldr	r2, [pc, #236]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fa:	f7fd fd8d 	bl	8002018 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004502:	f7fd fd89 	bl	8002018 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e1b7      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004514:	4b32      	ldr	r3, [pc, #200]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ef      	bne.n	8004502 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80a6 	beq.w	800467c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004530:	2300      	movs	r3, #0
 8004532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004534:	4b2a      	ldr	r3, [pc, #168]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004540:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 8004546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454a:	6593      	str	r3, [r2, #88]	; 0x58
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004558:	2301      	movs	r3, #1
 800455a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455c:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <HAL_RCC_OscConfig+0x508>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d118      	bne.n	800459a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004568:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <HAL_RCC_OscConfig+0x508>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <HAL_RCC_OscConfig+0x508>)
 800456e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004572:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004574:	f7fd fd50 	bl	8002018 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457c:	f7fd fd4c 	bl	8002018 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e17a      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458e:	4b15      	ldr	r3, [pc, #84]	; (80045e4 <HAL_RCC_OscConfig+0x508>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d108      	bne.n	80045b4 <HAL_RCC_OscConfig+0x4d8>
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80045a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a8:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045b2:	e029      	b.n	8004608 <HAL_RCC_OscConfig+0x52c>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d115      	bne.n	80045e8 <HAL_RCC_OscConfig+0x50c>
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	4a07      	ldr	r2, [pc, #28]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	4a03      	ldr	r2, [pc, #12]	; (80045e0 <HAL_RCC_OscConfig+0x504>)
 80045d4:	f043 0301 	orr.w	r3, r3, #1
 80045d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045dc:	e014      	b.n	8004608 <HAL_RCC_OscConfig+0x52c>
 80045de:	bf00      	nop
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40007000 	.word	0x40007000
 80045e8:	4b9c      	ldr	r3, [pc, #624]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	4a9b      	ldr	r2, [pc, #620]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045f8:	4b98      	ldr	r3, [pc, #608]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	4a97      	ldr	r2, [pc, #604]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004600:	f023 0304 	bic.w	r3, r3, #4
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d016      	beq.n	800463e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fd fd02 	bl	8002018 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004616:	e00a      	b.n	800462e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fd fcfe 	bl	8002018 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e12a      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462e:	4b8b      	ldr	r3, [pc, #556]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0ed      	beq.n	8004618 <HAL_RCC_OscConfig+0x53c>
 800463c:	e015      	b.n	800466a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463e:	f7fd fceb 	bl	8002018 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004644:	e00a      	b.n	800465c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fd fce7 	bl	8002018 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	f241 3288 	movw	r2, #5000	; 0x1388
 8004654:	4293      	cmp	r3, r2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e113      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800465c:	4b7f      	ldr	r3, [pc, #508]	; (800485c <HAL_RCC_OscConfig+0x780>)
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ed      	bne.n	8004646 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800466a:	7ffb      	ldrb	r3, [r7, #31]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004670:	4b7a      	ldr	r3, [pc, #488]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004674:	4a79      	ldr	r2, [pc, #484]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80fe 	beq.w	8004882 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	2b02      	cmp	r3, #2
 800468c:	f040 80d0 	bne.w	8004830 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004690:	4b72      	ldr	r3, [pc, #456]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f003 0203 	and.w	r2, r3, #3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d130      	bne.n	8004706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	3b01      	subs	r3, #1
 80046b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d127      	bne.n	8004706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d11f      	bne.n	8004706 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046d0:	2a07      	cmp	r2, #7
 80046d2:	bf14      	ite	ne
 80046d4:	2201      	movne	r2, #1
 80046d6:	2200      	moveq	r2, #0
 80046d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046da:	4293      	cmp	r3, r2
 80046dc:	d113      	bne.n	8004706 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	3b01      	subs	r3, #1
 80046ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d109      	bne.n	8004706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	3b01      	subs	r3, #1
 8004700:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d06e      	beq.n	80047e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b0c      	cmp	r3, #12
 800470a:	d069      	beq.n	80047e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800470c:	4b53      	ldr	r3, [pc, #332]	; (800485c <HAL_RCC_OscConfig+0x780>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004718:	4b50      	ldr	r3, [pc, #320]	; (800485c <HAL_RCC_OscConfig+0x780>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0ad      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004728:	4b4c      	ldr	r3, [pc, #304]	; (800485c <HAL_RCC_OscConfig+0x780>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a4b      	ldr	r2, [pc, #300]	; (800485c <HAL_RCC_OscConfig+0x780>)
 800472e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004732:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004734:	f7fd fc70 	bl	8002018 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473c:	f7fd fc6c 	bl	8002018 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e09a      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800474e:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475a:	4b40      	ldr	r3, [pc, #256]	; (800485c <HAL_RCC_OscConfig+0x780>)
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	4b40      	ldr	r3, [pc, #256]	; (8004860 <HAL_RCC_OscConfig+0x784>)
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800476a:	3a01      	subs	r2, #1
 800476c:	0112      	lsls	r2, r2, #4
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004774:	0212      	lsls	r2, r2, #8
 8004776:	4311      	orrs	r1, r2
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800477c:	0852      	lsrs	r2, r2, #1
 800477e:	3a01      	subs	r2, #1
 8004780:	0552      	lsls	r2, r2, #21
 8004782:	4311      	orrs	r1, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004788:	0852      	lsrs	r2, r2, #1
 800478a:	3a01      	subs	r2, #1
 800478c:	0652      	lsls	r2, r2, #25
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004794:	0912      	lsrs	r2, r2, #4
 8004796:	0452      	lsls	r2, r2, #17
 8004798:	430a      	orrs	r2, r1
 800479a:	4930      	ldr	r1, [pc, #192]	; (800485c <HAL_RCC_OscConfig+0x780>)
 800479c:	4313      	orrs	r3, r2
 800479e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047a0:	4b2e      	ldr	r3, [pc, #184]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a2d      	ldr	r2, [pc, #180]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047b8:	f7fd fc2e 	bl	8002018 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fd fc2a 	bl	8002018 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e058      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047de:	e050      	b.n	8004882 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e04f      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d148      	bne.n	8004882 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047fc:	4b17      	ldr	r3, [pc, #92]	; (800485c <HAL_RCC_OscConfig+0x780>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a16      	ldr	r2, [pc, #88]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004806:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004808:	f7fd fc06 	bl	8002018 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fd fc02 	bl	8002018 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e030      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004822:	4b0e      	ldr	r3, [pc, #56]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x734>
 800482e:	e028      	b.n	8004882 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b0c      	cmp	r3, #12
 8004834:	d023      	beq.n	800487e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCC_OscConfig+0x780>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a08      	ldr	r2, [pc, #32]	; (800485c <HAL_RCC_OscConfig+0x780>)
 800483c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fd fbe9 	bl	8002018 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004848:	e00c      	b.n	8004864 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484a:	f7fd fbe5 	bl	8002018 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d905      	bls.n	8004864 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e013      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
 800485c:	40021000 	.word	0x40021000
 8004860:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_OscConfig+0x7b0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ec      	bne.n	800484a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <HAL_RCC_OscConfig+0x7b0>)
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	4905      	ldr	r1, [pc, #20]	; (800488c <HAL_RCC_OscConfig+0x7b0>)
 8004876:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_RCC_OscConfig+0x7b4>)
 8004878:	4013      	ands	r3, r2
 800487a:	60cb      	str	r3, [r1, #12]
 800487c:	e001      	b.n	8004882 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	feeefffc 	.word	0xfeeefffc

08004894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0e7      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a8:	4b75      	ldr	r3, [pc, #468]	; (8004a80 <HAL_RCC_ClockConfig+0x1ec>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d910      	bls.n	80048d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b72      	ldr	r3, [pc, #456]	; (8004a80 <HAL_RCC_ClockConfig+0x1ec>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	4970      	ldr	r1, [pc, #448]	; (8004a80 <HAL_RCC_ClockConfig+0x1ec>)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b6e      	ldr	r3, [pc, #440]	; (8004a80 <HAL_RCC_ClockConfig+0x1ec>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e0cf      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d908      	bls.n	8004906 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f4:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	4960      	ldr	r1, [pc, #384]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d04c      	beq.n	80049ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b03      	cmp	r3, #3
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491a:	4b5a      	ldr	r3, [pc, #360]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d121      	bne.n	800496a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0a6      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004932:	4b54      	ldr	r3, [pc, #336]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d115      	bne.n	800496a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e09a      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800494a:	4b4e      	ldr	r3, [pc, #312]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e08e      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800495a:	4b4a      	ldr	r3, [pc, #296]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e086      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800496a:	4b46      	ldr	r3, [pc, #280]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 0203 	bic.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4943      	ldr	r1, [pc, #268]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 8004978:	4313      	orrs	r3, r2
 800497a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800497c:	f7fd fb4c 	bl	8002018 <HAL_GetTick>
 8004980:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	e00a      	b.n	800499a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004984:	f7fd fb48 	bl	8002018 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e06e      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499a:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 020c 	and.w	r2, r3, #12
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d1eb      	bne.n	8004984 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d010      	beq.n	80049da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	4b31      	ldr	r3, [pc, #196]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d208      	bcs.n	80049da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c8:	4b2e      	ldr	r3, [pc, #184]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	492b      	ldr	r1, [pc, #172]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049da:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <HAL_RCC_ClockConfig+0x1ec>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d210      	bcs.n	8004a0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e8:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <HAL_RCC_ClockConfig+0x1ec>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f023 0207 	bic.w	r2, r3, #7
 80049f0:	4923      	ldr	r1, [pc, #140]	; (8004a80 <HAL_RCC_ClockConfig+0x1ec>)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f8:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <HAL_RCC_ClockConfig+0x1ec>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d001      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e036      	b.n	8004a78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a16:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	4918      	ldr	r1, [pc, #96]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a34:	4b13      	ldr	r3, [pc, #76]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4910      	ldr	r1, [pc, #64]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a48:	f000 f824 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <HAL_RCC_ClockConfig+0x1f0>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	f003 030f 	and.w	r3, r3, #15
 8004a58:	490b      	ldr	r1, [pc, #44]	; (8004a88 <HAL_RCC_ClockConfig+0x1f4>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <HAL_RCC_ClockConfig+0x1f8>)
 8004a66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <HAL_RCC_ClockConfig+0x1fc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fc ff3b 	bl	80018e8 <HAL_InitTick>
 8004a72:	4603      	mov	r3, r0
 8004a74:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a76:	7afb      	ldrb	r3, [r7, #11]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40022000 	.word	0x40022000
 8004a84:	40021000 	.word	0x40021000
 8004a88:	0800bdcc 	.word	0x0800bdcc
 8004a8c:	20000024 	.word	0x20000024
 8004a90:	20000030 	.word	0x20000030

08004a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa2:	4b3e      	ldr	r3, [pc, #248]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aac:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	d121      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d11e      	bne.n	8004b06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ac8:	4b34      	ldr	r3, [pc, #208]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d107      	bne.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e005      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004af0:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d102      	bne.n	8004b12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	e004      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b18:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d134      	bne.n	8004b8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b22:	4b1e      	ldr	r3, [pc, #120]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d003      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0xa6>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d003      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0xac>
 8004b38:	e005      	b.n	8004b46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b3c:	617b      	str	r3, [r7, #20]
      break;
 8004b3e:	e005      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b42:	617b      	str	r3, [r7, #20]
      break;
 8004b44:	e002      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	617b      	str	r3, [r7, #20]
      break;
 8004b4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b4c:	4b13      	ldr	r3, [pc, #76]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	3301      	adds	r3, #1
 8004b58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	fb03 f202 	mul.w	r2, r3, r2
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	0e5b      	lsrs	r3, r3, #25
 8004b78:	f003 0303 	and.w	r3, r3, #3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3724      	adds	r7, #36	; 0x24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	0800bde4 	.word	0x0800bde4
 8004ba4:	00f42400 	.word	0x00f42400
 8004ba8:	007a1200 	.word	0x007a1200

08004bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000024 	.word	0x20000024

08004bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bc8:	f7ff fff0 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	4904      	ldr	r1, [pc, #16]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bda:	5ccb      	ldrb	r3, [r1, r3]
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800bddc 	.word	0x0800bddc

08004bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bf4:	f7ff ffda 	bl	8004bac <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0adb      	lsrs	r3, r3, #11
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4904      	ldr	r1, [pc, #16]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000
 8004c18:	0800bddc 	.word	0x0800bddc

08004c1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	220f      	movs	r2, #15
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004c2c:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0203 	and.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004c50:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_RCC_GetClockConfig+0x5c>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004c5e:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <HAL_RCC_GetClockConfig+0x60>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0207 	and.w	r2, r3, #7
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000
 8004c7c:	40022000 	.word	0x40022000

08004c80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c98:	f7ff f9bc 	bl	8004014 <HAL_PWREx_GetVoltageRange>
 8004c9c:	6178      	str	r0, [r7, #20]
 8004c9e:	e014      	b.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ca0:	4b25      	ldr	r3, [pc, #148]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004caa:	6593      	str	r3, [r2, #88]	; 0x58
 8004cac:	4b22      	ldr	r3, [pc, #136]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cb8:	f7ff f9ac 	bl	8004014 <HAL_PWREx_GetVoltageRange>
 8004cbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cbe:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	4a1d      	ldr	r2, [pc, #116]	; (8004d38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd0:	d10b      	bne.n	8004cea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b80      	cmp	r3, #128	; 0x80
 8004cd6:	d919      	bls.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2ba0      	cmp	r3, #160	; 0xa0
 8004cdc:	d902      	bls.n	8004ce4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cde:	2302      	movs	r3, #2
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e013      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	e010      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b80      	cmp	r3, #128	; 0x80
 8004cee:	d902      	bls.n	8004cf6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	e00a      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b80      	cmp	r3, #128	; 0x80
 8004cfa:	d102      	bne.n	8004d02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	e004      	b.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b70      	cmp	r3, #112	; 0x70
 8004d06:	d101      	bne.n	8004d0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d08:	2301      	movs	r3, #1
 8004d0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 0207 	bic.w	r2, r3, #7
 8004d14:	4909      	ldr	r1, [pc, #36]	; (8004d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d1c:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d001      	beq.n	8004d2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	40022000 	.word	0x40022000

08004d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d48:	2300      	movs	r3, #0
 8004d4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d041      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d64:	d02a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d6a:	d824      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d70:	d008      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d76:	d81e      	bhi.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d80:	d010      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d82:	e018      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d84:	4b86      	ldr	r3, [pc, #536]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a85      	ldr	r2, [pc, #532]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d90:	e015      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fabb 	bl	8005314 <RCCEx_PLLSAI1_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004da2:	e00c      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3320      	adds	r3, #32
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fba6 	bl	80054fc <RCCEx_PLLSAI2_Config>
 8004db0:	4603      	mov	r3, r0
 8004db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004db4:	e003      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	74fb      	strb	r3, [r7, #19]
      break;
 8004dba:	e000      	b.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dc4:	4b76      	ldr	r3, [pc, #472]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd2:	4973      	ldr	r1, [pc, #460]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dda:	e001      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	7cfb      	ldrb	r3, [r7, #19]
 8004dde:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d041      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004df4:	d02a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004df6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004dfa:	d824      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e00:	d008      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e06:	d81e      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e10:	d010      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e12:	e018      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e14:	4b62      	ldr	r3, [pc, #392]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a61      	ldr	r2, [pc, #388]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e20:	e015      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3304      	adds	r3, #4
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fa73 	bl	8005314 <RCCEx_PLLSAI1_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e32:	e00c      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3320      	adds	r3, #32
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fb5e 	bl	80054fc <RCCEx_PLLSAI2_Config>
 8004e40:	4603      	mov	r3, r0
 8004e42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e44:	e003      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	74fb      	strb	r3, [r7, #19]
      break;
 8004e4a:	e000      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e4e:	7cfb      	ldrb	r3, [r7, #19]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e54:	4b52      	ldr	r3, [pc, #328]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e62:	494f      	ldr	r1, [pc, #316]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e6a:	e001      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	7cfb      	ldrb	r3, [r7, #19]
 8004e6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80a0 	beq.w	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e82:	4b47      	ldr	r3, [pc, #284]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e98:	4b41      	ldr	r3, [pc, #260]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	4a40      	ldr	r2, [pc, #256]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb4:	4b3b      	ldr	r3, [pc, #236]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3a      	ldr	r2, [pc, #232]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ec0:	f7fd f8aa 	bl	8002018 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ec6:	e009      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec8:	f7fd f8a6 	bl	8002018 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d902      	bls.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8004eda:	e005      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004edc:	4b31      	ldr	r3, [pc, #196]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0ef      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d15c      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eee:	4b2c      	ldr	r3, [pc, #176]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01f      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d019      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f0c:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f18:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f28:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	4a1c      	ldr	r2, [pc, #112]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f38:	4a19      	ldr	r2, [pc, #100]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d016      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4a:	f7fd f865 	bl	8002018 <HAL_GetTick>
 8004f4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f50:	e00b      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f52:	f7fd f861 	bl	8002018 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d902      	bls.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	74fb      	strb	r3, [r7, #19]
            break;
 8004f68:	e006      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0ec      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f7e:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8e:	4904      	ldr	r1, [pc, #16]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f96:	e009      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f98:	7cfb      	ldrb	r3, [r7, #19]
 8004f9a:	74bb      	strb	r3, [r7, #18]
 8004f9c:	e006      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fac:	7c7b      	ldrb	r3, [r7, #17]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d105      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb2:	4b9e      	ldr	r3, [pc, #632]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	4a9d      	ldr	r2, [pc, #628]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fca:	4b98      	ldr	r3, [pc, #608]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	f023 0203 	bic.w	r2, r3, #3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	4994      	ldr	r1, [pc, #592]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fec:	4b8f      	ldr	r3, [pc, #572]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff2:	f023 020c 	bic.w	r2, r3, #12
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	498c      	ldr	r1, [pc, #560]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800500e:	4b87      	ldr	r3, [pc, #540]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	4983      	ldr	r1, [pc, #524]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005030:	4b7e      	ldr	r3, [pc, #504]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	497b      	ldr	r1, [pc, #492]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005052:	4b76      	ldr	r3, [pc, #472]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005060:	4972      	ldr	r1, [pc, #456]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005074:	4b6d      	ldr	r3, [pc, #436]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005082:	496a      	ldr	r1, [pc, #424]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005096:	4b65      	ldr	r3, [pc, #404]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	4961      	ldr	r1, [pc, #388]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80050b8:	4b5c      	ldr	r3, [pc, #368]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c6:	4959      	ldr	r1, [pc, #356]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050da:	4b54      	ldr	r3, [pc, #336]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e8:	4950      	ldr	r1, [pc, #320]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050fc:	4b4b      	ldr	r3, [pc, #300]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	4948      	ldr	r1, [pc, #288]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800511e:	4b43      	ldr	r3, [pc, #268]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	493f      	ldr	r1, [pc, #252]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d028      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005140:	4b3a      	ldr	r3, [pc, #232]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800514e:	4937      	ldr	r1, [pc, #220]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800515e:	d106      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005160:	4b32      	ldr	r3, [pc, #200]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	4a31      	ldr	r2, [pc, #196]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800516a:	60d3      	str	r3, [r2, #12]
 800516c:	e011      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005176:	d10c      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3304      	adds	r3, #4
 800517c:	2101      	movs	r1, #1
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f8c8 	bl	8005314 <RCCEx_PLLSAI1_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005188:	7cfb      	ldrb	r3, [r7, #19]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800518e:	7cfb      	ldrb	r3, [r7, #19]
 8005190:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d028      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800519e:	4b23      	ldr	r3, [pc, #140]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	491f      	ldr	r1, [pc, #124]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051bc:	d106      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051be:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4a1a      	ldr	r2, [pc, #104]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c8:	60d3      	str	r3, [r2, #12]
 80051ca:	e011      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051d4:	d10c      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	2101      	movs	r1, #1
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f899 	bl	8005314 <RCCEx_PLLSAI1_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051e6:	7cfb      	ldrb	r3, [r7, #19]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051ec:	7cfb      	ldrb	r3, [r7, #19]
 80051ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02b      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520a:	4908      	ldr	r1, [pc, #32]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521a:	d109      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800521c:	4b03      	ldr	r3, [pc, #12]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a02      	ldr	r2, [pc, #8]	; (800522c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005226:	60d3      	str	r3, [r2, #12]
 8005228:	e014      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005238:	d10c      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	2101      	movs	r1, #1
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f867 	bl	8005314 <RCCEx_PLLSAI1_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800524a:	7cfb      	ldrb	r3, [r7, #19]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d02f      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005260:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800526e:	4928      	ldr	r1, [pc, #160]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800527a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800527e:	d10d      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	2102      	movs	r1, #2
 8005286:	4618      	mov	r0, r3
 8005288:	f000 f844 	bl	8005314 <RCCEx_PLLSAI1_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d014      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	74bb      	strb	r3, [r7, #18]
 800529a:	e011      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a4:	d10c      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3320      	adds	r3, #32
 80052aa:	2102      	movs	r1, #2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f925 	bl	80054fc <RCCEx_PLLSAI2_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052cc:	4b10      	ldr	r3, [pc, #64]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052da:	490d      	ldr	r1, [pc, #52]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052fe:	4904      	ldr	r1, [pc, #16]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005306:	7cbb      	ldrb	r3, [r7, #18]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000

08005314 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005322:	4b75      	ldr	r3, [pc, #468]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d018      	beq.n	8005360 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800532e:	4b72      	ldr	r3, [pc, #456]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0203 	and.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d10d      	bne.n	800535a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
       ||
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005346:	4b6c      	ldr	r3, [pc, #432]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
       ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d047      	beq.n	80053ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
 800535e:	e044      	b.n	80053ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d018      	beq.n	800539a <RCCEx_PLLSAI1_Config+0x86>
 8005368:	2b03      	cmp	r3, #3
 800536a:	d825      	bhi.n	80053b8 <RCCEx_PLLSAI1_Config+0xa4>
 800536c:	2b01      	cmp	r3, #1
 800536e:	d002      	beq.n	8005376 <RCCEx_PLLSAI1_Config+0x62>
 8005370:	2b02      	cmp	r3, #2
 8005372:	d009      	beq.n	8005388 <RCCEx_PLLSAI1_Config+0x74>
 8005374:	e020      	b.n	80053b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005376:	4b60      	ldr	r3, [pc, #384]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11d      	bne.n	80053be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005386:	e01a      	b.n	80053be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005388:	4b5b      	ldr	r3, [pc, #364]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005398:	e013      	b.n	80053c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800539a:	4b57      	ldr	r3, [pc, #348]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053a6:	4b54      	ldr	r3, [pc, #336]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053b6:	e006      	b.n	80053c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
      break;
 80053bc:	e004      	b.n	80053c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053be:	bf00      	nop
 80053c0:	e002      	b.n	80053c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053c2:	bf00      	nop
 80053c4:	e000      	b.n	80053c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10d      	bne.n	80053ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053ce:	4b4a      	ldr	r3, [pc, #296]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6819      	ldr	r1, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	3b01      	subs	r3, #1
 80053e0:	011b      	lsls	r3, r3, #4
 80053e2:	430b      	orrs	r3, r1
 80053e4:	4944      	ldr	r1, [pc, #272]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d17d      	bne.n	80054ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053f0:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a40      	ldr	r2, [pc, #256]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fc fe0c 	bl	8002018 <HAL_GetTick>
 8005400:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005402:	e009      	b.n	8005418 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005404:	f7fc fe08 	bl	8002018 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d902      	bls.n	8005418 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	73fb      	strb	r3, [r7, #15]
        break;
 8005416:	e005      	b.n	8005424 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005418:	4b37      	ldr	r3, [pc, #220]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1ef      	bne.n	8005404 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d160      	bne.n	80054ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d111      	bne.n	8005454 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005430:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6892      	ldr	r2, [r2, #8]
 8005440:	0211      	lsls	r1, r2, #8
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68d2      	ldr	r2, [r2, #12]
 8005446:	0912      	lsrs	r2, r2, #4
 8005448:	0452      	lsls	r2, r2, #17
 800544a:	430a      	orrs	r2, r1
 800544c:	492a      	ldr	r1, [pc, #168]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544e:	4313      	orrs	r3, r2
 8005450:	610b      	str	r3, [r1, #16]
 8005452:	e027      	b.n	80054a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d112      	bne.n	8005480 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800545a:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005462:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6892      	ldr	r2, [r2, #8]
 800546a:	0211      	lsls	r1, r2, #8
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6912      	ldr	r2, [r2, #16]
 8005470:	0852      	lsrs	r2, r2, #1
 8005472:	3a01      	subs	r2, #1
 8005474:	0552      	lsls	r2, r2, #21
 8005476:	430a      	orrs	r2, r1
 8005478:	491f      	ldr	r1, [pc, #124]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800547a:	4313      	orrs	r3, r2
 800547c:	610b      	str	r3, [r1, #16]
 800547e:	e011      	b.n	80054a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005480:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005488:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6892      	ldr	r2, [r2, #8]
 8005490:	0211      	lsls	r1, r2, #8
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6952      	ldr	r2, [r2, #20]
 8005496:	0852      	lsrs	r2, r2, #1
 8005498:	3a01      	subs	r2, #1
 800549a:	0652      	lsls	r2, r2, #25
 800549c:	430a      	orrs	r2, r1
 800549e:	4916      	ldr	r1, [pc, #88]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a13      	ldr	r2, [pc, #76]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fc fdb2 	bl	8002018 <HAL_GetTick>
 80054b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b6:	e009      	b.n	80054cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054b8:	f7fc fdae 	bl	8002018 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d902      	bls.n	80054cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	73fb      	strb	r3, [r7, #15]
          break;
 80054ca:	e005      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0ef      	beq.n	80054b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	4904      	ldr	r1, [pc, #16]	; (80054f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000

080054fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800550a:	4b6a      	ldr	r3, [pc, #424]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d018      	beq.n	8005548 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005516:	4b67      	ldr	r3, [pc, #412]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0203 	and.w	r2, r3, #3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d10d      	bne.n	8005542 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
       ||
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800552e:	4b61      	ldr	r3, [pc, #388]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	091b      	lsrs	r3, r3, #4
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
       ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d047      	beq.n	80055d2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	e044      	b.n	80055d2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d018      	beq.n	8005582 <RCCEx_PLLSAI2_Config+0x86>
 8005550:	2b03      	cmp	r3, #3
 8005552:	d825      	bhi.n	80055a0 <RCCEx_PLLSAI2_Config+0xa4>
 8005554:	2b01      	cmp	r3, #1
 8005556:	d002      	beq.n	800555e <RCCEx_PLLSAI2_Config+0x62>
 8005558:	2b02      	cmp	r3, #2
 800555a:	d009      	beq.n	8005570 <RCCEx_PLLSAI2_Config+0x74>
 800555c:	e020      	b.n	80055a0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800555e:	4b55      	ldr	r3, [pc, #340]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d11d      	bne.n	80055a6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800556e:	e01a      	b.n	80055a6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005570:	4b50      	ldr	r3, [pc, #320]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005578:	2b00      	cmp	r3, #0
 800557a:	d116      	bne.n	80055aa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005580:	e013      	b.n	80055aa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005582:	4b4c      	ldr	r3, [pc, #304]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10f      	bne.n	80055ae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800558e:	4b49      	ldr	r3, [pc, #292]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800559e:	e006      	b.n	80055ae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	e004      	b.n	80055b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055a6:	bf00      	nop
 80055a8:	e002      	b.n	80055b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055aa:	bf00      	nop
 80055ac:	e000      	b.n	80055b0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80055ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10d      	bne.n	80055d2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055b6:	4b3f      	ldr	r3, [pc, #252]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6819      	ldr	r1, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	430b      	orrs	r3, r1
 80055cc:	4939      	ldr	r1, [pc, #228]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d167      	bne.n	80056a8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80055d8:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a35      	ldr	r2, [pc, #212]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e4:	f7fc fd18 	bl	8002018 <HAL_GetTick>
 80055e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ea:	e009      	b.n	8005600 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055ec:	f7fc fd14 	bl	8002018 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d902      	bls.n	8005600 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	73fb      	strb	r3, [r7, #15]
        break;
 80055fe:	e005      	b.n	800560c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005600:	4b2c      	ldr	r3, [pc, #176]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ef      	bne.n	80055ec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d14a      	bne.n	80056a8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d111      	bne.n	800563c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005618:	4b26      	ldr	r3, [pc, #152]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6892      	ldr	r2, [r2, #8]
 8005628:	0211      	lsls	r1, r2, #8
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68d2      	ldr	r2, [r2, #12]
 800562e:	0912      	lsrs	r2, r2, #4
 8005630:	0452      	lsls	r2, r2, #17
 8005632:	430a      	orrs	r2, r1
 8005634:	491f      	ldr	r1, [pc, #124]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005636:	4313      	orrs	r3, r2
 8005638:	614b      	str	r3, [r1, #20]
 800563a:	e011      	b.n	8005660 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800563c:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005644:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6892      	ldr	r2, [r2, #8]
 800564c:	0211      	lsls	r1, r2, #8
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6912      	ldr	r2, [r2, #16]
 8005652:	0852      	lsrs	r2, r2, #1
 8005654:	3a01      	subs	r2, #1
 8005656:	0652      	lsls	r2, r2, #25
 8005658:	430a      	orrs	r2, r1
 800565a:	4916      	ldr	r1, [pc, #88]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565c:	4313      	orrs	r3, r2
 800565e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005660:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800566a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566c:	f7fc fcd4 	bl	8002018 <HAL_GetTick>
 8005670:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005672:	e009      	b.n	8005688 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005674:	f7fc fcd0 	bl	8002018 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d902      	bls.n	8005688 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	73fb      	strb	r3, [r7, #15]
          break;
 8005686:	e005      	b.n	8005694 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0ef      	beq.n	8005674 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	4904      	ldr	r1, [pc, #16]	; (80056b4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40021000 	.word	0x40021000

080056b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d079      	beq.n	80057be <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc f840 	bl	8001764 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2b10      	cmp	r3, #16
 80056f8:	d058      	beq.n	80057ac <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	22ca      	movs	r2, #202	; 0xca
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2253      	movs	r2, #83	; 0x53
 8005708:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fbda 	bl	8005ec4 <RTC_EnterInitMode>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d127      	bne.n	800576a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800572c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6899      	ldr	r1, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	68d2      	ldr	r2, [r2, #12]
 8005754:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6919      	ldr	r1, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	041a      	lsls	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fbde 	bl	8005f2c <RTC_ExitInitMode>
 8005770:	4603      	mov	r3, r0
 8005772:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d113      	bne.n	80057a2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0203 	bic.w	r2, r2, #3
 8005788:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	22ff      	movs	r2, #255	; 0xff
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24
 80057aa:	e001      	b.n	80057b0 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d103      	bne.n	80057be <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_RTC_SetTime+0x1a>
 80057de:	2302      	movs	r3, #2
 80057e0:	e08b      	b.n	80058fa <HAL_RTC_SetTime+0x132>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	22ca      	movs	r2, #202	; 0xca
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2253      	movs	r2, #83	; 0x53
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fb5e 	bl	8005ec4 <RTC_EnterInitMode>
 8005808:	4603      	mov	r3, r0
 800580a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d163      	bne.n	80058da <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d126      	bne.n	8005866 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d102      	bne.n	800582c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2200      	movs	r2, #0
 800582a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fbb9 	bl	8005fa8 <RTC_ByteToBcd2>
 8005836:	4603      	mov	r3, r0
 8005838:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fbb2 	bl	8005fa8 <RTC_ByteToBcd2>
 8005844:	4603      	mov	r3, r0
 8005846:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005848:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	789b      	ldrb	r3, [r3, #2]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fbaa 	bl	8005fa8 <RTC_ByteToBcd2>
 8005854:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005856:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	78db      	ldrb	r3, [r3, #3]
 800585e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e018      	b.n	8005898 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005886:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800588c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	78db      	ldrb	r3, [r3, #3]
 8005892:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80058a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80058a6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6899      	ldr	r1, [r3, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fb2b 	bl	8005f2c <RTC_ExitInitMode>
 80058d6:	4603      	mov	r3, r0
 80058d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	22ff      	movs	r2, #255	; 0xff
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80058e2:	7cfb      	ldrb	r3, [r7, #19]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80058f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd90      	pop	{r4, r7, pc}

08005902 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b086      	sub	sp, #24
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005930:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005934:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	0c1b      	lsrs	r3, r3, #16
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800595e:	b2da      	uxtb	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	0d9b      	lsrs	r3, r3, #22
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d11a      	bne.n	80059b0 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 fb32 	bl	8005fe8 <RTC_Bcd2ToByte>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fb29 	bl	8005fe8 <RTC_Bcd2ToByte>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	789b      	ldrb	r3, [r3, #2]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fb20 	bl	8005fe8 <RTC_Bcd2ToByte>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059ba:	b590      	push	{r4, r7, lr}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_RTC_SetDate+0x1a>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e075      	b.n	8005ac0 <HAL_RTC_SetDate+0x106>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10e      	bne.n	8005a08 <HAL_RTC_SetDate+0x4e>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	f023 0310 	bic.w	r3, r3, #16
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	330a      	adds	r3, #10
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d11c      	bne.n	8005a48 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	78db      	ldrb	r3, [r3, #3]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fac8 	bl	8005fa8 <RTC_ByteToBcd2>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	785b      	ldrb	r3, [r3, #1]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fac1 	bl	8005fa8 <RTC_ByteToBcd2>
 8005a26:	4603      	mov	r3, r0
 8005a28:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a2a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	789b      	ldrb	r3, [r3, #2]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fab9 	bl	8005fa8 <RTC_ByteToBcd2>
 8005a36:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a38:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	e00e      	b.n	8005a66 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	78db      	ldrb	r3, [r3, #3]
 8005a4c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	785b      	ldrb	r3, [r3, #1]
 8005a52:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a54:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a5a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	22ca      	movs	r2, #202	; 0xca
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2253      	movs	r2, #83	; 0x53
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fa24 	bl	8005ec4 <RTC_EnterInitMode>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005a80:	7cfb      	ldrb	r3, [r7, #19]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10c      	bne.n	8005aa0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fa48 	bl	8005f2c <RTC_ExitInitMode>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd90      	pop	{r4, r7, pc}

08005ac8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ade:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	0c1b      	lsrs	r3, r3, #16
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	0a1b      	lsrs	r3, r3, #8
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	0b5b      	lsrs	r3, r3, #13
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d11a      	bne.n	8005b58 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	78db      	ldrb	r3, [r3, #3]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fa5e 	bl	8005fe8 <RTC_Bcd2ToByte>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fa55 	bl	8005fe8 <RTC_Bcd2ToByte>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	461a      	mov	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	789b      	ldrb	r3, [r3, #2]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fa4c 	bl	8005fe8 <RTC_Bcd2ToByte>
 8005b50:	4603      	mov	r3, r0
 8005b52:	461a      	mov	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b089      	sub	sp, #36	; 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_RTC_SetAlarm_IT+0x1a>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e127      	b.n	8005dce <HAL_RTC_SetAlarm_IT+0x26a>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d137      	bne.n	8005c04 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f9fb 	bl	8005fa8 <RTC_ByteToBcd2>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 f9f4 	bl	8005fa8 <RTC_ByteToBcd2>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005bc4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	789b      	ldrb	r3, [r3, #2]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 f9ec 	bl	8005fa8 <RTC_ByteToBcd2>
 8005bd0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005bd2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	78db      	ldrb	r3, [r3, #3]
 8005bda:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005bdc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f9de 	bl	8005fa8 <RTC_ByteToBcd2>
 8005bec:	4603      	mov	r3, r0
 8005bee:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005bf0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005bf8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	e023      	b.n	8005c4c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c24:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	78db      	ldrb	r3, [r3, #3]
 8005c30:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c3a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	22ca      	movs	r2, #202	; 0xca
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2253      	movs	r2, #83	; 0x53
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c70:	d14a      	bne.n	8005d08 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c80:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005c92:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005c94:	f7fc f9c0 	bl	8002018 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c9a:	e015      	b.n	8005cc8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c9c:	f7fc f9bc 	bl	8002018 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005caa:	d90d      	bls.n	8005cc8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e082      	b.n	8005dce <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0e2      	beq.n	8005c9c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d04:	609a      	str	r2, [r3, #8]
 8005d06:	e049      	b.n	8005d9c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d16:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005d28:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005d2a:	f7fc f975 	bl	8002018 <HAL_GetTick>
 8005d2e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d30:	e015      	b.n	8005d5e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d32:	f7fc f971 	bl	8002018 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d40:	d90d      	bls.n	8005d5e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	22ff      	movs	r2, #255	; 0xff
 8005d48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e037      	b.n	8005dce <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0e2      	beq.n	8005d32 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d8a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d9a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0d      	ldr	r2, [pc, #52]	; (8005dd8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005da2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005dae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	22ff      	movs	r2, #255	; 0xff
 8005dba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3724      	adds	r7, #36	; 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd90      	pop	{r4, r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40010400 	.word	0x40010400

08005ddc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005de4:	4b1f      	ldr	r3, [pc, #124]	; (8005e64 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005de6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005dea:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d012      	beq.n	8005e20 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005e18:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 f824 	bl	8005e68 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d012      	beq.n	8005e54 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00b      	beq.n	8005e54 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005e4c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f96f 	bl	8006132 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40010400 	.word	0x40010400

08005e68 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a0d      	ldr	r2, [pc, #52]	; (8005ec0 <HAL_RTC_WaitForSynchro+0x44>)
 8005e8a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005e8c:	f7fc f8c4 	bl	8002018 <HAL_GetTick>
 8005e90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e92:	e009      	b.n	8005ea8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e94:	f7fc f8c0 	bl	8002018 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e007      	b.n	8005eb8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0ee      	beq.n	8005e94 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	0003ff5f 	.word	0x0003ff5f

08005ec4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d120      	bne.n	8005f20 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ee8:	f7fc f896 	bl	8002018 <HAL_GetTick>
 8005eec:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005eee:	e00d      	b.n	8005f0c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ef0:	f7fc f892 	bl	8002018 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005efe:	d905      	bls.n	8005f0c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2203      	movs	r2, #3
 8005f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <RTC_EnterInitMode+0x5c>
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d1e7      	bne.n	8005ef0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005f38:	4b1a      	ldr	r3, [pc, #104]	; (8005fa4 <RTC_ExitInitMode+0x78>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4a19      	ldr	r2, [pc, #100]	; (8005fa4 <RTC_ExitInitMode+0x78>)
 8005f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f42:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005f44:	4b17      	ldr	r3, [pc, #92]	; (8005fa4 <RTC_ExitInitMode+0x78>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10c      	bne.n	8005f6a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ff93 	bl	8005e7c <HAL_RTC_WaitForSynchro>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01e      	beq.n	8005f9a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	e017      	b.n	8005f9a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f6a:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <RTC_ExitInitMode+0x78>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	4a0d      	ldr	r2, [pc, #52]	; (8005fa4 <RTC_ExitInitMode+0x78>)
 8005f70:	f023 0320 	bic.w	r3, r3, #32
 8005f74:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff ff80 	bl	8005e7c <HAL_RTC_WaitForSynchro>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2203      	movs	r2, #3
 8005f86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <RTC_ExitInitMode+0x78>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	4a04      	ldr	r2, [pc, #16]	; (8005fa4 <RTC_ExitInitMode+0x78>)
 8005f94:	f043 0320 	orr.w	r3, r3, #32
 8005f98:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40002800 	.word	0x40002800

08005fa8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005fba:	e005      	b.n	8005fc8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005fc2:	7afb      	ldrb	r3, [r7, #11]
 8005fc4:	3b0a      	subs	r3, #10
 8005fc6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005fc8:	7afb      	ldrb	r3, [r7, #11]
 8005fca:	2b09      	cmp	r3, #9
 8005fcc:	d8f6      	bhi.n	8005fbc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	b2db      	uxtb	r3, r3
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	0092      	lsls	r2, r2, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	b2da      	uxtb	r2, r3
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	4413      	add	r3, r2
 800600e:	b2db      	uxtb	r3, r3
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8006030:	2302      	movs	r3, #2
 8006032:	e034      	b.n	800609e <HAL_RTCEx_SetCalibrationOutPut+0x82>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	22ca      	movs	r2, #202	; 0xca
 800604a:	625a      	str	r2, [r3, #36]	; 0x24
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2253      	movs	r2, #83	; 0x53
 8006052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8006062:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6899      	ldr	r1, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006082:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	22ff      	movs	r2, #255	; 0xff
 800608a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_RTCEx_SetRefClock+0x16>
 80060bc:	2302      	movs	r3, #2
 80060be:	e034      	b.n	800612a <HAL_RTCEx_SetRefClock+0x80>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	22ca      	movs	r2, #202	; 0xca
 80060d6:	625a      	str	r2, [r3, #36]	; 0x24
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2253      	movs	r2, #83	; 0x53
 80060de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff feef 	bl	8005ec4 <RTC_EnterInitMode>
 80060e6:	4603      	mov	r3, r0
 80060e8:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10c      	bne.n	800610a <HAL_RTCEx_SetRefClock+0x60>
  {
    __HAL_RTC_CLOCKREF_DETECTION_ENABLE(hrtc);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0210 	orr.w	r2, r2, #16
 80060fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff ff13 	bl	8005f2c <RTC_ExitInitMode>
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	22ff      	movs	r2, #255	; 0xff
 8006110:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d103      	bne.n	8006120 <HAL_RTCEx_SetRefClock+0x76>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e049      	b.n	80061ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f841 	bl	80061f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2202      	movs	r2, #2
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3304      	adds	r3, #4
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f000 f9d9 	bl	800653c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d001      	beq.n	8006220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e04f      	b.n	80062c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a23      	ldr	r2, [pc, #140]	; (80062cc <HAL_TIM_Base_Start_IT+0xc4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_TIM_Base_Start_IT+0x76>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624a:	d018      	beq.n	800627e <HAL_TIM_Base_Start_IT+0x76>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_TIM_Base_Start_IT+0x76>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1e      	ldr	r2, [pc, #120]	; (80062d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_TIM_Base_Start_IT+0x76>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_TIM_Base_Start_IT+0x76>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1b      	ldr	r2, [pc, #108]	; (80062dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_TIM_Base_Start_IT+0x76>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d115      	bne.n	80062aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	4b17      	ldr	r3, [pc, #92]	; (80062e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006286:	4013      	ands	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b06      	cmp	r3, #6
 800628e:	d015      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0xb4>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006296:	d011      	beq.n	80062bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	e008      	b.n	80062bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0201 	orr.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e000      	b.n	80062be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40000400 	.word	0x40000400
 80062d4:	40000800 	.word	0x40000800
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40013400 	.word	0x40013400
 80062e0:	40014000 	.word	0x40014000
 80062e4:	00010007 	.word	0x00010007

080062e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d020      	beq.n	800634c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01b      	beq.n	800634c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0202 	mvn.w	r2, #2
 800631c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f8e4 	bl	8006500 <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 f8d6 	bl	80064ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8e7 	bl	8006514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	d020      	beq.n	8006398 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01b      	beq.n	8006398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0204 	mvn.w	r2, #4
 8006368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f8be 	bl	8006500 <HAL_TIM_IC_CaptureCallback>
 8006384:	e005      	b.n	8006392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8b0 	bl	80064ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f8c1 	bl	8006514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d020      	beq.n	80063e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d01b      	beq.n	80063e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0208 	mvn.w	r2, #8
 80063b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2204      	movs	r2, #4
 80063ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f898 	bl	8006500 <HAL_TIM_IC_CaptureCallback>
 80063d0:	e005      	b.n	80063de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f88a 	bl	80064ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f89b 	bl	8006514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 0310 	and.w	r3, r3, #16
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d020      	beq.n	8006430 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01b      	beq.n	8006430 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0210 	mvn.w	r2, #16
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2208      	movs	r2, #8
 8006406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f872 	bl	8006500 <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f864 	bl	80064ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f875 	bl	8006514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00c      	beq.n	8006454 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0201 	mvn.w	r2, #1
 800644c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fb f8da 	bl	8001608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00c      	beq.n	8006478 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f906 	bl	8006684 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f8fe 	bl	8006698 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00c      	beq.n	80064c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d007      	beq.n	80064c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f834 	bl	8006528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00c      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0220 	mvn.w	r2, #32
 80064dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f8c6 	bl	8006670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064e4:	bf00      	nop
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a40      	ldr	r2, [pc, #256]	; (8006650 <TIM_Base_SetConfig+0x114>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d013      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800655a:	d00f      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a3d      	ldr	r2, [pc, #244]	; (8006654 <TIM_Base_SetConfig+0x118>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00b      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a3c      	ldr	r2, [pc, #240]	; (8006658 <TIM_Base_SetConfig+0x11c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d007      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a3b      	ldr	r2, [pc, #236]	; (800665c <TIM_Base_SetConfig+0x120>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3a      	ldr	r2, [pc, #232]	; (8006660 <TIM_Base_SetConfig+0x124>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d108      	bne.n	800658e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2f      	ldr	r2, [pc, #188]	; (8006650 <TIM_Base_SetConfig+0x114>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01f      	beq.n	80065d6 <TIM_Base_SetConfig+0x9a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659c:	d01b      	beq.n	80065d6 <TIM_Base_SetConfig+0x9a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2c      	ldr	r2, [pc, #176]	; (8006654 <TIM_Base_SetConfig+0x118>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d017      	beq.n	80065d6 <TIM_Base_SetConfig+0x9a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2b      	ldr	r2, [pc, #172]	; (8006658 <TIM_Base_SetConfig+0x11c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <TIM_Base_SetConfig+0x9a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	; (800665c <TIM_Base_SetConfig+0x120>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00f      	beq.n	80065d6 <TIM_Base_SetConfig+0x9a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a29      	ldr	r2, [pc, #164]	; (8006660 <TIM_Base_SetConfig+0x124>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00b      	beq.n	80065d6 <TIM_Base_SetConfig+0x9a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a28      	ldr	r2, [pc, #160]	; (8006664 <TIM_Base_SetConfig+0x128>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d007      	beq.n	80065d6 <TIM_Base_SetConfig+0x9a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a27      	ldr	r2, [pc, #156]	; (8006668 <TIM_Base_SetConfig+0x12c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_Base_SetConfig+0x9a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a26      	ldr	r2, [pc, #152]	; (800666c <TIM_Base_SetConfig+0x130>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d108      	bne.n	80065e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a10      	ldr	r2, [pc, #64]	; (8006650 <TIM_Base_SetConfig+0x114>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00f      	beq.n	8006634 <TIM_Base_SetConfig+0xf8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a12      	ldr	r2, [pc, #72]	; (8006660 <TIM_Base_SetConfig+0x124>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00b      	beq.n	8006634 <TIM_Base_SetConfig+0xf8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a11      	ldr	r2, [pc, #68]	; (8006664 <TIM_Base_SetConfig+0x128>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d007      	beq.n	8006634 <TIM_Base_SetConfig+0xf8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <TIM_Base_SetConfig+0x12c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_Base_SetConfig+0xf8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a0f      	ldr	r2, [pc, #60]	; (800666c <TIM_Base_SetConfig+0x130>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d103      	bne.n	800663c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	615a      	str	r2, [r3, #20]
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40000400 	.word	0x40000400
 8006658:	40000800 	.word	0x40000800
 800665c:	40000c00 	.word	0x40000c00
 8006660:	40013400 	.word	0x40013400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800

08006670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e040      	b.n	8006740 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fb f8ae 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2224      	movs	r2, #36	; 0x24
 80066d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0201 	bic.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fae0 	bl	8006cb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f825 	bl	8006748 <UART_SetConfig>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e01b      	b.n	8006740 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006726:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fb5f 	bl	8006dfc <UART_CheckIdleState>
 800673e:	4603      	mov	r3, r0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800674c:	b08a      	sub	sp, #40	; 0x28
 800674e:	af00      	add	r7, sp, #0
 8006750:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	431a      	orrs	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	431a      	orrs	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	69db      	ldr	r3, [r3, #28]
 800676c:	4313      	orrs	r3, r2
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4ba4      	ldr	r3, [pc, #656]	; (8006a08 <UART_SetConfig+0x2c0>)
 8006778:	4013      	ands	r3, r2
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006780:	430b      	orrs	r3, r1
 8006782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a99      	ldr	r2, [pc, #612]	; (8006a0c <UART_SetConfig+0x2c4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b0:	4313      	orrs	r3, r2
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c4:	430a      	orrs	r2, r1
 80067c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a90      	ldr	r2, [pc, #576]	; (8006a10 <UART_SetConfig+0x2c8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d126      	bne.n	8006820 <UART_SetConfig+0xd8>
 80067d2:	4b90      	ldr	r3, [pc, #576]	; (8006a14 <UART_SetConfig+0x2cc>)
 80067d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d81b      	bhi.n	8006818 <UART_SetConfig+0xd0>
 80067e0:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <UART_SetConfig+0xa0>)
 80067e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e6:	bf00      	nop
 80067e8:	080067f9 	.word	0x080067f9
 80067ec:	08006809 	.word	0x08006809
 80067f0:	08006801 	.word	0x08006801
 80067f4:	08006811 	.word	0x08006811
 80067f8:	2301      	movs	r3, #1
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fe:	e116      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006800:	2302      	movs	r3, #2
 8006802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006806:	e112      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006808:	2304      	movs	r3, #4
 800680a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680e:	e10e      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006810:	2308      	movs	r3, #8
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006816:	e10a      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006818:	2310      	movs	r3, #16
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681e:	e106      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a7c      	ldr	r2, [pc, #496]	; (8006a18 <UART_SetConfig+0x2d0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d138      	bne.n	800689c <UART_SetConfig+0x154>
 800682a:	4b7a      	ldr	r3, [pc, #488]	; (8006a14 <UART_SetConfig+0x2cc>)
 800682c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006830:	f003 030c 	and.w	r3, r3, #12
 8006834:	2b0c      	cmp	r3, #12
 8006836:	d82d      	bhi.n	8006894 <UART_SetConfig+0x14c>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0xf8>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006875 	.word	0x08006875
 8006844:	08006895 	.word	0x08006895
 8006848:	08006895 	.word	0x08006895
 800684c:	08006895 	.word	0x08006895
 8006850:	08006885 	.word	0x08006885
 8006854:	08006895 	.word	0x08006895
 8006858:	08006895 	.word	0x08006895
 800685c:	08006895 	.word	0x08006895
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006895 	.word	0x08006895
 8006868:	08006895 	.word	0x08006895
 800686c:	08006895 	.word	0x08006895
 8006870:	0800688d 	.word	0x0800688d
 8006874:	2300      	movs	r3, #0
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687a:	e0d8      	b.n	8006a2e <UART_SetConfig+0x2e6>
 800687c:	2302      	movs	r3, #2
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006882:	e0d4      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006884:	2304      	movs	r3, #4
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688a:	e0d0      	b.n	8006a2e <UART_SetConfig+0x2e6>
 800688c:	2308      	movs	r3, #8
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006892:	e0cc      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006894:	2310      	movs	r3, #16
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689a:	e0c8      	b.n	8006a2e <UART_SetConfig+0x2e6>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5e      	ldr	r2, [pc, #376]	; (8006a1c <UART_SetConfig+0x2d4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d125      	bne.n	80068f2 <UART_SetConfig+0x1aa>
 80068a6:	4b5b      	ldr	r3, [pc, #364]	; (8006a14 <UART_SetConfig+0x2cc>)
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068b0:	2b30      	cmp	r3, #48	; 0x30
 80068b2:	d016      	beq.n	80068e2 <UART_SetConfig+0x19a>
 80068b4:	2b30      	cmp	r3, #48	; 0x30
 80068b6:	d818      	bhi.n	80068ea <UART_SetConfig+0x1a2>
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d00a      	beq.n	80068d2 <UART_SetConfig+0x18a>
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d814      	bhi.n	80068ea <UART_SetConfig+0x1a2>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <UART_SetConfig+0x182>
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d008      	beq.n	80068da <UART_SetConfig+0x192>
 80068c8:	e00f      	b.n	80068ea <UART_SetConfig+0x1a2>
 80068ca:	2300      	movs	r3, #0
 80068cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d0:	e0ad      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80068d2:	2302      	movs	r3, #2
 80068d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d8:	e0a9      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80068da:	2304      	movs	r3, #4
 80068dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e0:	e0a5      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80068e2:	2308      	movs	r3, #8
 80068e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e8:	e0a1      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80068ea:	2310      	movs	r3, #16
 80068ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f0:	e09d      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a4a      	ldr	r2, [pc, #296]	; (8006a20 <UART_SetConfig+0x2d8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d125      	bne.n	8006948 <UART_SetConfig+0x200>
 80068fc:	4b45      	ldr	r3, [pc, #276]	; (8006a14 <UART_SetConfig+0x2cc>)
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006906:	2bc0      	cmp	r3, #192	; 0xc0
 8006908:	d016      	beq.n	8006938 <UART_SetConfig+0x1f0>
 800690a:	2bc0      	cmp	r3, #192	; 0xc0
 800690c:	d818      	bhi.n	8006940 <UART_SetConfig+0x1f8>
 800690e:	2b80      	cmp	r3, #128	; 0x80
 8006910:	d00a      	beq.n	8006928 <UART_SetConfig+0x1e0>
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d814      	bhi.n	8006940 <UART_SetConfig+0x1f8>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <UART_SetConfig+0x1d8>
 800691a:	2b40      	cmp	r3, #64	; 0x40
 800691c:	d008      	beq.n	8006930 <UART_SetConfig+0x1e8>
 800691e:	e00f      	b.n	8006940 <UART_SetConfig+0x1f8>
 8006920:	2300      	movs	r3, #0
 8006922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006926:	e082      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006928:	2302      	movs	r3, #2
 800692a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692e:	e07e      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006930:	2304      	movs	r3, #4
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006936:	e07a      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006938:	2308      	movs	r3, #8
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e076      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006940:	2310      	movs	r3, #16
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e072      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a35      	ldr	r2, [pc, #212]	; (8006a24 <UART_SetConfig+0x2dc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d12a      	bne.n	80069a8 <UART_SetConfig+0x260>
 8006952:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <UART_SetConfig+0x2cc>)
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006960:	d01a      	beq.n	8006998 <UART_SetConfig+0x250>
 8006962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006966:	d81b      	bhi.n	80069a0 <UART_SetConfig+0x258>
 8006968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696c:	d00c      	beq.n	8006988 <UART_SetConfig+0x240>
 800696e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006972:	d815      	bhi.n	80069a0 <UART_SetConfig+0x258>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <UART_SetConfig+0x238>
 8006978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697c:	d008      	beq.n	8006990 <UART_SetConfig+0x248>
 800697e:	e00f      	b.n	80069a0 <UART_SetConfig+0x258>
 8006980:	2300      	movs	r3, #0
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006986:	e052      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006988:	2302      	movs	r3, #2
 800698a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800698e:	e04e      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006990:	2304      	movs	r3, #4
 8006992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006996:	e04a      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006998:	2308      	movs	r3, #8
 800699a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699e:	e046      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80069a0:	2310      	movs	r3, #16
 80069a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a6:	e042      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a17      	ldr	r2, [pc, #92]	; (8006a0c <UART_SetConfig+0x2c4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d13a      	bne.n	8006a28 <UART_SetConfig+0x2e0>
 80069b2:	4b18      	ldr	r3, [pc, #96]	; (8006a14 <UART_SetConfig+0x2cc>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c0:	d01a      	beq.n	80069f8 <UART_SetConfig+0x2b0>
 80069c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069c6:	d81b      	bhi.n	8006a00 <UART_SetConfig+0x2b8>
 80069c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069cc:	d00c      	beq.n	80069e8 <UART_SetConfig+0x2a0>
 80069ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d2:	d815      	bhi.n	8006a00 <UART_SetConfig+0x2b8>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <UART_SetConfig+0x298>
 80069d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069dc:	d008      	beq.n	80069f0 <UART_SetConfig+0x2a8>
 80069de:	e00f      	b.n	8006a00 <UART_SetConfig+0x2b8>
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e022      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e01e      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e01a      	b.n	8006a2e <UART_SetConfig+0x2e6>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fe:	e016      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a06:	e012      	b.n	8006a2e <UART_SetConfig+0x2e6>
 8006a08:	efff69f3 	.word	0xefff69f3
 8006a0c:	40008000 	.word	0x40008000
 8006a10:	40013800 	.word	0x40013800
 8006a14:	40021000 	.word	0x40021000
 8006a18:	40004400 	.word	0x40004400
 8006a1c:	40004800 	.word	0x40004800
 8006a20:	40004c00 	.word	0x40004c00
 8006a24:	40005000 	.word	0x40005000
 8006a28:	2310      	movs	r3, #16
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a9f      	ldr	r2, [pc, #636]	; (8006cb0 <UART_SetConfig+0x568>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d17a      	bne.n	8006b2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d824      	bhi.n	8006a8a <UART_SetConfig+0x342>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0x300>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a8b 	.word	0x08006a8b
 8006a50:	08006a75 	.word	0x08006a75
 8006a54:	08006a8b 	.word	0x08006a8b
 8006a58:	08006a7b 	.word	0x08006a7b
 8006a5c:	08006a8b 	.word	0x08006a8b
 8006a60:	08006a8b 	.word	0x08006a8b
 8006a64:	08006a8b 	.word	0x08006a8b
 8006a68:	08006a83 	.word	0x08006a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7fe f8aa 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8006a70:	61f8      	str	r0, [r7, #28]
        break;
 8006a72:	e010      	b.n	8006a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a74:	4b8f      	ldr	r3, [pc, #572]	; (8006cb4 <UART_SetConfig+0x56c>)
 8006a76:	61fb      	str	r3, [r7, #28]
        break;
 8006a78:	e00d      	b.n	8006a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7a:	f7fe f80b 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8006a7e:	61f8      	str	r0, [r7, #28]
        break;
 8006a80:	e009      	b.n	8006a96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a86:	61fb      	str	r3, [r7, #28]
        break;
 8006a88:	e005      	b.n	8006a96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80fb 	beq.w	8006c94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	69fa      	ldr	r2, [r7, #28]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d305      	bcc.n	8006aba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d903      	bls.n	8006ac2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ac0:	e0e8      	b.n	8006c94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	461c      	mov	r4, r3
 8006ac8:	4615      	mov	r5, r2
 8006aca:	f04f 0200 	mov.w	r2, #0
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	022b      	lsls	r3, r5, #8
 8006ad4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ad8:	0222      	lsls	r2, r4, #8
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	6849      	ldr	r1, [r1, #4]
 8006ade:	0849      	lsrs	r1, r1, #1
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	4688      	mov	r8, r1
 8006ae4:	4681      	mov	r9, r0
 8006ae6:	eb12 0a08 	adds.w	sl, r2, r8
 8006aea:	eb43 0b09 	adc.w	fp, r3, r9
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006afc:	4650      	mov	r0, sl
 8006afe:	4659      	mov	r1, fp
 8006b00:	f7f9 ffa4 	bl	8000a4c <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4613      	mov	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b12:	d308      	bcc.n	8006b26 <UART_SetConfig+0x3de>
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b1a:	d204      	bcs.n	8006b26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	60da      	str	r2, [r3, #12]
 8006b24:	e0b6      	b.n	8006c94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b2c:	e0b2      	b.n	8006c94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b36:	d15e      	bne.n	8006bf6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	d828      	bhi.n	8006b92 <UART_SetConfig+0x44a>
 8006b40:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0x400>)
 8006b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b46:	bf00      	nop
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b75 	.word	0x08006b75
 8006b50:	08006b7d 	.word	0x08006b7d
 8006b54:	08006b93 	.word	0x08006b93
 8006b58:	08006b83 	.word	0x08006b83
 8006b5c:	08006b93 	.word	0x08006b93
 8006b60:	08006b93 	.word	0x08006b93
 8006b64:	08006b93 	.word	0x08006b93
 8006b68:	08006b8b 	.word	0x08006b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b6c:	f7fe f82a 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8006b70:	61f8      	str	r0, [r7, #28]
        break;
 8006b72:	e014      	b.n	8006b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b74:	f7fe f83c 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8006b78:	61f8      	str	r0, [r7, #28]
        break;
 8006b7a:	e010      	b.n	8006b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b7c:	4b4d      	ldr	r3, [pc, #308]	; (8006cb4 <UART_SetConfig+0x56c>)
 8006b7e:	61fb      	str	r3, [r7, #28]
        break;
 8006b80:	e00d      	b.n	8006b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b82:	f7fd ff87 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8006b86:	61f8      	str	r0, [r7, #28]
        break;
 8006b88:	e009      	b.n	8006b9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8e:	61fb      	str	r3, [r7, #28]
        break;
 8006b90:	e005      	b.n	8006b9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d077      	beq.n	8006c94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	005a      	lsls	r2, r3, #1
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	441a      	add	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b0f      	cmp	r3, #15
 8006bbe:	d916      	bls.n	8006bee <UART_SetConfig+0x4a6>
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc6:	d212      	bcs.n	8006bee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f023 030f 	bic.w	r3, r3, #15
 8006bd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	8afb      	ldrh	r3, [r7, #22]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	8afa      	ldrh	r2, [r7, #22]
 8006bea:	60da      	str	r2, [r3, #12]
 8006bec:	e052      	b.n	8006c94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bf4:	e04e      	b.n	8006c94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d827      	bhi.n	8006c4e <UART_SetConfig+0x506>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <UART_SetConfig+0x4bc>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	08006c4f 	.word	0x08006c4f
 8006c14:	08006c3f 	.word	0x08006c3f
 8006c18:	08006c4f 	.word	0x08006c4f
 8006c1c:	08006c4f 	.word	0x08006c4f
 8006c20:	08006c4f 	.word	0x08006c4f
 8006c24:	08006c47 	.word	0x08006c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c28:	f7fd ffcc 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8006c2c:	61f8      	str	r0, [r7, #28]
        break;
 8006c2e:	e014      	b.n	8006c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c30:	f7fd ffde 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8006c34:	61f8      	str	r0, [r7, #28]
        break;
 8006c36:	e010      	b.n	8006c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c38:	4b1e      	ldr	r3, [pc, #120]	; (8006cb4 <UART_SetConfig+0x56c>)
 8006c3a:	61fb      	str	r3, [r7, #28]
        break;
 8006c3c:	e00d      	b.n	8006c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3e:	f7fd ff29 	bl	8004a94 <HAL_RCC_GetSysClockFreq>
 8006c42:	61f8      	str	r0, [r7, #28]
        break;
 8006c44:	e009      	b.n	8006c5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4a:	61fb      	str	r3, [r7, #28]
        break;
 8006c4c:	e005      	b.n	8006c5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c58:	bf00      	nop
    }

    if (pclk != 0U)
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d019      	beq.n	8006c94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	085a      	lsrs	r2, r3, #1
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	441a      	add	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b0f      	cmp	r3, #15
 8006c78:	d909      	bls.n	8006c8e <UART_SetConfig+0x546>
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d205      	bcs.n	8006c8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60da      	str	r2, [r3, #12]
 8006c8c:	e002      	b.n	8006c94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ca0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3728      	adds	r7, #40	; 0x28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cae:	bf00      	nop
 8006cb0:	40008000 	.word	0x40008000
 8006cb4:	00f42400 	.word	0x00f42400

08006cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01a      	beq.n	8006dce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006db6:	d10a      	bne.n	8006dce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00a      	beq.n	8006df0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	605a      	str	r2, [r3, #4]
  }
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b098      	sub	sp, #96	; 0x60
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e0c:	f7fb f904 	bl	8002018 <HAL_GetTick>
 8006e10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0308 	and.w	r3, r3, #8
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d12e      	bne.n	8006e7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f88c 	bl	8006f4c <UART_WaitOnFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d021      	beq.n	8006e7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e58:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e6      	bne.n	8006e3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e062      	b.n	8006f44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d149      	bne.n	8006f20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e94:	2200      	movs	r2, #0
 8006e96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f856 	bl	8006f4c <UART_WaitOnFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d03c      	beq.n	8006f20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	e853 3f00 	ldrex	r3, [r3]
 8006eb2:	623b      	str	r3, [r7, #32]
   return(result);
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ecc:	e841 2300 	strex	r3, r2, [r1]
 8006ed0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e6      	bne.n	8006ea6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3308      	adds	r3, #8
 8006ede:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0301 	bic.w	r3, r3, #1
 8006eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef8:	61fa      	str	r2, [r7, #28]
 8006efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	69b9      	ldr	r1, [r7, #24]
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	617b      	str	r3, [r7, #20]
   return(result);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e5      	bne.n	8006ed8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e011      	b.n	8006f44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2220      	movs	r2, #32
 8006f24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3758      	adds	r7, #88	; 0x58
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	603b      	str	r3, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5c:	e049      	b.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d045      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f66:	f7fb f857 	bl	8002018 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d302      	bcc.n	8006f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e048      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d031      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d110      	bne.n	8006fbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f838 	bl	800701a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2208      	movs	r2, #8
 8006fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e029      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fcc:	d111      	bne.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f81e 	bl	800701a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e00f      	b.n	8007012 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	429a      	cmp	r2, r3
 800700e:	d0a6      	beq.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800701a:	b480      	push	{r7}
 800701c:	b095      	sub	sp, #84	; 0x54
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007040:	643b      	str	r3, [r7, #64]	; 0x40
 8007042:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007046:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e6      	bne.n	8007022 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	61fb      	str	r3, [r7, #28]
   return(result);
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f023 0301 	bic.w	r3, r3, #1
 800706a:	64bb      	str	r3, [r7, #72]	; 0x48
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3308      	adds	r3, #8
 8007072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007074:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800707a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800708c:	2b01      	cmp	r3, #1
 800708e:	d118      	bne.n	80070c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	60bb      	str	r3, [r7, #8]
   return(result);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f023 0310 	bic.w	r3, r3, #16
 80070a4:	647b      	str	r3, [r7, #68]	; 0x44
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6979      	ldr	r1, [r7, #20]
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	613b      	str	r3, [r7, #16]
   return(result);
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e6      	bne.n	8007090 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070d6:	bf00      	nop
 80070d8:	3754      	adds	r7, #84	; 0x54
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <max30102_init>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param hi2c Pointer to I2C object handle
 */
void max30102_init(max30102_t *obj, I2C_HandleTypeDef *hi2c)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
    obj->_ui2c = hi2c;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	601a      	str	r2, [r3, #0]
    obj->_interrupt_flag = 0;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    memset(obj->_ir_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3304      	adds	r3, #4
 80070fe:	2280      	movs	r2, #128	; 0x80
 8007100:	2100      	movs	r1, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f004 f966 	bl	800b3d4 <memset>
    memset(obj->_red_samples, 0, MAX30102_SAMPLE_LEN_MAX * sizeof(uint32_t));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3384      	adds	r3, #132	; 0x84
 800710c:	2280      	movs	r2, #128	; 0x80
 800710e:	2100      	movs	r1, #0
 8007110:	4618      	mov	r0, r3
 8007112:	f004 f95f 	bl	800b3d4 <memset>
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <max30102_write>:
 * @param reg Register address to write to.
 * @param buf Pointer containing the bytes to write.
 * @param buflen Number of bytes to write.
 */
void max30102_write(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b088      	sub	sp, #32
 8007122:	af02      	add	r7, sp, #8
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	461a      	mov	r2, r3
 800712a:	460b      	mov	r3, r1
 800712c:	72fb      	strb	r3, [r7, #11]
 800712e:	4613      	mov	r3, r2
 8007130:	813b      	strh	r3, [r7, #8]
    uint8_t *payload = (uint8_t *)malloc((buflen + 1) * sizeof(uint8_t));
 8007132:	893b      	ldrh	r3, [r7, #8]
 8007134:	3301      	adds	r3, #1
 8007136:	4618      	mov	r0, r3
 8007138:	f004 f85c 	bl	800b1f4 <malloc>
 800713c:	4603      	mov	r3, r0
 800713e:	617b      	str	r3, [r7, #20]
    *payload = reg;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	7afa      	ldrb	r2, [r7, #11]
 8007144:	701a      	strb	r2, [r3, #0]
    if (buf != NULL && buflen != 0)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d009      	beq.n	8007160 <max30102_write+0x42>
 800714c:	893b      	ldrh	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d006      	beq.n	8007160 <max30102_write+0x42>
        memcpy(payload + 1, buf, buflen);
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	3301      	adds	r3, #1
 8007156:	893a      	ldrh	r2, [r7, #8]
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	4618      	mov	r0, r3
 800715c:	f004 f9d4 	bl	800b508 <memcpy>
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, payload, buflen + 1, MAX30102_I2C_TIMEOUT);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	893b      	ldrh	r3, [r7, #8]
 8007166:	3301      	adds	r3, #1
 8007168:	b29b      	uxth	r3, r3
 800716a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800716e:	9200      	str	r2, [sp, #0]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	21ae      	movs	r1, #174	; 0xae
 8007174:	f7fb fb28 	bl	80027c8 <HAL_I2C_Master_Transmit>
    free(payload);
 8007178:	6978      	ldr	r0, [r7, #20]
 800717a:	f004 f843 	bl	800b204 <free>
}
 800717e:	bf00      	nop
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <max30102_read>:
 * @param reg Register address to read from.
 * @param buf Pointer to the array to write to.
 * @param buflen Number of bytes to read.
 */
void max30102_read(max30102_t *obj, uint8_t reg, uint8_t *buf, uint16_t buflen)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b088      	sub	sp, #32
 800718a:	af02      	add	r7, sp, #8
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	461a      	mov	r2, r3
 8007192:	460b      	mov	r3, r1
 8007194:	72fb      	strb	r3, [r7, #11]
 8007196:	4613      	mov	r3, r2
 8007198:	813b      	strh	r3, [r7, #8]
    uint8_t reg_addr = reg;
 800719a:	7afb      	ldrb	r3, [r7, #11]
 800719c:	75fb      	strb	r3, [r7, #23]
    HAL_I2C_Master_Transmit(obj->_ui2c, MAX30102_I2C_ADDR << 1, &reg_addr, 1, MAX30102_I2C_TIMEOUT);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f107 0217 	add.w	r2, r7, #23
 80071a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	2301      	movs	r3, #1
 80071ae:	21ae      	movs	r1, #174	; 0xae
 80071b0:	f7fb fb0a 	bl	80027c8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(obj->_ui2c, MAX30102_I2C_ADDR << 1, buf, buflen, MAX30102_I2C_TIMEOUT);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	893b      	ldrh	r3, [r7, #8]
 80071ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071be:	9200      	str	r2, [sp, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	21ae      	movs	r1, #174	; 0xae
 80071c4:	f7fb fc18 	bl	80029f8 <HAL_I2C_Master_Receive>
}
 80071c8:	bf00      	nop
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <max30102_reset>:
 * @brief Reset the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_reset(max30102_t *obj)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x40;
 80071d8:	2340      	movs	r3, #64	; 0x40
 80071da:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &val, 1);
 80071dc:	f107 020f 	add.w	r2, r7, #15
 80071e0:	2301      	movs	r3, #1
 80071e2:	2109      	movs	r1, #9
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff ff9a 	bl	800711e <max30102_write>
}
 80071ea:	bf00      	nop
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <max30102_set_a_full>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_a_full(max30102_t *obj, uint8_t enable)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	460b      	mov	r3, r1
 80071fc:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
    max30102_read(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 8007202:	f107 020f 	add.w	r2, r7, #15
 8007206:	2301      	movs	r3, #1
 8007208:	2102      	movs	r1, #2
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff ffbb 	bl	8007186 <max30102_read>
    reg &= ~(0x01 << MAX30102_INTERRUPT_A_FULL);
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007216:	b2db      	uxtb	r3, r3
 8007218:	73fb      	strb	r3, [r7, #15]
    reg |= ((enable & 0x01) << MAX30102_INTERRUPT_A_FULL);
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	01db      	lsls	r3, r3, #7
 800721e:	b25a      	sxtb	r2, r3
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	b25b      	sxtb	r3, r3
 8007224:	4313      	orrs	r3, r2
 8007226:	b25b      	sxtb	r3, r3
 8007228:	b2db      	uxtb	r3, r3
 800722a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_1, &reg, 1);
 800722c:	f107 020f 	add.w	r2, r7, #15
 8007230:	2301      	movs	r3, #1
 8007232:	2102      	movs	r1, #2
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff ff72 	bl	800711e <max30102_write>
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <max30102_set_die_temp_rdy>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_rdy(max30102_t *obj, uint8_t enable)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_INTERRUPT_DIE_TEMP_RDY;
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	b2db      	uxtb	r3, r3
 800725a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_INTERRUPT_ENABLE_2, &reg, 1);
 800725c:	f107 020f 	add.w	r2, r7, #15
 8007260:	2301      	movs	r3, #1
 8007262:	2103      	movs	r1, #3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff ff5a 	bl	800711e <max30102_write>
}
 800726a:	bf00      	nop
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <max30102_set_die_temp_en>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param enable Enable (1) or disable (0).
 */
void max30102_set_die_temp_en(max30102_t *obj, uint8_t enable)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
    uint8_t reg = (enable & 0x01) << MAX30102_DIE_TEMP_EN;
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	b2db      	uxtb	r3, r3
 800728a:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_DIE_TEMP_CONFIG, &reg, 1);
 800728c:	f107 020f 	add.w	r2, r7, #15
 8007290:	2301      	movs	r3, #1
 8007292:	2121      	movs	r1, #33	; 0x21
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff ff42 	bl	800711e <max30102_write>
}
 800729a:	bf00      	nop
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <max30102_set_mode>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param mode Measurement mode enum (max30102_mode_t).
 */
void max30102_set_mode(max30102_t *obj, max30102_mode_t mode)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_MODE_CONFIG, &config, 1);
 80072ae:	f107 020f 	add.w	r2, r7, #15
 80072b2:	2301      	movs	r3, #1
 80072b4:	2109      	movs	r1, #9
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff ff65 	bl	8007186 <max30102_read>
    config = (config & 0xf8) | mode;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	f023 0307 	bic.w	r3, r3, #7
 80072c4:	b25a      	sxtb	r2, r3
 80072c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_MODE_CONFIG, &config, 1);
 80072d2:	f107 020f 	add.w	r2, r7, #15
 80072d6:	2301      	movs	r3, #1
 80072d8:	2109      	movs	r1, #9
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff ff1f 	bl	800711e <max30102_write>
    max30102_clear_fifo(obj);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f8fb 	bl	80074dc <max30102_clear_fifo>
}
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <max30102_set_sampling_rate>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param sr Sampling rate enum (max30102_spo2_st_t).
 */
void max30102_set_sampling_rate(max30102_t *obj, max30102_sr_t sr)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80072fa:	f107 020f 	add.w	r2, r7, #15
 80072fe:	2301      	movs	r3, #1
 8007300:	210a      	movs	r1, #10
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff ff3f 	bl	8007186 <max30102_read>
    config = (config & 0x63) | (sr << MAX30102_SPO2_SR);
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	b25b      	sxtb	r3, r3
 800730c:	f003 0363 	and.w	r3, r3, #99	; 0x63
 8007310:	b25a      	sxtb	r2, r3
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	b25b      	sxtb	r3, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	b25b      	sxtb	r3, r3
 800731c:	b2db      	uxtb	r3, r3
 800731e:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007320:	f107 020f 	add.w	r2, r7, #15
 8007324:	2301      	movs	r3, #1
 8007326:	210a      	movs	r1, #10
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff fef8 	bl	800711e <max30102_write>
}
 800732e:	bf00      	nop
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <max30102_set_led_pulse_width>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param pw Pulse width enum (max30102_led_pw_t).
 */
void max30102_set_led_pulse_width(max30102_t *obj, max30102_led_pw_t pw)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007342:	f107 020f 	add.w	r2, r7, #15
 8007346:	2301      	movs	r3, #1
 8007348:	210a      	movs	r1, #10
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff ff1b 	bl	8007186 <max30102_read>
    config = (config & 0x7c) | (pw << MAX30102_SPO2_LEW_PW);
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	b25b      	sxtb	r3, r3
 8007354:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007358:	b25a      	sxtb	r2, r3
 800735a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800735e:	4313      	orrs	r3, r2
 8007360:	b25b      	sxtb	r3, r3
 8007362:	b2db      	uxtb	r3, r3
 8007364:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007366:	f107 020f 	add.w	r2, r7, #15
 800736a:	2301      	movs	r3, #1
 800736c:	210a      	movs	r1, #10
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7ff fed5 	bl	800711e <max30102_write>
}
 8007374:	bf00      	nop
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <max30102_set_adc_resolution>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param adc ADC resolution enum (max30102_adc_t).
 */
void max30102_set_adc_resolution(max30102_t *obj, max30102_adc_t adc)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
    uint8_t config;
    max30102_read(obj, MAX30102_SPO2_CONFIG, &config, 1);
 8007388:	f107 020f 	add.w	r2, r7, #15
 800738c:	2301      	movs	r3, #1
 800738e:	210a      	movs	r1, #10
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff fef8 	bl	8007186 <max30102_read>
    config = (config & 0x1f) | (adc << MAX30102_SPO2_ADC_RGE);
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	b25b      	sxtb	r3, r3
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	b25a      	sxtb	r2, r3
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	015b      	lsls	r3, r3, #5
 80073a4:	b25b      	sxtb	r3, r3
 80073a6:	4313      	orrs	r3, r2
 80073a8:	b25b      	sxtb	r3, r3
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_SPO2_CONFIG, &config, 1);
 80073ae:	f107 020f 	add.w	r2, r7, #15
 80073b2:	2301      	movs	r3, #1
 80073b4:	210a      	movs	r1, #10
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff feb1 	bl	800711e <max30102_write>
}
 80073bc:	bf00      	nop
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	0000      	movs	r0, r0
	...

080073c8 <max30102_set_led_current_1>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_1(max30102_t *obj, float ma)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 80073d4:	6838      	ldr	r0, [r7, #0]
 80073d6:	f7f9 f8af 	bl	8000538 <__aeabi_f2d>
 80073da:	a30d      	add	r3, pc, #52	; (adr r3, 8007410 <max30102_set_led_current_1+0x48>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f9 fa2c 	bl	800083c <__aeabi_ddiv>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4610      	mov	r0, r2
 80073ea:	4619      	mov	r1, r3
 80073ec:	f7f9 fb0e 	bl	8000a0c <__aeabi_d2uiz>
 80073f0:	4603      	mov	r3, r0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_IR_PA1, &pa, 1);
 80073f6:	f107 020f 	add.w	r2, r7, #15
 80073fa:	2301      	movs	r3, #1
 80073fc:	210c      	movs	r1, #12
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fe8d 	bl	800711e <max30102_write>
}
 8007404:	bf00      	nop
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	f3af 8000 	nop.w
 8007410:	9999999a 	.word	0x9999999a
 8007414:	3fc99999 	.word	0x3fc99999

08007418 <max30102_set_led_current_2>:
 *
 * @param obj Pointer to max30102_t object instance.
 * @param ma LED current float (0 < ma < 51.0).
 */
void max30102_set_led_current_2(max30102_t *obj, float ma)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	ed87 0a00 	vstr	s0, [r7]
    uint8_t pa = ma / 0.2;
 8007424:	6838      	ldr	r0, [r7, #0]
 8007426:	f7f9 f887 	bl	8000538 <__aeabi_f2d>
 800742a:	a30d      	add	r3, pc, #52	; (adr r3, 8007460 <max30102_set_led_current_2+0x48>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f7f9 fa04 	bl	800083c <__aeabi_ddiv>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4610      	mov	r0, r2
 800743a:	4619      	mov	r1, r3
 800743c:	f7f9 fae6 	bl	8000a0c <__aeabi_d2uiz>
 8007440:	4603      	mov	r3, r0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_LED_RED_PA2, &pa, 1);
 8007446:	f107 020f 	add.w	r2, r7, #15
 800744a:	2301      	movs	r3, #1
 800744c:	210d      	movs	r1, #13
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff fe65 	bl	800711e <max30102_write>
}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	f3af 8000 	nop.w
 8007460:	9999999a 	.word	0x9999999a
 8007464:	3fc99999 	.word	0x3fc99999

08007468 <max30102_set_fifo_config>:
 * @param smp_ave
 * @param roll_over_en Roll over enabled(1) or disabled(0).
 * @param fifo_a_full Number of empty samples when A_FULL interrupt issued (0 < fifo_a_full < 15).
 */
void max30102_set_fifo_config(max30102_t *obj, max30102_smp_ave_t smp_ave, uint8_t roll_over_en, uint8_t fifo_a_full)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	4608      	mov	r0, r1
 8007472:	4611      	mov	r1, r2
 8007474:	461a      	mov	r2, r3
 8007476:	4603      	mov	r3, r0
 8007478:	70fb      	strb	r3, [r7, #3]
 800747a:	460b      	mov	r3, r1
 800747c:	70bb      	strb	r3, [r7, #2]
 800747e:	4613      	mov	r3, r2
 8007480:	707b      	strb	r3, [r7, #1]
    uint8_t config = 0x00;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
    config |= smp_ave << MAX30102_FIFO_CONFIG_SMP_AVE;
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	015b      	lsls	r3, r3, #5
 800748a:	b25a      	sxtb	r2, r3
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	b25b      	sxtb	r3, r3
 8007490:	4313      	orrs	r3, r2
 8007492:	b25b      	sxtb	r3, r3
 8007494:	b2db      	uxtb	r3, r3
 8007496:	73fb      	strb	r3, [r7, #15]
    config |= ((roll_over_en & 0x01) << MAX30102_FIFO_CONFIG_ROLL_OVER_EN);
 8007498:	78bb      	ldrb	r3, [r7, #2]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	b25b      	sxtb	r3, r3
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	b25a      	sxtb	r2, r3
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	b25b      	sxtb	r3, r3
 80074a8:	4313      	orrs	r3, r2
 80074aa:	b25b      	sxtb	r3, r3
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	73fb      	strb	r3, [r7, #15]
    config |= ((fifo_a_full & 0x0f) << MAX30102_FIFO_CONFIG_FIFO_A_FULL);
 80074b0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80074b4:	f003 030f 	and.w	r3, r3, #15
 80074b8:	b25a      	sxtb	r2, r3
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	b25b      	sxtb	r3, r3
 80074be:	4313      	orrs	r3, r2
 80074c0:	b25b      	sxtb	r3, r3
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_CONFIG, &config, 1);
 80074c6:	f107 020f 	add.w	r2, r7, #15
 80074ca:	2301      	movs	r3, #1
 80074cc:	2108      	movs	r1, #8
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7ff fe25 	bl	800711e <max30102_write>
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <max30102_clear_fifo>:
 * @brief Clear all FIFO pointers in the sensor.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_clear_fifo(max30102_t *obj)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
    uint8_t val = 0x00;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]
    max30102_write(obj, MAX30102_FIFO_WR_PTR, &val, 3);
 80074e8:	f107 020f 	add.w	r2, r7, #15
 80074ec:	2303      	movs	r3, #3
 80074ee:	2104      	movs	r1, #4
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7ff fe14 	bl	800711e <max30102_write>
    max30102_write(obj, MAX30102_FIFO_RD_PTR, &val, 3);
 80074f6:	f107 020f 	add.w	r2, r7, #15
 80074fa:	2303      	movs	r3, #3
 80074fc:	2106      	movs	r1, #6
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff fe0d 	bl	800711e <max30102_write>
    max30102_write(obj, MAX30102_OVF_COUNTER, &val, 3);
 8007504:	f107 020f 	add.w	r2, r7, #15
 8007508:	2303      	movs	r3, #3
 800750a:	2105      	movs	r1, #5
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fe06 	bl	800711e <max30102_write>
}
 8007512:	bf00      	nop
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <max30102_read_fifo>:
 * @brief Read FIFO content and store to buffer in max30102_t object instance.
 *
 * @param obj Pointer to max30102_t object instance.
 */
void max30102_read_fifo(max30102_t *obj)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b088      	sub	sp, #32
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
    // First transaction: Get the FIFO_WR_PTR
    uint8_t wr_ptr = 0, rd_ptr = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	74fb      	strb	r3, [r7, #19]
 8007526:	2300      	movs	r3, #0
 8007528:	74bb      	strb	r3, [r7, #18]
    max30102_read(obj, MAX30102_FIFO_WR_PTR, &wr_ptr, 1);
 800752a:	f107 0213 	add.w	r2, r7, #19
 800752e:	2301      	movs	r3, #1
 8007530:	2104      	movs	r1, #4
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff fe27 	bl	8007186 <max30102_read>
    max30102_read(obj, MAX30102_FIFO_RD_PTR, &rd_ptr, 1);
 8007538:	f107 0212 	add.w	r2, r7, #18
 800753c:	2301      	movs	r3, #1
 800753e:	2106      	movs	r1, #6
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff fe20 	bl	8007186 <max30102_read>

    int8_t num_samples;

    num_samples = (int8_t)wr_ptr - (int8_t)rd_ptr;
 8007546:	7cfa      	ldrb	r2, [r7, #19]
 8007548:	7cbb      	ldrb	r3, [r7, #18]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	b2db      	uxtb	r3, r3
 800754e:	77fb      	strb	r3, [r7, #31]
    if (num_samples < 1)
 8007550:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc03      	bgt.n	8007560 <max30102_read_fifo+0x46>
    {
        num_samples += 32;
 8007558:	7ffb      	ldrb	r3, [r7, #31]
 800755a:	3320      	adds	r3, #32
 800755c:	b2db      	uxtb	r3, r3
 800755e:	77fb      	strb	r3, [r7, #31]
    }



    // Second transaction: Read NUM_SAMPLES_TO_READ samples from the FIFO
    for (int8_t i = 0; i < num_samples; i++)
 8007560:	2300      	movs	r3, #0
 8007562:	77bb      	strb	r3, [r7, #30]
 8007564:	e031      	b.n	80075ca <max30102_read_fifo+0xb0>
    {
        uint8_t sample[6];
        max30102_read(obj, MAX30102_FIFO_DATA, sample, 6);
 8007566:	f107 020c 	add.w	r2, r7, #12
 800756a:	2306      	movs	r3, #6
 800756c:	2107      	movs	r1, #7
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff fe09 	bl	8007186 <max30102_read>
        uint32_t ir_sample = ((uint32_t)(sample[0] << 16) | (uint32_t)(sample[1] << 8) | (uint32_t)(sample[2])) & 0x3ffff;
 8007574:	7b3b      	ldrb	r3, [r7, #12]
 8007576:	041b      	lsls	r3, r3, #16
 8007578:	461a      	mov	r2, r3
 800757a:	7b7b      	ldrb	r3, [r7, #13]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	4313      	orrs	r3, r2
 8007580:	7bba      	ldrb	r2, [r7, #14]
 8007582:	4313      	orrs	r3, r2
 8007584:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8007588:	61bb      	str	r3, [r7, #24]
        uint32_t red_sample = ((uint32_t)(sample[3] << 16) | (uint32_t)(sample[4] << 8) | (uint32_t)(sample[5])) & 0x3ffff;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	041b      	lsls	r3, r3, #16
 800758e:	461a      	mov	r2, r3
 8007590:	7c3b      	ldrb	r3, [r7, #16]
 8007592:	021b      	lsls	r3, r3, #8
 8007594:	4313      	orrs	r3, r2
 8007596:	7c7a      	ldrb	r2, [r7, #17]
 8007598:	4313      	orrs	r3, r2
 800759a:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800759e:	617b      	str	r3, [r7, #20]
        //possible resolution mix up when scaling to higher resolutions

        obj->_ir_samples[i] = ir_sample;
 80075a0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	605a      	str	r2, [r3, #4]
        obj->_red_samples[i] = red_sample;
 80075ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	3320      	adds	r3, #32
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	605a      	str	r2, [r3, #4]
    for (int8_t i = 0; i < num_samples; i++)
 80075be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	3301      	adds	r3, #1
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	77bb      	strb	r3, [r7, #30]
 80075ca:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80075ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	dbc7      	blt.n	8007566 <max30102_read_fifo+0x4c>

    }

    max30102_calculate_sample_data(num_samples);
 80075d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7f9 fe5a 	bl	8001294 <max30102_calculate_sample_data>


}
 80075e0:	bf00      	nop
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
 80075e8:	b590      	push	{r4, r7, lr}
 80075ea:	b0d3      	sub	sp, #332	; 0x14c
 80075ec:	af04      	add	r7, sp, #16
 80075ee:	f507 749c 	add.w	r4, r7, #312	; 0x138
 80075f2:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 80075f6:	6020      	str	r0, [r4, #0]
 80075f8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80075fc:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 8007600:	6001      	str	r1, [r0, #0]
 8007602:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8007606:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 800760a:	600a      	str	r2, [r1, #0]
 800760c:	461a      	mov	r2, r3
 800760e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007612:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007616:	801a      	strh	r2, [r3, #0]
    int32_t n_spo2_calc;
    int32_t n_y_dc_max, n_x_dc_max;
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5],n_ratio_average;
    int32_t n_nume,  n_denom ;
    uint32_t un_offset_tmp = un_offset;
 8007618:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800761c:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    // remove DC of ir signal
    un_ir_mean =0;
 8007626:	2300      	movs	r3, #0
 8007628:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (k=0 ; k<n_buffer_length ; k++ )
 800762c:	2300      	movs	r3, #0
 800762e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007632:	e021      	b.n	8007678 <maxim_heart_rate_and_oxygen_saturation+0x90>
	{
    	un_ir_mean += pun_ir_buffer[un_offset_tmp];
 8007634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800763e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	4413      	add	r3, r2
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800764c:	4413      	add	r3, r2
 800764e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8007652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007656:	3301      	adds	r3, #1
 8007658:	4ad4      	ldr	r2, [pc, #848]	; (80079ac <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 800765a:	fba2 1203 	umull	r1, r2, r2, r3
 800765e:	0952      	lsrs	r2, r2, #5
 8007660:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007664:	fb01 f202 	mul.w	r2, r1, r2
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 800766e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007672:	3301      	adds	r3, #1
 8007674:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007678:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800767c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007680:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	dbd4      	blt.n	8007634 <maxim_heart_rate_and_oxygen_saturation+0x4c>
	}

    un_ir_mean =un_ir_mean/n_buffer_length ;
 800768a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800768e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8007698:	fbb2 f3f3 	udiv	r3, r2, r3
 800769c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    un_offset_tmp = un_offset;
 80076a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076a4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 80076ae:	2300      	movs	r3, #0
 80076b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80076b4:	e025      	b.n	8007702 <maxim_heart_rate_and_oxygen_saturation+0x11a>
	{
    	an_x[k] =  pun_ir_buffer[un_offset_tmp] - un_ir_mean;
 80076b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80076c0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	4413      	add	r3, r2
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	4619      	mov	r1, r3
 80076d2:	4ab7      	ldr	r2, [pc, #732]	; (80079b0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 80076d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 80076dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80076e0:	3301      	adds	r3, #1
 80076e2:	4ab2      	ldr	r2, [pc, #712]	; (80079ac <maxim_heart_rate_and_oxygen_saturation+0x3c4>)
 80076e4:	fba2 1203 	umull	r1, r2, r2, r3
 80076e8:	0952      	lsrs	r2, r2, #5
 80076ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80076ee:	fb01 f202 	mul.w	r2, r1, r2
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )
 80076f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fc:	3301      	adds	r3, #1
 80076fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007702:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007706:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800770a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	dbd0      	blt.n	80076b6 <maxim_heart_rate_and_oxygen_saturation+0xce>
	}

    // 4 pt Moving Average
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 8007714:	2300      	movs	r3, #0
 8007716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800771a:	e02c      	b.n	8007776 <maxim_heart_rate_and_oxygen_saturation+0x18e>
    {
        n_denom= ( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3]);
 800771c:	4aa4      	ldr	r2, [pc, #656]	; (80079b0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800771e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007722:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772a:	3301      	adds	r3, #1
 800772c:	49a0      	ldr	r1, [pc, #640]	; (80079b0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800772e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007732:	441a      	add	r2, r3
 8007734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007738:	3302      	adds	r3, #2
 800773a:	499d      	ldr	r1, [pc, #628]	; (80079b0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800773c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007740:	441a      	add	r2, r3
 8007742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007746:	3303      	adds	r3, #3
 8007748:	4999      	ldr	r1, [pc, #612]	; (80079b0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 800774a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800774e:	4413      	add	r3, r2
 8007750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        an_x[k]=  n_denom/(int32_t)4;
 8007754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007758:	2b00      	cmp	r3, #0
 800775a:	da00      	bge.n	800775e <maxim_heart_rate_and_oxygen_saturation+0x176>
 800775c:	3303      	adds	r3, #3
 800775e:	109b      	asrs	r3, r3, #2
 8007760:	4619      	mov	r1, r3
 8007762:	4a93      	ldr	r2, [pc, #588]	; (80079b0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8007764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007768:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++)
 800776c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007770:	3301      	adds	r3, #1
 8007772:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777a:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 800777e:	dbcd      	blt.n	800771c <maxim_heart_rate_and_oxygen_saturation+0x134>
    }

    // get difference of smoothed IR signal
    
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 8007780:	2300      	movs	r3, #0
 8007782:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007786:	e015      	b.n	80077b4 <maxim_heart_rate_and_oxygen_saturation+0x1cc>
        an_dx[k]= (an_x[k+1]- an_x[k]);
 8007788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778c:	3301      	adds	r3, #1
 800778e:	4a88      	ldr	r2, [pc, #544]	; (80079b0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8007790:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007794:	4986      	ldr	r1, [pc, #536]	; (80079b0 <maxim_heart_rate_and_oxygen_saturation+0x3c8>)
 8007796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	4984      	ldr	r1, [pc, #528]	; (80079b4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80077a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( k=0; k<BUFFER_SIZE-MA4_SIZE-1;  k++)
 80077aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ae:	3301      	adds	r3, #1
 80077b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80077b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b8:	f5b3 7fc5 	cmp.w	r3, #394	; 0x18a
 80077bc:	dde4      	ble.n	8007788 <maxim_heart_rate_and_oxygen_saturation+0x1a0>

    // 2-pt Moving Average to an_dx
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 80077be:	2300      	movs	r3, #0
 80077c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80077c4:	e019      	b.n	80077fa <maxim_heart_rate_and_oxygen_saturation+0x212>
        an_dx[k] =  ( an_dx[k]+an_dx[k+1])/2 ;
 80077c6:	4a7b      	ldr	r2, [pc, #492]	; (80079b4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80077c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80077d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d4:	3301      	adds	r3, #1
 80077d6:	4977      	ldr	r1, [pc, #476]	; (80079b4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80077d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80077dc:	4413      	add	r3, r2
 80077de:	0fda      	lsrs	r2, r3, #31
 80077e0:	4413      	add	r3, r2
 80077e2:	105b      	asrs	r3, r3, #1
 80077e4:	4619      	mov	r1, r3
 80077e6:	4a73      	ldr	r2, [pc, #460]	; (80079b4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80077e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE-2; k++){
 80077f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f4:	3301      	adds	r3, #1
 80077f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80077fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fe:	f5b3 7fc5 	cmp.w	r3, #394	; 0x18a
 8007802:	dbe0      	blt.n	80077c6 <maxim_heart_rate_and_oxygen_saturation+0x1de>
    }
    
    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8007804:	2300      	movs	r3, #0
 8007806:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800780a:	e039      	b.n	8007880 <maxim_heart_rate_and_oxygen_saturation+0x298>
        s= 0;
 800780c:	2300      	movs	r3, #0
 800780e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8007812:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007816:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800781a:	e018      	b.n	800784e <maxim_heart_rate_and_oxygen_saturation+0x266>
            s -= an_dx[k] *auw_hamm[k-i] ;
 800781c:	4a65      	ldr	r2, [pc, #404]	; (80079b4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800781e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007826:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800782a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800782e:	1a8a      	subs	r2, r1, r2
 8007830:	4961      	ldr	r1, [pc, #388]	; (80079b8 <maxim_heart_rate_and_oxygen_saturation+0x3d0>)
 8007832:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8007836:	fb02 f303 	mul.w	r3, r2, r3
 800783a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        for( k=i; k<i+ HAMMING_SIZE ;k++){
 8007844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007848:	3301      	adds	r3, #1
 800784a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800784e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007852:	3304      	adds	r3, #4
 8007854:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007858:	429a      	cmp	r2, r3
 800785a:	dddf      	ble.n	800781c <maxim_heart_rate_and_oxygen_saturation+0x234>
                     }
        an_dx[i]= s/ (int32_t)1146; // divide by sum of auw_hamm
 800785c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007860:	4a56      	ldr	r2, [pc, #344]	; (80079bc <maxim_heart_rate_and_oxygen_saturation+0x3d4>)
 8007862:	fb82 1203 	smull	r1, r2, r2, r3
 8007866:	1252      	asrs	r2, r2, #9
 8007868:	17db      	asrs	r3, r3, #31
 800786a:	1ad2      	subs	r2, r2, r3
 800786c:	4951      	ldr	r1, [pc, #324]	; (80079b4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800786e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for ( i=0 ; i<BUFFER_SIZE-HAMMING_SIZE-MA4_SIZE-2 ;i++){
 8007876:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800787a:	3301      	adds	r3, #1
 800787c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007880:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007884:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 8007888:	ddc0      	ble.n	800780c <maxim_heart_rate_and_oxygen_saturation+0x224>
    }


    n_th1=0; // threshold calculation
 800788a:	2300      	movs	r3, #0
 800788c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 8007890:	2300      	movs	r3, #0
 8007892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007896:	e011      	b.n	80078bc <maxim_heart_rate_and_oxygen_saturation+0x2d4>
        n_th1 += ((an_dx[k]>0)? an_dx[k] : ((int32_t)0-an_dx[k])) ;
 8007898:	4a46      	ldr	r2, [pc, #280]	; (80079b4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 800789a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bfb8      	it	lt
 80078a6:	425b      	neglt	r3, r3
 80078a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80078ac:	4413      	add	r3, r2
 80078ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    for ( k=0 ; k<BUFFER_SIZE-HAMMING_SIZE ;k++){
 80078b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078b6:	3301      	adds	r3, #1
 80078b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80078bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c0:	f5b3 7fc5 	cmp.w	r3, #394	; 0x18a
 80078c4:	dde8      	ble.n	8007898 <maxim_heart_rate_and_oxygen_saturation+0x2b0>
    }
    n_th1= n_th1/ ( BUFFER_SIZE-HAMMING_SIZE);
 80078c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078ca:	4a3d      	ldr	r2, [pc, #244]	; (80079c0 <maxim_heart_rate_and_oxygen_saturation+0x3d8>)
 80078cc:	fb82 1203 	smull	r1, r2, r2, r3
 80078d0:	11d2      	asrs	r2, r2, #7
 80078d2:	17db      	asrs	r3, r3, #31
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks( an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE-HAMMING_SIZE, n_th1, 8, 5 );//peak_height, peak_distance, max_num_peaks
 80078da:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80078de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80078e2:	2305      	movs	r3, #5
 80078e4:	9302      	str	r3, [sp, #8]
 80078e6:	2308      	movs	r3, #8
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	f240 138b 	movw	r3, #395	; 0x18b
 80078f4:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <maxim_heart_rate_and_oxygen_saturation+0x3cc>)
 80078f6:	f000 fb91 	bl	800801c <maxim_find_peaks>

    n_peak_interval_sum =0;
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    if (n_npks>=2){
 8007900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007904:	2b01      	cmp	r3, #1
 8007906:	dd44      	ble.n	8007992 <maxim_heart_rate_and_oxygen_saturation+0x3aa>
        for (k=1; k<n_npks; k++)
 8007908:	2301      	movs	r3, #1
 800790a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800790e:	e01b      	b.n	8007948 <maxim_heart_rate_and_oxygen_saturation+0x360>
            n_peak_interval_sum += (an_dx_peak_locs[k]-an_dx_peak_locs[k -1]);
 8007910:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007914:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007918:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800791c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007924:	1e59      	subs	r1, r3, #1
 8007926:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800792a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800792e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8007938:	4413      	add	r3, r2
 800793a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        for (k=1; k<n_npks; k++)
 800793e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007942:	3301      	adds	r3, #1
 8007944:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800794c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007950:	429a      	cmp	r2, r3
 8007952:	dbdd      	blt.n	8007910 <maxim_heart_rate_and_oxygen_saturation+0x328>
        n_peak_interval_sum=n_peak_interval_sum/(n_npks-1);
 8007954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007958:	3b01      	subs	r3, #1
 800795a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800795e:	fb92 f3f3 	sdiv	r3, r2, r3
 8007962:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
        *pn_heart_rate=(int32_t)(6000/(float)n_peak_interval_sum*(float)(FS/100.0));// beats per minutes
 8007966:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007972:	eddf 6a14 	vldr	s13, [pc, #80]	; 80079c4 <maxim_heart_rate_and_oxygen_saturation+0x3dc>
 8007976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800797e:	ee17 2a90 	vmov	r2, s15
 8007982:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007986:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 1;
 8007988:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800798c:	2201      	movs	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	e007      	b.n	80079a2 <maxim_heart_rate_and_oxygen_saturation+0x3ba>
    }
    else  {
        *pn_heart_rate = -999;
 8007992:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007996:	4a0c      	ldr	r2, [pc, #48]	; (80079c8 <maxim_heart_rate_and_oxygen_saturation+0x3e0>)
 8007998:	601a      	str	r2, [r3, #0]
        *pch_hr_valid  = 0;
 800799a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
    }

    for ( k=0 ; k<n_npks ;k++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80079a8:	e026      	b.n	80079f8 <maxim_heart_rate_and_oxygen_saturation+0x410>
 80079aa:	bf00      	nop
 80079ac:	10624dd3 	.word	0x10624dd3
 80079b0:	200019ec 	.word	0x200019ec
 80079b4:	200013bc 	.word	0x200013bc
 80079b8:	0800c580 	.word	0x0800c580
 80079bc:	725f9bed 	.word	0x725f9bed
 80079c0:	52f4fb77 	.word	0x52f4fb77
 80079c4:	45bb8000 	.word	0x45bb8000
 80079c8:	fffffc19 	.word	0xfffffc19
        an_ir_valley_locs[k]=an_dx_peak_locs[k]+HAMMING_SIZE/2;
 80079cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80079d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80079d4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80079d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079dc:	1c9a      	adds	r2, r3, #2
 80079de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80079e8:	443b      	add	r3, r7
 80079ea:	f843 2c9c 	str.w	r2, [r3, #-156]
    for ( k=0 ; k<n_npks ;k++)
 80079ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f2:	3301      	adds	r3, #1
 80079f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80079f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079fc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007a00:	429a      	cmp	r2, r3
 8007a02:	dbe3      	blt.n	80079cc <maxim_heart_rate_and_oxygen_saturation+0x3e4>


    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    un_offset_tmp = un_offset;
 8007a04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a08:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007a0c:	881b      	ldrh	r3, [r3, #0]
 8007a0e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8007a12:	2300      	movs	r3, #0
 8007a14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007a18:	e032      	b.n	8007a80 <maxim_heart_rate_and_oxygen_saturation+0x498>
        an_x[k] =  pun_ir_buffer[un_offset_tmp];
 8007a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a24:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007a28:	6812      	ldr	r2, [r2, #0]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4ab3      	ldr	r2, [pc, #716]	; (8007d00 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k] =  pun_red_buffer[un_offset_tmp];
 8007a3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007a44:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4aac      	ldr	r2, [pc, #688]	; (8007d04 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8007a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        un_offset_tmp = (un_offset_tmp + 1) % MAX30102_BUFFER_LENGTH;
 8007a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a5e:	3301      	adds	r3, #1
 8007a60:	4aa9      	ldr	r2, [pc, #676]	; (8007d08 <maxim_heart_rate_and_oxygen_saturation+0x720>)
 8007a62:	fba2 1203 	umull	r1, r2, r2, r3
 8007a66:	0952      	lsrs	r2, r2, #5
 8007a68:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007a6c:	fb01 f202 	mul.w	r2, r1, r2
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    for (k=0 ; k<n_buffer_length ; k++ )  {
 8007a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007a80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a84:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007a88:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	dbc3      	blt.n	8007a1a <maxim_heart_rate_and_oxygen_saturation+0x432>
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count =0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007a9e:	e05a      	b.n	8007b56 <maxim_heart_rate_and_oxygen_saturation+0x56e>
        un_only_once =1;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        m=an_ir_valley_locs[k];
 8007aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007ab0:	443b      	add	r3, r7
 8007ab2:	f853 3c9c 	ldr.w	r3, [r3, #-156]
 8007ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        n_c_min= 16777216;//2^24;
 8007aba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007abe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        if (m+5 <  BUFFER_SIZE-HAMMING_SIZE  && m-5 >0){
 8007ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac6:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8007aca:	da3f      	bge.n	8007b4c <maxim_heart_rate_and_oxygen_saturation+0x564>
 8007acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad0:	2b05      	cmp	r3, #5
 8007ad2:	dd3b      	ble.n	8007b4c <maxim_heart_rate_and_oxygen_saturation+0x564>
            for(i= m-5;i<m+5; i++)
 8007ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad8:	3b05      	subs	r3, #5
 8007ada:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007ade:	e025      	b.n	8007b2c <maxim_heart_rate_and_oxygen_saturation+0x544>
                if (an_x[i]<n_c_min){
 8007ae0:	4a87      	ldr	r2, [pc, #540]	; (8007d00 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007ae2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007aee:	429a      	cmp	r2, r3
 8007af0:	dd17      	ble.n	8007b22 <maxim_heart_rate_and_oxygen_saturation+0x53a>
                    if (un_only_once >0){
 8007af2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <maxim_heart_rate_and_oxygen_saturation+0x518>
                       un_only_once =0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                   }
                   n_c_min= an_x[i] ;
 8007b00:	4a7f      	ldr	r2, [pc, #508]	; (8007d00 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007b02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
                   an_exact_ir_valley_locs[k]=i;
 8007b0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007b18:	443b      	add	r3, r7
 8007b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007b1e:	f843 2cd8 	str.w	r2, [r3, #-216]
            for(i= m-5;i<m+5; i++)
 8007b22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007b26:	3301      	adds	r3, #1
 8007b28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b30:	3304      	adds	r3, #4
 8007b32:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007b36:	429a      	cmp	r2, r3
 8007b38:	ddd2      	ble.n	8007ae0 <maxim_heart_rate_and_oxygen_saturation+0x4f8>
                }
            if (un_only_once ==0)
 8007b3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <maxim_heart_rate_and_oxygen_saturation+0x564>
                n_exact_ir_valley_locs_count ++ ;
 8007b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b46:	3301      	adds	r3, #1
 8007b48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    for(k=0 ; k<n_npks ;k++){
 8007b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b50:	3301      	adds	r3, #1
 8007b52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b5a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	db9e      	blt.n	8007aa0 <maxim_heart_rate_and_oxygen_saturation+0x4b8>
        }
    }
    if (n_exact_ir_valley_locs_count <2 ){
 8007b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	dc08      	bgt.n	8007b7c <maxim_heart_rate_and_oxygen_saturation+0x594>
       *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8007b6a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007b6e:	4a67      	ldr	r2, [pc, #412]	; (8007d0c <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8007b70:	601a      	str	r2, [r3, #0]
       *pch_spo2_valid  = 0;
 8007b72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
       return;
 8007b7a:	e243      	b.n	8008004 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    // 4 pt MA
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007b82:	e04c      	b.n	8007c1e <maxim_heart_rate_and_oxygen_saturation+0x636>
        an_x[k]=( an_x[k]+an_x[k+1]+ an_x[k+2]+ an_x[k+3])/(int32_t)4;
 8007b84:	4a5e      	ldr	r2, [pc, #376]	; (8007d00 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b92:	3301      	adds	r3, #1
 8007b94:	495a      	ldr	r1, [pc, #360]	; (8007d00 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007b96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007b9a:	441a      	add	r2, r3
 8007b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba0:	3302      	adds	r3, #2
 8007ba2:	4957      	ldr	r1, [pc, #348]	; (8007d00 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007ba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ba8:	441a      	add	r2, r3
 8007baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bae:	3303      	adds	r3, #3
 8007bb0:	4953      	ldr	r1, [pc, #332]	; (8007d00 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007bb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da00      	bge.n	8007bbe <maxim_heart_rate_and_oxygen_saturation+0x5d6>
 8007bbc:	3303      	adds	r3, #3
 8007bbe:	109b      	asrs	r3, r3, #2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	4a4f      	ldr	r2, [pc, #316]	; (8007d00 <maxim_heart_rate_and_oxygen_saturation+0x718>)
 8007bc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        an_y[k]=( an_y[k]+an_y[k+1]+ an_y[k+2]+ an_y[k+3])/(int32_t)4;
 8007bcc:	4a4d      	ldr	r2, [pc, #308]	; (8007d04 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8007bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bda:	3301      	adds	r3, #1
 8007bdc:	4949      	ldr	r1, [pc, #292]	; (8007d04 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8007bde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007be2:	441a      	add	r2, r3
 8007be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be8:	3302      	adds	r3, #2
 8007bea:	4946      	ldr	r1, [pc, #280]	; (8007d04 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8007bec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf6:	3303      	adds	r3, #3
 8007bf8:	4942      	ldr	r1, [pc, #264]	; (8007d04 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8007bfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007bfe:	4413      	add	r3, r2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	da00      	bge.n	8007c06 <maxim_heart_rate_and_oxygen_saturation+0x61e>
 8007c04:	3303      	adds	r3, #3
 8007c06:	109b      	asrs	r3, r3, #2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4a3e      	ldr	r2, [pc, #248]	; (8007d04 <maxim_heart_rate_and_oxygen_saturation+0x71c>)
 8007c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for(k=0; k< BUFFER_SIZE-MA4_SIZE; k++){
 8007c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c18:	3301      	adds	r3, #1
 8007c1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c22:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8007c26:	dbad      	blt.n	8007b84 <maxim_heart_rate_and_oxygen_saturation+0x59c>
    }

    //using an_exact_ir_valley_locs , find ir-red DC andir-red AC for SPO2 calibration ratio
    //finding AC/DC maximum of raw ir * red between two valley locations
    n_ratio_average =0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    n_i_ratio_count =0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    for(k=0; k< 5; k++) an_ratio[k]=0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007c3a:	e00d      	b.n	8007c58 <maxim_heart_rate_and_oxygen_saturation+0x670>
 8007c3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007c44:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007c48:	2100      	movs	r1, #0
 8007c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c52:	3301      	adds	r3, #1
 8007c54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	dded      	ble.n	8007c3c <maxim_heart_rate_and_oxygen_saturation+0x654>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8007c60:	2300      	movs	r3, #0
 8007c62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007c66:	e018      	b.n	8007c9a <maxim_heart_rate_and_oxygen_saturation+0x6b2>
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE ){
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007c72:	443b      	add	r3, r7
 8007c74:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007c78:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8007c7c:	dd08      	ble.n	8007c90 <maxim_heart_rate_and_oxygen_saturation+0x6a8>
            *pn_spo2 =  -999 ; // do not use SPO2 since valley loc is out of range
 8007c7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007c82:	4a22      	ldr	r2, [pc, #136]	; (8007d0c <maxim_heart_rate_and_oxygen_saturation+0x724>)
 8007c84:	601a      	str	r2, [r3, #0]
            *pch_spo2_valid  = 0;
 8007c86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
            return;
 8007c8e:	e1b9      	b.n	8008004 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    for (k=0; k< n_exact_ir_valley_locs_count; k++){
 8007c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c94:	3301      	adds	r3, #1
 8007c96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007c9a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	dbe0      	blt.n	8007c68 <maxim_heart_rate_and_oxygen_saturation+0x680>
        }
    }
    // find max between two valley locations
    // and use ratio betwen AC compoent of Ir & Red and DC compoent of Ir & Red for SPO2

    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007cac:	e14d      	b.n	8007f4a <maxim_heart_rate_and_oxygen_saturation+0x962>
        n_y_dc_max= -16777216 ;
 8007cae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8007cb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        n_x_dc_max= - 16777216;
 8007cb6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8007cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        if (an_exact_ir_valley_locs[k+1]-an_exact_ir_valley_locs[k] >10){
 8007cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007cca:	443b      	add	r3, r7
 8007ccc:	f853 2cd8 	ldr.w	r2, [r3, #-216]
 8007cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007cda:	443b      	add	r3, r7
 8007cdc:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b0a      	cmp	r3, #10
 8007ce4:	f340 812c 	ble.w	8007f40 <maxim_heart_rate_and_oxygen_saturation+0x958>
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8007ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007cf2:	443b      	add	r3, r7
 8007cf4:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007cf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007cfc:	e035      	b.n	8007d6a <maxim_heart_rate_and_oxygen_saturation+0x782>
 8007cfe:	bf00      	nop
 8007d00:	200019ec 	.word	0x200019ec
 8007d04:	2000202c 	.word	0x2000202c
 8007d08:	10624dd3 	.word	0x10624dd3
 8007d0c:	fffffc19 	.word	0xfffffc19
                if (an_x[i]> n_x_dc_max) {n_x_dc_max =an_x[i];n_x_dc_max_idx =i; }
 8007d10:	4abe      	ldr	r2, [pc, #760]	; (800800c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007d12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d1a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	da0a      	bge.n	8007d38 <maxim_heart_rate_and_oxygen_saturation+0x750>
 8007d22:	4aba      	ldr	r2, [pc, #744]	; (800800c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007d24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007d30:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                if (an_y[i]> n_y_dc_max) {n_y_dc_max =an_y[i];n_y_dc_max_idx=i;}
 8007d38:	4ab5      	ldr	r2, [pc, #724]	; (8008010 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8007d3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d42:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007d46:	429a      	cmp	r2, r3
 8007d48:	da0a      	bge.n	8007d60 <maxim_heart_rate_and_oxygen_saturation+0x778>
 8007d4a:	4ab1      	ldr	r2, [pc, #708]	; (8008010 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8007d4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007d58:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            for (i=an_exact_ir_valley_locs[k]; i< an_exact_ir_valley_locs[k+1]; i++){
 8007d60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007d64:	3301      	adds	r3, #1
 8007d66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6e:	3301      	adds	r3, #1
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007d76:	443b      	add	r3, r7
 8007d78:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007d7c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8007d80:	429a      	cmp	r2, r3
 8007d82:	dbc5      	blt.n	8007d10 <maxim_heart_rate_and_oxygen_saturation+0x728>
            }
            n_y_ac= (an_y[an_exact_ir_valley_locs[k+1]] - an_y[an_exact_ir_valley_locs[k] ] )*(n_y_dc_max_idx -an_exact_ir_valley_locs[k]); //red
 8007d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d88:	3301      	adds	r3, #1
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007d90:	443b      	add	r3, r7
 8007d92:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007d96:	4a9e      	ldr	r2, [pc, #632]	; (8008010 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8007d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007da6:	443b      	add	r3, r7
 8007da8:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007dac:	4998      	ldr	r1, [pc, #608]	; (8008010 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8007dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007dbe:	443b      	add	r3, r7
 8007dc0:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007dc4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8007dc8:	1acb      	subs	r3, r1, r3
 8007dca:	fb02 f303 	mul.w	r3, r2, r3
 8007dce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_y_ac=  an_y[an_exact_ir_valley_locs[k]] + n_y_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k])  ;
 8007dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007ddc:	443b      	add	r3, r7
 8007dde:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007de2:	4a8b      	ldr	r2, [pc, #556]	; (8008010 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8007de4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dec:	3301      	adds	r3, #1
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007df4:	443b      	add	r3, r7
 8007df6:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 8007dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007e04:	443b      	add	r3, r7
 8007e06:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007e0a:	1acb      	subs	r3, r1, r3
 8007e0c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8007e10:	fb91 f3f3 	sdiv	r3, r1, r3
 8007e14:	4413      	add	r3, r2
 8007e16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec


            n_y_ac=  an_y[n_y_dc_max_idx] - n_y_ac;    // subracting linear DC compoenents from raw
 8007e1a:	4a7d      	ldr	r2, [pc, #500]	; (8008010 <maxim_heart_rate_and_oxygen_saturation+0xa28>)
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
            n_x_ac= (an_x[an_exact_ir_valley_locs[k+1]] - an_x[an_exact_ir_valley_locs[k] ] )*(n_x_dc_max_idx -an_exact_ir_valley_locs[k]); // ir
 8007e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e32:	3301      	adds	r3, #1
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007e3a:	443b      	add	r3, r7
 8007e3c:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007e40:	4a72      	ldr	r2, [pc, #456]	; (800800c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007e42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007e50:	443b      	add	r3, r7
 8007e52:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007e56:	496d      	ldr	r1, [pc, #436]	; (800800c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007e58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e5c:	1ad2      	subs	r2, r2, r3
 8007e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007e68:	443b      	add	r3, r7
 8007e6a:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007e6e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8007e72:	1acb      	subs	r3, r1, r3
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
 8007e78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[an_exact_ir_valley_locs[k]] + n_x_ac/ (an_exact_ir_valley_locs[k+1] - an_exact_ir_valley_locs[k]);
 8007e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007e86:	443b      	add	r3, r7
 8007e88:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007e8c:	4a5f      	ldr	r2, [pc, #380]	; (800800c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007e8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e96:	3301      	adds	r3, #1
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007e9e:	443b      	add	r3, r7
 8007ea0:	f853 1cd8 	ldr.w	r1, [r3, #-216]
 8007ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8007eae:	443b      	add	r3, r7
 8007eb0:	f853 3cd8 	ldr.w	r3, [r3, #-216]
 8007eb4:	1acb      	subs	r3, r1, r3
 8007eb6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8007eba:	fb91 f3f3 	sdiv	r3, r1, r3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_x_ac=  an_x[n_y_dc_max_idx] - n_x_ac;      // subracting linear DC compoenents from raw
 8007ec4:	4a51      	ldr	r2, [pc, #324]	; (800800c <maxim_heart_rate_and_oxygen_saturation+0xa24>)
 8007ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ece:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            n_nume=( n_y_ac *n_x_dc_max)>>7 ; //prepare X100 to preserve floating value
 8007ed8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007edc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8007ee0:	fb02 f303 	mul.w	r3, r2, r3
 8007ee4:	11db      	asrs	r3, r3, #7
 8007ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            n_denom= ( n_x_ac *n_y_dc_max)>>7;
 8007eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007eee:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
 8007ef6:	11db      	asrs	r3, r3, #7
 8007ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
            if (n_denom>0  && n_i_ratio_count <5 &&  n_nume != 0)
 8007efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	dd1d      	ble.n	8007f40 <maxim_heart_rate_and_oxygen_saturation+0x958>
 8007f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	dc19      	bgt.n	8007f40 <maxim_heart_rate_and_oxygen_saturation+0x958>
 8007f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d015      	beq.n	8007f40 <maxim_heart_rate_and_oxygen_saturation+0x958>
            {
                an_ratio[n_i_ratio_count]= (n_nume*100)/n_denom ; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f18:	2264      	movs	r2, #100	; 0x64
 8007f1a:	fb03 f202 	mul.w	r2, r3, r2
 8007f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f22:	fb92 f1f3 	sdiv	r1, r2, r3
 8007f26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                n_i_ratio_count++;
 8007f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    for (k=0; k< n_exact_ir_valley_locs_count-1; k++){
 8007f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f44:	3301      	adds	r3, #1
 8007f46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8007f54:	429a      	cmp	r2, r3
 8007f56:	f6ff aeaa 	blt.w	8007cae <maxim_heart_rate_and_oxygen_saturation+0x6c6>
            }
        }
    }

    maxim_sort_ascend(an_ratio, n_i_ratio_count);
 8007f5a:	f107 0310 	add.w	r3, r7, #16
 8007f5e:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f94f 	bl	8008206 <maxim_sort_ascend>
    n_middle_idx= n_i_ratio_count/2;
 8007f68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f6c:	0fda      	lsrs	r2, r3, #31
 8007f6e:	4413      	add	r3, r2
 8007f70:	105b      	asrs	r3, r3, #1
 8007f72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    if (n_middle_idx >1)
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	dd17      	ble.n	8007fae <maxim_heart_rate_and_oxygen_saturation+0x9c6>
        n_ratio_average =( an_ratio[n_middle_idx-1] +an_ratio[n_middle_idx])/2; // use median
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f82:	1e5a      	subs	r2, r3, #1
 8007f84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007f94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f98:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8007f9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	0fda      	lsrs	r2, r3, #31
 8007fa4:	4413      	add	r3, r2
 8007fa6:	105b      	asrs	r3, r3, #1
 8007fa8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007fac:	e009      	b.n	8007fc2 <maxim_heart_rate_and_oxygen_saturation+0x9da>
    else
        n_ratio_average = an_ratio[n_middle_idx ];
 8007fae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007fb2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007fb6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8007fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    if( n_ratio_average>2 && n_ratio_average <184){
 8007fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	dd14      	ble.n	8007ff4 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
 8007fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fce:	2bb7      	cmp	r3, #183	; 0xb7
 8007fd0:	dc10      	bgt.n	8007ff4 <maxim_heart_rate_and_oxygen_saturation+0xa0c>
        n_spo2_calc= uch_spo2_table[n_ratio_average] ;
 8007fd2:	4a10      	ldr	r2, [pc, #64]	; (8008014 <maxim_heart_rate_and_oxygen_saturation+0xa2c>)
 8007fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fd8:	4413      	add	r3, r2
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        *pn_spo2 = n_spo2_calc ;
 8007fe0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007fe4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007fe8:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 1;//  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
 8007fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007fee:	2201      	movs	r2, #1
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	e007      	b.n	8008004 <maxim_heart_rate_and_oxygen_saturation+0xa1c>
    }
    else{
        *pn_spo2 =  -999 ; // do not use SPO2 since signal ratio is out of range
 8007ff4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007ff8:	4a07      	ldr	r2, [pc, #28]	; (8008018 <maxim_heart_rate_and_oxygen_saturation+0xa30>)
 8007ffa:	601a      	str	r2, [r3, #0]
        *pch_spo2_valid  = 0;
 8007ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008000:	2200      	movs	r2, #0
 8008002:	701a      	strb	r2, [r3, #0]
    }
}
 8008004:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008008:	46bd      	mov	sp, r7
 800800a:	bd90      	pop	{r4, r7, pc}
 800800c:	200019ec 	.word	0x200019ec
 8008010:	2000202c 	.word	0x2000202c
 8008014:	0800c5c0 	.word	0x0800c5c0
 8008018:	fffffc19 	.word	0xfffffc19

0800801c <maxim_find_peaks>:
* \par          Details
*               Find at most MAX_NUM peaks above MIN_HEIGHT separated by at least MIN_DISTANCE
*
* \retval       None
*/
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af02      	add	r7, sp, #8
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
    maxim_peaks_above_min_height( pn_locs, pn_npks, pn_x, n_size, n_min_height );
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f812 	bl	800805e <maxim_peaks_above_min_height>
    maxim_remove_close_peaks( pn_locs, pn_npks, pn_x, n_min_distance );
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 f880 	bl	8008146 <maxim_remove_close_peaks>
    *pn_npks = min( *pn_npks, n_max_num );
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	429a      	cmp	r2, r3
 800804e:	bfa8      	it	ge
 8008050:	461a      	movge	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	601a      	str	r2, [r3, #0]
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
 800805e:	b480      	push	{r7}
 8008060:	b087      	sub	sp, #28
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	603b      	str	r3, [r7, #0]
    int32_t i = 1, n_width;
 800806c:	2301      	movs	r3, #1
 800806e:	617b      	str	r3, [r7, #20]
    *pn_npks = 0;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]

    while (i < n_size-1){
 8008076:	e05a      	b.n	800812e <maxim_peaks_above_min_height+0xd0>
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i-1]){            // find left edge of potential peaks
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	4413      	add	r3, r2
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6a3a      	ldr	r2, [r7, #32]
 8008084:	429a      	cmp	r2, r3
 8008086:	da4f      	bge.n	8008128 <maxim_peaks_above_min_height+0xca>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	4413      	add	r3, r2
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008098:	3b01      	subs	r3, #1
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	440b      	add	r3, r1
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	dd40      	ble.n	8008128 <maxim_peaks_above_min_height+0xca>
            n_width = 1;
 80080a6:	2301      	movs	r3, #1
 80080a8:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 80080aa:	e002      	b.n	80080b2 <maxim_peaks_above_min_height+0x54>
                n_width++;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	3301      	adds	r3, #1
 80080b0:	613b      	str	r3, [r7, #16]
            while (i+n_width < n_size && pn_x[i] == pn_x[i+n_width])    // find flat peaks
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4413      	add	r3, r2
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	dd0d      	ble.n	80080da <maxim_peaks_above_min_height+0x7c>
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4413      	add	r3, r2
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	6979      	ldr	r1, [r7, #20]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	440b      	add	r3, r1
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	440b      	add	r3, r1
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d0e8      	beq.n	80080ac <maxim_peaks_above_min_height+0x4e>
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4413      	add	r3, r2
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	6979      	ldr	r1, [r7, #20]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	440b      	add	r3, r1
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	440b      	add	r3, r1
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	dd13      	ble.n	800811e <maxim_peaks_above_min_height+0xc0>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b0e      	cmp	r3, #14
 80080fc:	dc0f      	bgt.n	800811e <maxim_peaks_above_min_height+0xc0>
                pn_locs[(*pn_npks)++] = i;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	1c59      	adds	r1, r3, #1
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	6011      	str	r1, [r2, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	601a      	str	r2, [r3, #0]
                // for flat peaks, peak location is left edge
                i += n_width+1;
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	3301      	adds	r3, #1
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4413      	add	r3, r2
 800811a:	617b      	str	r3, [r7, #20]
 800811c:	e003      	b.n	8008126 <maxim_peaks_above_min_height+0xc8>
            }
            else
                i += n_width;
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	4413      	add	r3, r2
 8008124:	617b      	str	r3, [r7, #20]
            if (pn_x[i] > pn_x[i+n_width] && (*pn_npks) < 15 ){                            // find right edge of peaks
 8008126:	e002      	b.n	800812e <maxim_peaks_above_min_height+0xd0>
        }
        else
            i++;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	3301      	adds	r3, #1
 800812c:	617b      	str	r3, [r7, #20]
    while (i < n_size-1){
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	3b01      	subs	r3, #1
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	429a      	cmp	r2, r3
 8008136:	db9f      	blt.n	8008078 <maxim_peaks_above_min_height+0x1a>
    }
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	371c      	adds	r7, #28
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <maxim_remove_close_peaks>:
* \par          Details
*               Remove peaks separated by less than MIN_DISTANCE
*
* \retval       None
*/
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b088      	sub	sp, #32
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	603b      	str	r3, [r7, #0]
    
    int32_t i, j, n_old_npks, n_dist;
    
    /* Order peaks from large to small */
    maxim_sort_indices_descend( pn_x, pn_locs, *pn_npks );
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f895 	bl	800828c <maxim_sort_indices_descend>

    for ( i = -1; i < *pn_npks; i++ ){
 8008162:	f04f 33ff 	mov.w	r3, #4294967295
 8008166:	61fb      	str	r3, [r7, #28]
 8008168:	e03e      	b.n	80081e8 <maxim_remove_close_peaks+0xa2>
        n_old_npks = *pn_npks;
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	617b      	str	r3, [r7, #20]
        *pn_npks = i+1;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	3301      	adds	r3, #1
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	e02c      	b.n	80081da <maxim_remove_close_peaks+0x94>
            n_dist =  pn_locs[j] - ( i == -1 ? -1 : pn_locs[i] ); // lag-zero peak of autocorr is at index -1
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4413      	add	r3, r2
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d005      	beq.n	800819e <maxim_remove_close_peaks+0x58>
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	68f9      	ldr	r1, [r7, #12]
 8008198:	440b      	add	r3, r1
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	e001      	b.n	80081a2 <maxim_remove_close_peaks+0x5c>
 800819e:	f04f 33ff 	mov.w	r3, #4294967295
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	613b      	str	r3, [r7, #16]
            if ( n_dist > n_min_distance || n_dist < -n_min_distance )
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	dc04      	bgt.n	80081b8 <maxim_remove_close_peaks+0x72>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	425b      	negs	r3, r3
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	da0d      	bge.n	80081d4 <maxim_remove_close_peaks+0x8e>
                pn_locs[(*pn_npks)++] = pn_locs[j];
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	441a      	add	r2, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	1c58      	adds	r0, r3, #1
 80081c6:	68b9      	ldr	r1, [r7, #8]
 80081c8:	6008      	str	r0, [r1, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	68f9      	ldr	r1, [r7, #12]
 80081ce:	440b      	add	r3, r1
 80081d0:	6812      	ldr	r2, [r2, #0]
 80081d2:	601a      	str	r2, [r3, #0]
        for ( j = i+1; j < n_old_npks; j++ ){
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	3301      	adds	r3, #1
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	429a      	cmp	r2, r3
 80081e0:	dbce      	blt.n	8008180 <maxim_remove_close_peaks+0x3a>
    for ( i = -1; i < *pn_npks; i++ ){
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	3301      	adds	r3, #1
 80081e6:	61fb      	str	r3, [r7, #28]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	dbbb      	blt.n	800816a <maxim_remove_close_peaks+0x24>
        }
    }

    // Resort indices longo ascending order
    maxim_sort_ascend( pn_locs, *pn_npks );
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4619      	mov	r1, r3
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f804 	bl	8008206 <maxim_sort_ascend>
}
 80081fe:	bf00      	nop
 8008200:	3720      	adds	r7, #32
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
 8008206:	b480      	push	{r7}
 8008208:	b087      	sub	sp, #28
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	6039      	str	r1, [r7, #0]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8008210:	2301      	movs	r3, #1
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	e02f      	b.n	8008276 <maxim_sort_ascend+0x70>
        n_temp = pn_x[i];
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60fb      	str	r3, [r7, #12]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	e00f      	b.n	8008248 <maxim_sort_ascend+0x42>
            pn_x[j] = pn_x[j-1];
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800822e:	3b01      	subs	r3, #1
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	441a      	add	r2, r3
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	6879      	ldr	r1, [r7, #4]
 800823c:	440b      	add	r3, r1
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && n_temp < pn_x[j-1]; j--)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	3b01      	subs	r3, #1
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	dd0a      	ble.n	8008264 <maxim_sort_ascend+0x5e>
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008254:	3b01      	subs	r3, #1
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	4413      	add	r3, r2
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	429a      	cmp	r2, r3
 8008262:	dbe1      	blt.n	8008228 <maxim_sort_ascend+0x22>
        pn_x[j] = n_temp;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	4413      	add	r3, r2
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	3301      	adds	r3, #1
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	dbcb      	blt.n	8008216 <maxim_sort_ascend+0x10>
    }
}
 800827e:	bf00      	nop
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/ 
{
 800828c:	b480      	push	{r7}
 800828e:	b089      	sub	sp, #36	; 0x24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++) {
 8008298:	2301      	movs	r3, #1
 800829a:	61fb      	str	r3, [r7, #28]
 800829c:	e037      	b.n	800830e <maxim_sort_indices_descend+0x82>
        n_temp = pn_indx[i];
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	4413      	add	r3, r2
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	617b      	str	r3, [r7, #20]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	61bb      	str	r3, [r7, #24]
 80082ae:	e00f      	b.n	80082d0 <maxim_sort_indices_descend+0x44>
            pn_indx[j] = pn_indx[j-1];
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082b6:	3b01      	subs	r3, #1
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	441a      	add	r2, r3
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	440b      	add	r3, r1
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	601a      	str	r2, [r3, #0]
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j-1]]; j--)
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	61bb      	str	r3, [r7, #24]
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd12      	ble.n	80082fc <maxim_sort_indices_descend+0x70>
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4413      	add	r3, r2
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082e6:	3b01      	subs	r3, #1
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	440b      	add	r3, r1
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	68f9      	ldr	r1, [r7, #12]
 80082f4:	440b      	add	r3, r1
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	dcd9      	bgt.n	80082b0 <maxim_sort_indices_descend+0x24>
        pn_indx[j] = n_temp;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	4413      	add	r3, r2
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	601a      	str	r2, [r3, #0]
    for (i = 1; i < n_size; i++) {
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	3301      	adds	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	429a      	cmp	r2, r3
 8008314:	dbc3      	blt.n	800829e <maxim_sort_indices_descend+0x12>
    }
}
 8008316:	bf00      	nop
 8008318:	bf00      	nop
 800831a:	3724      	adds	r7, #36	; 0x24
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <__NVIC_SetPriority>:
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008334:	2b00      	cmp	r3, #0
 8008336:	db0a      	blt.n	800834e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	b2da      	uxtb	r2, r3
 800833c:	490c      	ldr	r1, [pc, #48]	; (8008370 <__NVIC_SetPriority+0x4c>)
 800833e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008342:	0112      	lsls	r2, r2, #4
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	440b      	add	r3, r1
 8008348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800834c:	e00a      	b.n	8008364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	b2da      	uxtb	r2, r3
 8008352:	4908      	ldr	r1, [pc, #32]	; (8008374 <__NVIC_SetPriority+0x50>)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	3b04      	subs	r3, #4
 800835c:	0112      	lsls	r2, r2, #4
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	440b      	add	r3, r1
 8008362:	761a      	strb	r2, [r3, #24]
}
 8008364:	bf00      	nop
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	e000e100 	.word	0xe000e100
 8008374:	e000ed00 	.word	0xe000ed00

08008378 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800837c:	4b05      	ldr	r3, [pc, #20]	; (8008394 <SysTick_Handler+0x1c>)
 800837e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008380:	f001 ff60 	bl	800a244 <xTaskGetSchedulerState>
 8008384:	4603      	mov	r3, r0
 8008386:	2b01      	cmp	r3, #1
 8008388:	d001      	beq.n	800838e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800838a:	f002 fe45 	bl	800b018 <xPortSysTickHandler>
  }
}
 800838e:	bf00      	nop
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	e000e010 	.word	0xe000e010

08008398 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800839c:	2100      	movs	r1, #0
 800839e:	f06f 0004 	mvn.w	r0, #4
 80083a2:	f7ff ffbf 	bl	8008324 <__NVIC_SetPriority>
#endif
}
 80083a6:	bf00      	nop
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083b2:	f3ef 8305 	mrs	r3, IPSR
 80083b6:	603b      	str	r3, [r7, #0]
  return(result);
 80083b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80083be:	f06f 0305 	mvn.w	r3, #5
 80083c2:	607b      	str	r3, [r7, #4]
 80083c4:	e00c      	b.n	80083e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083c6:	4b0a      	ldr	r3, [pc, #40]	; (80083f0 <osKernelInitialize+0x44>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d105      	bne.n	80083da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083ce:	4b08      	ldr	r3, [pc, #32]	; (80083f0 <osKernelInitialize+0x44>)
 80083d0:	2201      	movs	r2, #1
 80083d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	607b      	str	r3, [r7, #4]
 80083d8:	e002      	b.n	80083e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80083da:	f04f 33ff 	mov.w	r3, #4294967295
 80083de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083e0:	687b      	ldr	r3, [r7, #4]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	2000266c 	.word	0x2000266c

080083f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083fa:	f3ef 8305 	mrs	r3, IPSR
 80083fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008400:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008406:	f06f 0305 	mvn.w	r3, #5
 800840a:	607b      	str	r3, [r7, #4]
 800840c:	e010      	b.n	8008430 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800840e:	4b0b      	ldr	r3, [pc, #44]	; (800843c <osKernelStart+0x48>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d109      	bne.n	800842a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008416:	f7ff ffbf 	bl	8008398 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800841a:	4b08      	ldr	r3, [pc, #32]	; (800843c <osKernelStart+0x48>)
 800841c:	2202      	movs	r2, #2
 800841e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008420:	f001 faac 	bl	800997c <vTaskStartScheduler>
      stat = osOK;
 8008424:	2300      	movs	r3, #0
 8008426:	607b      	str	r3, [r7, #4]
 8008428:	e002      	b.n	8008430 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800842a:	f04f 33ff 	mov.w	r3, #4294967295
 800842e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008430:	687b      	ldr	r3, [r7, #4]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	2000266c 	.word	0x2000266c

08008440 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b08e      	sub	sp, #56	; 0x38
 8008444:	af04      	add	r7, sp, #16
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800844c:	2300      	movs	r3, #0
 800844e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008450:	f3ef 8305 	mrs	r3, IPSR
 8008454:	617b      	str	r3, [r7, #20]
  return(result);
 8008456:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008458:	2b00      	cmp	r3, #0
 800845a:	d17e      	bne.n	800855a <osThreadNew+0x11a>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d07b      	beq.n	800855a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008462:	2380      	movs	r3, #128	; 0x80
 8008464:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008466:	2318      	movs	r3, #24
 8008468:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800846a:	2300      	movs	r3, #0
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800846e:	f04f 33ff 	mov.w	r3, #4294967295
 8008472:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d045      	beq.n	8008506 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <osThreadNew+0x48>
        name = attr->name;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d008      	beq.n	80084ae <osThreadNew+0x6e>
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	2b38      	cmp	r3, #56	; 0x38
 80084a0:	d805      	bhi.n	80084ae <osThreadNew+0x6e>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <osThreadNew+0x72>
        return (NULL);
 80084ae:	2300      	movs	r3, #0
 80084b0:	e054      	b.n	800855c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	089b      	lsrs	r3, r3, #2
 80084c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00e      	beq.n	80084e8 <osThreadNew+0xa8>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	2ba7      	cmp	r3, #167	; 0xa7
 80084d0:	d90a      	bls.n	80084e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d006      	beq.n	80084e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <osThreadNew+0xa8>
        mem = 1;
 80084e2:	2301      	movs	r3, #1
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	e010      	b.n	800850a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10c      	bne.n	800850a <osThreadNew+0xca>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d108      	bne.n	800850a <osThreadNew+0xca>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d104      	bne.n	800850a <osThreadNew+0xca>
          mem = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	e001      	b.n	800850a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d110      	bne.n	8008532 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008518:	9202      	str	r2, [sp, #8]
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	6a3a      	ldr	r2, [r7, #32]
 8008524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f001 f83c 	bl	80095a4 <xTaskCreateStatic>
 800852c:	4603      	mov	r3, r0
 800852e:	613b      	str	r3, [r7, #16]
 8008530:	e013      	b.n	800855a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d110      	bne.n	800855a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	b29a      	uxth	r2, r3
 800853c:	f107 0310 	add.w	r3, r7, #16
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f001 f887 	bl	800965e <xTaskCreate>
 8008550:	4603      	mov	r3, r0
 8008552:	2b01      	cmp	r3, #1
 8008554:	d001      	beq.n	800855a <osThreadNew+0x11a>
            hTask = NULL;
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800855a:	693b      	ldr	r3, [r7, #16]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3728      	adds	r7, #40	; 0x28
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800856c:	f3ef 8305 	mrs	r3, IPSR
 8008570:	60bb      	str	r3, [r7, #8]
  return(result);
 8008572:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <osDelay+0x1c>
    stat = osErrorISR;
 8008578:	f06f 0305 	mvn.w	r3, #5
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	e007      	b.n	8008590 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <osDelay+0x2c>
      vTaskDelay(ticks);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f001 f9c2 	bl	8009914 <vTaskDelay>
    }
  }

  return (stat);
 8008590:	68fb      	ldr	r3, [r7, #12]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800859a:	b580      	push	{r7, lr}
 800859c:	b088      	sub	sp, #32
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085a6:	f3ef 8305 	mrs	r3, IPSR
 80085aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80085ac:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d174      	bne.n	800869c <osMutexNew+0x102>
    if (attr != NULL) {
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	61bb      	str	r3, [r7, #24]
 80085be:	e001      	b.n	80085c4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <osMutexNew+0x3a>
      rmtx = 1U;
 80085ce:	2301      	movs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e001      	b.n	80085d8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d15c      	bne.n	800869c <osMutexNew+0x102>
      mem = -1;
 80085e2:	f04f 33ff 	mov.w	r3, #4294967295
 80085e6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d015      	beq.n	800861a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d006      	beq.n	8008604 <osMutexNew+0x6a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	2b4f      	cmp	r3, #79	; 0x4f
 80085fc:	d902      	bls.n	8008604 <osMutexNew+0x6a>
          mem = 1;
 80085fe:	2301      	movs	r3, #1
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	e00c      	b.n	800861e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d108      	bne.n	800861e <osMutexNew+0x84>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <osMutexNew+0x84>
            mem = 0;
 8008614:	2300      	movs	r3, #0
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	e001      	b.n	800861e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d112      	bne.n	800864a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	4619      	mov	r1, r3
 8008630:	2004      	movs	r0, #4
 8008632:	f000 fa90 	bl	8008b56 <xQueueCreateMutexStatic>
 8008636:	61f8      	str	r0, [r7, #28]
 8008638:	e016      	b.n	8008668 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	4619      	mov	r1, r3
 8008640:	2001      	movs	r0, #1
 8008642:	f000 fa88 	bl	8008b56 <xQueueCreateMutexStatic>
 8008646:	61f8      	str	r0, [r7, #28]
 8008648:	e00e      	b.n	8008668 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10b      	bne.n	8008668 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008656:	2004      	movs	r0, #4
 8008658:	f000 fa65 	bl	8008b26 <xQueueCreateMutex>
 800865c:	61f8      	str	r0, [r7, #28]
 800865e:	e003      	b.n	8008668 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008660:	2001      	movs	r0, #1
 8008662:	f000 fa60 	bl	8008b26 <xQueueCreateMutex>
 8008666:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00c      	beq.n	8008688 <osMutexNew+0xee>
        if (attr != NULL) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d003      	beq.n	800867c <osMutexNew+0xe2>
          name = attr->name;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	e001      	b.n	8008680 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	69f8      	ldr	r0, [r7, #28]
 8008684:	f000 ff30 	bl	80094e8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d006      	beq.n	800869c <osMutexNew+0x102>
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	f043 0301 	orr.w	r3, r3, #1
 800869a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800869c:	69fb      	ldr	r3, [r7, #28]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4a07      	ldr	r2, [pc, #28]	; (80086d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80086b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4a06      	ldr	r2, [pc, #24]	; (80086d8 <vApplicationGetIdleTaskMemory+0x30>)
 80086be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2280      	movs	r2, #128	; 0x80
 80086c4:	601a      	str	r2, [r3, #0]
}
 80086c6:	bf00      	nop
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	20002670 	.word	0x20002670
 80086d8:	20002718 	.word	0x20002718

080086dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4a07      	ldr	r2, [pc, #28]	; (8008708 <vApplicationGetTimerTaskMemory+0x2c>)
 80086ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4a06      	ldr	r2, [pc, #24]	; (800870c <vApplicationGetTimerTaskMemory+0x30>)
 80086f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086fa:	601a      	str	r2, [r3, #0]
}
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	20002918 	.word	0x20002918
 800870c:	200029c0 	.word	0x200029c0

08008710 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f103 0208 	add.w	r2, r3, #8
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f04f 32ff 	mov.w	r2, #4294967295
 8008728:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f103 0208 	add.w	r2, r3, #8
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f103 0208 	add.w	r2, r3, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800875e:	bf00      	nop
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	601a      	str	r2, [r3, #0]
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087b2:	b480      	push	{r7}
 80087b4:	b085      	sub	sp, #20
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c8:	d103      	bne.n	80087d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	e00c      	b.n	80087ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3308      	adds	r3, #8
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	e002      	b.n	80087e0 <vListInsert+0x2e>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d2f6      	bcs.n	80087da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]
}
 8008818:	bf00      	nop
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	6892      	ldr	r2, [r2, #8]
 800883a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6852      	ldr	r2, [r2, #4]
 8008844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d103      	bne.n	8008858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	1e5a      	subs	r2, r3, #1
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80088a2:	f002 fb27 	bl	800aef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	68f9      	ldr	r1, [r7, #12]
 80088b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088b2:	fb01 f303 	mul.w	r3, r1, r3
 80088b6:	441a      	add	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d2:	3b01      	subs	r3, #1
 80088d4:	68f9      	ldr	r1, [r7, #12]
 80088d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	441a      	add	r2, r3
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	22ff      	movs	r2, #255	; 0xff
 80088e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	22ff      	movs	r2, #255	; 0xff
 80088ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d114      	bne.n	8008922 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01a      	beq.n	8008936 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3310      	adds	r3, #16
 8008904:	4618      	mov	r0, r3
 8008906:	f001 fadb 	bl	8009ec0 <xTaskRemoveFromEventList>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d012      	beq.n	8008936 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008910:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <xQueueGenericReset+0xcc>)
 8008912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008916:	601a      	str	r2, [r3, #0]
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	e009      	b.n	8008936 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3310      	adds	r3, #16
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff fef2 	bl	8008710 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3324      	adds	r3, #36	; 0x24
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff feed 	bl	8008710 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008936:	f002 fb0d 	bl	800af54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800893a:	2301      	movs	r3, #1
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	e000ed04 	.word	0xe000ed04

08008948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08e      	sub	sp, #56	; 0x38
 800894c:	af02      	add	r7, sp, #8
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
 8008954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800895c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008960:	f383 8811 	msr	BASEPRI, r3
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	f3bf 8f4f 	dsb	sy
 800896c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800896e:	bf00      	nop
 8008970:	e7fe      	b.n	8008970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
}
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <xQueueGenericCreateStatic+0x52>
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <xQueueGenericCreateStatic+0x56>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <xQueueGenericCreateStatic+0x58>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	623b      	str	r3, [r7, #32]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d102      	bne.n	80089c6 <xQueueGenericCreateStatic+0x7e>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <xQueueGenericCreateStatic+0x82>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <xQueueGenericCreateStatic+0x84>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	61fb      	str	r3, [r7, #28]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089e6:	2350      	movs	r3, #80	; 0x50
 80089e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b50      	cmp	r3, #80	; 0x50
 80089ee:	d00a      	beq.n	8008a06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	61bb      	str	r3, [r7, #24]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00d      	beq.n	8008a2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	4613      	mov	r3, r2
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 f83f 	bl	8008aac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3730      	adds	r7, #48	; 0x30
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08a      	sub	sp, #40	; 0x28
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10a      	bne.n	8008a62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	613b      	str	r3, [r7, #16]
}
 8008a5e:	bf00      	nop
 8008a60:	e7fe      	b.n	8008a60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3350      	adds	r3, #80	; 0x50
 8008a70:	4618      	mov	r0, r3
 8008a72:	f002 fb61 	bl	800b138 <pvPortMalloc>
 8008a76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d011      	beq.n	8008aa2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	3350      	adds	r3, #80	; 0x50
 8008a86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a90:	79fa      	ldrb	r2, [r7, #7]
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	4613      	mov	r3, r2
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f805 	bl	8008aac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
	}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3720      	adds	r7, #32
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d103      	bne.n	8008ac8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	e002      	b.n	8008ace <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ada:	2101      	movs	r1, #1
 8008adc:	69b8      	ldr	r0, [r7, #24]
 8008ade:	f7ff fecb 	bl	8008878 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008aea:	bf00      	nop
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00e      	beq.n	8008b1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008b12:	2300      	movs	r3, #0
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f837 	bl	8008b8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008b26:	b580      	push	{r7, lr}
 8008b28:	b086      	sub	sp, #24
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b30:	2301      	movs	r3, #1
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	2300      	movs	r3, #0
 8008b36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008b38:	79fb      	ldrb	r3, [r7, #7]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6939      	ldr	r1, [r7, #16]
 8008b3e:	6978      	ldr	r0, [r7, #20]
 8008b40:	f7ff ff7a 	bl	8008a38 <xQueueGenericCreate>
 8008b44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f7ff ffd3 	bl	8008af2 <prvInitialiseMutex>

		return xNewQueue;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
	}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b088      	sub	sp, #32
 8008b5a:	af02      	add	r7, sp, #8
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	6039      	str	r1, [r7, #0]
 8008b60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008b62:	2301      	movs	r3, #1
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	2300      	movs	r3, #0
 8008b68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	2200      	movs	r2, #0
 8008b72:	6939      	ldr	r1, [r7, #16]
 8008b74:	6978      	ldr	r0, [r7, #20]
 8008b76:	f7ff fee7 	bl	8008948 <xQueueGenericCreateStatic>
 8008b7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f7ff ffb8 	bl	8008af2 <prvInitialiseMutex>

		return xNewQueue;
 8008b82:	68fb      	ldr	r3, [r7, #12]
	}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08e      	sub	sp, #56	; 0x38
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
 8008b98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10a      	bne.n	8008bbe <xQueueGenericSend+0x32>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <xQueueGenericSend+0x40>
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <xQueueGenericSend+0x44>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <xQueueGenericSend+0x46>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <xQueueGenericSend+0x60>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d103      	bne.n	8008bfa <xQueueGenericSend+0x6e>
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <xQueueGenericSend+0x72>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <xQueueGenericSend+0x74>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10a      	bne.n	8008c1a <xQueueGenericSend+0x8e>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	623b      	str	r3, [r7, #32]
}
 8008c16:	bf00      	nop
 8008c18:	e7fe      	b.n	8008c18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c1a:	f001 fb13 	bl	800a244 <xTaskGetSchedulerState>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <xQueueGenericSend+0x9e>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <xQueueGenericSend+0xa2>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGenericSend+0xa4>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueGenericSend+0xbe>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	61fb      	str	r3, [r7, #28]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c4a:	f002 f953 	bl	800aef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d302      	bcc.n	8008c60 <xQueueGenericSend+0xd4>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d129      	bne.n	8008cb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	68b9      	ldr	r1, [r7, #8]
 8008c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c66:	f000 fb2f 	bl	80092c8 <prvCopyDataToQueue>
 8008c6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d010      	beq.n	8008c96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	3324      	adds	r3, #36	; 0x24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 f921 	bl	8009ec0 <xTaskRemoveFromEventList>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d013      	beq.n	8008cac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c84:	4b3f      	ldr	r3, [pc, #252]	; (8008d84 <xQueueGenericSend+0x1f8>)
 8008c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	e00a      	b.n	8008cac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d007      	beq.n	8008cac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c9c:	4b39      	ldr	r3, [pc, #228]	; (8008d84 <xQueueGenericSend+0x1f8>)
 8008c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008cac:	f002 f952 	bl	800af54 <vPortExitCritical>
				return pdPASS;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e063      	b.n	8008d7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d103      	bne.n	8008cc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cba:	f002 f94b 	bl	800af54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e05c      	b.n	8008d7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d106      	bne.n	8008cd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cc8:	f107 0314 	add.w	r3, r7, #20
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 f95b 	bl	8009f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cd6:	f002 f93d 	bl	800af54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cda:	f000 febf 	bl	8009a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cde:	f002 f909 	bl	800aef4 <vPortEnterCritical>
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ce8:	b25b      	sxtb	r3, r3
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cee:	d103      	bne.n	8008cf8 <xQueueGenericSend+0x16c>
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cfe:	b25b      	sxtb	r3, r3
 8008d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d04:	d103      	bne.n	8008d0e <xQueueGenericSend+0x182>
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d0e:	f002 f921 	bl	800af54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d12:	1d3a      	adds	r2, r7, #4
 8008d14:	f107 0314 	add.w	r3, r7, #20
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 f94a 	bl	8009fb4 <xTaskCheckForTimeOut>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d124      	bne.n	8008d70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d28:	f000 fbc6 	bl	80094b8 <prvIsQueueFull>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d018      	beq.n	8008d64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	3310      	adds	r3, #16
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	4611      	mov	r1, r2
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f001 f870 	bl	8009e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d42:	f000 fb51 	bl	80093e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d46:	f000 fe97 	bl	8009a78 <xTaskResumeAll>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f47f af7c 	bne.w	8008c4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008d52:	4b0c      	ldr	r3, [pc, #48]	; (8008d84 <xQueueGenericSend+0x1f8>)
 8008d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	e772      	b.n	8008c4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d66:	f000 fb3f 	bl	80093e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d6a:	f000 fe85 	bl	8009a78 <xTaskResumeAll>
 8008d6e:	e76c      	b.n	8008c4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d72:	f000 fb39 	bl	80093e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d76:	f000 fe7f 	bl	8009a78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3738      	adds	r7, #56	; 0x38
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	e000ed04 	.word	0xe000ed04

08008d88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b090      	sub	sp, #64	; 0x40
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
 8008d94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10a      	bne.n	8008db6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008db2:	bf00      	nop
 8008db4:	e7fe      	b.n	8008db4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <xQueueGenericSendFromISR+0x3c>
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <xQueueGenericSendFromISR+0x40>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <xQueueGenericSendFromISR+0x42>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d103      	bne.n	8008df2 <xQueueGenericSendFromISR+0x6a>
 8008dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <xQueueGenericSendFromISR+0x6e>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e000      	b.n	8008df8 <xQueueGenericSendFromISR+0x70>
 8008df6:	2300      	movs	r3, #0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10a      	bne.n	8008e12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	623b      	str	r3, [r7, #32]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e12:	f002 f951 	bl	800b0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e16:	f3ef 8211 	mrs	r2, BASEPRI
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	61fa      	str	r2, [r7, #28]
 8008e2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d302      	bcc.n	8008e44 <xQueueGenericSendFromISR+0xbc>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	d12f      	bne.n	8008ea4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	68b9      	ldr	r1, [r7, #8]
 8008e58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e5a:	f000 fa35 	bl	80092c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e66:	d112      	bne.n	8008e8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d016      	beq.n	8008e9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	3324      	adds	r3, #36	; 0x24
 8008e74:	4618      	mov	r0, r3
 8008e76:	f001 f823 	bl	8009ec0 <xTaskRemoveFromEventList>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00e      	beq.n	8008e9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00b      	beq.n	8008e9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	e007      	b.n	8008e9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008e92:	3301      	adds	r3, #1
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	b25a      	sxtb	r2, r3
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008ea2:	e001      	b.n	8008ea8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eaa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008eb2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3740      	adds	r7, #64	; 0x40
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
	...

08008ec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b08c      	sub	sp, #48	; 0x30
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10a      	bne.n	8008ef0 <xQueueReceive+0x30>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	623b      	str	r3, [r7, #32]
}
 8008eec:	bf00      	nop
 8008eee:	e7fe      	b.n	8008eee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <xQueueReceive+0x3e>
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <xQueueReceive+0x42>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <xQueueReceive+0x44>
 8008f02:	2300      	movs	r3, #0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10a      	bne.n	8008f1e <xQueueReceive+0x5e>
	__asm volatile
 8008f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	61fb      	str	r3, [r7, #28]
}
 8008f1a:	bf00      	nop
 8008f1c:	e7fe      	b.n	8008f1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f1e:	f001 f991 	bl	800a244 <xTaskGetSchedulerState>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <xQueueReceive+0x6e>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <xQueueReceive+0x72>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e000      	b.n	8008f34 <xQueueReceive+0x74>
 8008f32:	2300      	movs	r3, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10a      	bne.n	8008f4e <xQueueReceive+0x8e>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	61bb      	str	r3, [r7, #24]
}
 8008f4a:	bf00      	nop
 8008f4c:	e7fe      	b.n	8008f4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f4e:	f001 ffd1 	bl	800aef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d01f      	beq.n	8008f9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f5e:	68b9      	ldr	r1, [r7, #8]
 8008f60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f62:	f000 fa1b 	bl	800939c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	1e5a      	subs	r2, r3, #1
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00f      	beq.n	8008f96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f78:	3310      	adds	r3, #16
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 ffa0 	bl	8009ec0 <xTaskRemoveFromEventList>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d007      	beq.n	8008f96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f86:	4b3d      	ldr	r3, [pc, #244]	; (800907c <xQueueReceive+0x1bc>)
 8008f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f96:	f001 ffdd 	bl	800af54 <vPortExitCritical>
				return pdPASS;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e069      	b.n	8009072 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d103      	bne.n	8008fac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fa4:	f001 ffd6 	bl	800af54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e062      	b.n	8009072 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fb2:	f107 0310 	add.w	r3, r7, #16
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 ffe6 	bl	8009f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fc0:	f001 ffc8 	bl	800af54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fc4:	f000 fd4a 	bl	8009a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fc8:	f001 ff94 	bl	800aef4 <vPortEnterCritical>
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fd2:	b25b      	sxtb	r3, r3
 8008fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd8:	d103      	bne.n	8008fe2 <xQueueReceive+0x122>
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fe8:	b25b      	sxtb	r3, r3
 8008fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fee:	d103      	bne.n	8008ff8 <xQueueReceive+0x138>
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ff8:	f001 ffac 	bl	800af54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ffc:	1d3a      	adds	r2, r7, #4
 8008ffe:	f107 0310 	add.w	r3, r7, #16
 8009002:	4611      	mov	r1, r2
 8009004:	4618      	mov	r0, r3
 8009006:	f000 ffd5 	bl	8009fb4 <xTaskCheckForTimeOut>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d123      	bne.n	8009058 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009012:	f000 fa3b 	bl	800948c <prvIsQueueEmpty>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d017      	beq.n	800904c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fefb 	bl	8009e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800902a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800902c:	f000 f9dc 	bl	80093e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009030:	f000 fd22 	bl	8009a78 <xTaskResumeAll>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d189      	bne.n	8008f4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800903a:	4b10      	ldr	r3, [pc, #64]	; (800907c <xQueueReceive+0x1bc>)
 800903c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	f3bf 8f4f 	dsb	sy
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	e780      	b.n	8008f4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800904c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800904e:	f000 f9cb 	bl	80093e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009052:	f000 fd11 	bl	8009a78 <xTaskResumeAll>
 8009056:	e77a      	b.n	8008f4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905a:	f000 f9c5 	bl	80093e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800905e:	f000 fd0b 	bl	8009a78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009064:	f000 fa12 	bl	800948c <prvIsQueueEmpty>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	f43f af6f 	beq.w	8008f4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009070:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009072:	4618      	mov	r0, r3
 8009074:	3730      	adds	r7, #48	; 0x30
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	e000ed04 	.word	0xe000ed04

08009080 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b08e      	sub	sp, #56	; 0x38
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009092:	2300      	movs	r3, #0
 8009094:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10a      	bne.n	80090b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	623b      	str	r3, [r7, #32]
}
 80090ae:	bf00      	nop
 80090b0:	e7fe      	b.n	80090b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00a      	beq.n	80090d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80090ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	61fb      	str	r3, [r7, #28]
}
 80090cc:	bf00      	nop
 80090ce:	e7fe      	b.n	80090ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090d0:	f001 f8b8 	bl	800a244 <xTaskGetSchedulerState>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d102      	bne.n	80090e0 <xQueueSemaphoreTake+0x60>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <xQueueSemaphoreTake+0x64>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <xQueueSemaphoreTake+0x66>
 80090e4:	2300      	movs	r3, #0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10a      	bne.n	8009100 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	61bb      	str	r3, [r7, #24]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009100:	f001 fef8 	bl	800aef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009108:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800910a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910c:	2b00      	cmp	r3, #0
 800910e:	d024      	beq.n	800915a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	1e5a      	subs	r2, r3, #1
 8009114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009116:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d104      	bne.n	800912a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009120:	f001 fa06 	bl	800a530 <pvTaskIncrementMutexHeldCount>
 8009124:	4602      	mov	r2, r0
 8009126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009128:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00f      	beq.n	8009152 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009134:	3310      	adds	r3, #16
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fec2 	bl	8009ec0 <xTaskRemoveFromEventList>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d007      	beq.n	8009152 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009142:	4b54      	ldr	r3, [pc, #336]	; (8009294 <xQueueSemaphoreTake+0x214>)
 8009144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009148:	601a      	str	r2, [r3, #0]
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009152:	f001 feff 	bl	800af54 <vPortExitCritical>
				return pdPASS;
 8009156:	2301      	movs	r3, #1
 8009158:	e097      	b.n	800928a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d111      	bne.n	8009184 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	617b      	str	r3, [r7, #20]
}
 8009178:	bf00      	nop
 800917a:	e7fe      	b.n	800917a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800917c:	f001 feea 	bl	800af54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009180:	2300      	movs	r3, #0
 8009182:	e082      	b.n	800928a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800918a:	f107 030c 	add.w	r3, r7, #12
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fefa 	bl	8009f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009194:	2301      	movs	r3, #1
 8009196:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009198:	f001 fedc 	bl	800af54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800919c:	f000 fc5e 	bl	8009a5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091a0:	f001 fea8 	bl	800aef4 <vPortEnterCritical>
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b0:	d103      	bne.n	80091ba <xQueueSemaphoreTake+0x13a>
 80091b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091c0:	b25b      	sxtb	r3, r3
 80091c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c6:	d103      	bne.n	80091d0 <xQueueSemaphoreTake+0x150>
 80091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091d0:	f001 fec0 	bl	800af54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091d4:	463a      	mov	r2, r7
 80091d6:	f107 030c 	add.w	r3, r7, #12
 80091da:	4611      	mov	r1, r2
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fee9 	bl	8009fb4 <xTaskCheckForTimeOut>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d132      	bne.n	800924e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091ea:	f000 f94f 	bl	800948c <prvIsQueueEmpty>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d026      	beq.n	8009242 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80091f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d109      	bne.n	8009210 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80091fc:	f001 fe7a 	bl	800aef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f83b 	bl	800a280 <xTaskPriorityInherit>
 800920a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800920c:	f001 fea2 	bl	800af54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009212:	3324      	adds	r3, #36	; 0x24
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	4611      	mov	r1, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fe01 	bl	8009e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800921e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009220:	f000 f8e2 	bl	80093e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009224:	f000 fc28 	bl	8009a78 <xTaskResumeAll>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	f47f af68 	bne.w	8009100 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009230:	4b18      	ldr	r3, [pc, #96]	; (8009294 <xQueueSemaphoreTake+0x214>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	e75e      	b.n	8009100 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009244:	f000 f8d0 	bl	80093e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009248:	f000 fc16 	bl	8009a78 <xTaskResumeAll>
 800924c:	e758      	b.n	8009100 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800924e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009250:	f000 f8ca 	bl	80093e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009254:	f000 fc10 	bl	8009a78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009258:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800925a:	f000 f917 	bl	800948c <prvIsQueueEmpty>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	f43f af4d 	beq.w	8009100 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00d      	beq.n	8009288 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800926c:	f001 fe42 	bl	800aef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009270:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009272:	f000 f811 	bl	8009298 <prvGetDisinheritPriorityAfterTimeout>
 8009276:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800927e:	4618      	mov	r0, r3
 8009280:	f001 f8d4 	bl	800a42c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009284:	f001 fe66 	bl	800af54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009288:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800928a:	4618      	mov	r0, r3
 800928c:	3738      	adds	r7, #56	; 0x38
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	e000ed04 	.word	0xe000ed04

08009298 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d006      	beq.n	80092b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80092b2:	60fb      	str	r3, [r7, #12]
 80092b4:	e001      	b.n	80092ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80092ba:	68fb      	ldr	r3, [r7, #12]
	}
 80092bc:	4618      	mov	r0, r3
 80092be:	3714      	adds	r7, #20
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10d      	bne.n	8009302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d14d      	bne.n	800938a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 f82c 	bl	800a350 <xTaskPriorityDisinherit>
 80092f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	609a      	str	r2, [r3, #8]
 8009300:	e043      	b.n	800938a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d119      	bne.n	800933c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6858      	ldr	r0, [r3, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009310:	461a      	mov	r2, r3
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	f002 f8f8 	bl	800b508 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009320:	441a      	add	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	d32b      	bcc.n	800938a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	e026      	b.n	800938a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	68d8      	ldr	r0, [r3, #12]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009344:	461a      	mov	r2, r3
 8009346:	68b9      	ldr	r1, [r7, #8]
 8009348:	f002 f8de 	bl	800b508 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	68da      	ldr	r2, [r3, #12]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009354:	425b      	negs	r3, r3
 8009356:	441a      	add	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d207      	bcs.n	8009378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	689a      	ldr	r2, [r3, #8]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009370:	425b      	negs	r3, r3
 8009372:	441a      	add	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b02      	cmp	r3, #2
 800937c:	d105      	bne.n	800938a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	3b01      	subs	r3, #1
 8009388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009392:	697b      	ldr	r3, [r7, #20]
}
 8009394:	4618      	mov	r0, r3
 8009396:	3718      	adds	r7, #24
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d018      	beq.n	80093e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	441a      	add	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d303      	bcc.n	80093d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68d9      	ldr	r1, [r3, #12]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d8:	461a      	mov	r2, r3
 80093da:	6838      	ldr	r0, [r7, #0]
 80093dc:	f002 f894 	bl	800b508 <memcpy>
	}
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093f0:	f001 fd80 	bl	800aef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093fc:	e011      	b.n	8009422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d012      	beq.n	800942c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3324      	adds	r3, #36	; 0x24
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fd58 	bl	8009ec0 <xTaskRemoveFromEventList>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009416:	f000 fe2f 	bl	800a078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	3b01      	subs	r3, #1
 800941e:	b2db      	uxtb	r3, r3
 8009420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009426:	2b00      	cmp	r3, #0
 8009428:	dce9      	bgt.n	80093fe <prvUnlockQueue+0x16>
 800942a:	e000      	b.n	800942e <prvUnlockQueue+0x46>
					break;
 800942c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	22ff      	movs	r2, #255	; 0xff
 8009432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009436:	f001 fd8d 	bl	800af54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800943a:	f001 fd5b 	bl	800aef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009446:	e011      	b.n	800946c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d012      	beq.n	8009476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3310      	adds	r3, #16
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fd33 	bl	8009ec0 <xTaskRemoveFromEventList>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009460:	f000 fe0a 	bl	800a078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	3b01      	subs	r3, #1
 8009468:	b2db      	uxtb	r3, r3
 800946a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800946c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dce9      	bgt.n	8009448 <prvUnlockQueue+0x60>
 8009474:	e000      	b.n	8009478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	22ff      	movs	r2, #255	; 0xff
 800947c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009480:	f001 fd68 	bl	800af54 <vPortExitCritical>
}
 8009484:	bf00      	nop
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009494:	f001 fd2e 	bl	800aef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094a0:	2301      	movs	r3, #1
 80094a2:	60fb      	str	r3, [r7, #12]
 80094a4:	e001      	b.n	80094aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094aa:	f001 fd53 	bl	800af54 <vPortExitCritical>

	return xReturn;
 80094ae:	68fb      	ldr	r3, [r7, #12]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094c0:	f001 fd18 	bl	800aef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d102      	bne.n	80094d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094d0:	2301      	movs	r3, #1
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	e001      	b.n	80094da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094da:	f001 fd3b 	bl	800af54 <vPortExitCritical>

	return xReturn;
 80094de:	68fb      	ldr	r3, [r7, #12]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e014      	b.n	8009522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094f8:	4a0f      	ldr	r2, [pc, #60]	; (8009538 <vQueueAddToRegistry+0x50>)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10b      	bne.n	800951c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009504:	490c      	ldr	r1, [pc, #48]	; (8009538 <vQueueAddToRegistry+0x50>)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	683a      	ldr	r2, [r7, #0]
 800950a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800950e:	4a0a      	ldr	r2, [pc, #40]	; (8009538 <vQueueAddToRegistry+0x50>)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	4413      	add	r3, r2
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800951a:	e006      	b.n	800952a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b07      	cmp	r3, #7
 8009526:	d9e7      	bls.n	80094f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009528:	bf00      	nop
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	20002dc0 	.word	0x20002dc0

0800953c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800954c:	f001 fcd2 	bl	800aef4 <vPortEnterCritical>
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009556:	b25b      	sxtb	r3, r3
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d103      	bne.n	8009566 <vQueueWaitForMessageRestricted+0x2a>
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800956c:	b25b      	sxtb	r3, r3
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009572:	d103      	bne.n	800957c <vQueueWaitForMessageRestricted+0x40>
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800957c:	f001 fcea 	bl	800af54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	3324      	adds	r3, #36	; 0x24
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	68b9      	ldr	r1, [r7, #8]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 fc69 	bl	8009e68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009596:	6978      	ldr	r0, [r7, #20]
 8009598:	f7ff ff26 	bl	80093e8 <prvUnlockQueue>
	}
 800959c:	bf00      	nop
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b08e      	sub	sp, #56	; 0x38
 80095a8:	af04      	add	r7, sp, #16
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <xTaskCreateStatic+0x2a>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	623b      	str	r3, [r7, #32]
}
 80095ca:	bf00      	nop
 80095cc:	e7fe      	b.n	80095cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80095ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <xTaskCreateStatic+0x46>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	61fb      	str	r3, [r7, #28]
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095ea:	23a8      	movs	r3, #168	; 0xa8
 80095ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2ba8      	cmp	r3, #168	; 0xa8
 80095f2:	d00a      	beq.n	800960a <xTaskCreateStatic+0x66>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	61bb      	str	r3, [r7, #24]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800960a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01e      	beq.n	8009650 <xTaskCreateStatic+0xac>
 8009612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01b      	beq.n	8009650 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009620:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	2202      	movs	r2, #2
 8009626:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800962a:	2300      	movs	r3, #0
 800962c:	9303      	str	r3, [sp, #12]
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	9302      	str	r3, [sp, #8]
 8009632:	f107 0314 	add.w	r3, r7, #20
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f850 	bl	80096e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800964a:	f000 f8f3 	bl	8009834 <prvAddNewTaskToReadyList>
 800964e:	e001      	b.n	8009654 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009654:	697b      	ldr	r3, [r7, #20]
	}
 8009656:	4618      	mov	r0, r3
 8009658:	3728      	adds	r7, #40	; 0x28
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800965e:	b580      	push	{r7, lr}
 8009660:	b08c      	sub	sp, #48	; 0x30
 8009662:	af04      	add	r7, sp, #16
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800966e:	88fb      	ldrh	r3, [r7, #6]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4618      	mov	r0, r3
 8009674:	f001 fd60 	bl	800b138 <pvPortMalloc>
 8009678:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00e      	beq.n	800969e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009680:	20a8      	movs	r0, #168	; 0xa8
 8009682:	f001 fd59 	bl	800b138 <pvPortMalloc>
 8009686:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d003      	beq.n	8009696 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	631a      	str	r2, [r3, #48]	; 0x30
 8009694:	e005      	b.n	80096a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009696:	6978      	ldr	r0, [r7, #20]
 8009698:	f001 fd94 	bl	800b1c4 <vPortFree>
 800969c:	e001      	b.n	80096a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d017      	beq.n	80096d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	2300      	movs	r3, #0
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	9302      	str	r3, [sp, #8]
 80096ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68b9      	ldr	r1, [r7, #8]
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 f80e 	bl	80096e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096cc:	69f8      	ldr	r0, [r7, #28]
 80096ce:	f000 f8b1 	bl	8009834 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096d2:	2301      	movs	r3, #1
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	e002      	b.n	80096de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096de:	69bb      	ldr	r3, [r7, #24]
	}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3720      	adds	r7, #32
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b088      	sub	sp, #32
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	461a      	mov	r2, r3
 8009700:	21a5      	movs	r1, #165	; 0xa5
 8009702:	f001 fe67 	bl	800b3d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009710:	3b01      	subs	r3, #1
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	f023 0307 	bic.w	r3, r3, #7
 800971e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f003 0307 	and.w	r3, r3, #7
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00a      	beq.n	8009740 <prvInitialiseNewTask+0x58>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	617b      	str	r3, [r7, #20]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d01f      	beq.n	8009786 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009746:	2300      	movs	r3, #0
 8009748:	61fb      	str	r3, [r7, #28]
 800974a:	e012      	b.n	8009772 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	7819      	ldrb	r1, [r3, #0]
 8009754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	3334      	adds	r3, #52	; 0x34
 800975c:	460a      	mov	r2, r1
 800975e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	4413      	add	r3, r2
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	3301      	adds	r3, #1
 8009770:	61fb      	str	r3, [r7, #28]
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	2b0f      	cmp	r3, #15
 8009776:	d9e9      	bls.n	800974c <prvInitialiseNewTask+0x64>
 8009778:	e000      	b.n	800977c <prvInitialiseNewTask+0x94>
			{
				break;
 800977a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009784:	e003      	b.n	800978e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	2b37      	cmp	r3, #55	; 0x37
 8009792:	d901      	bls.n	8009798 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009794:	2337      	movs	r3, #55	; 0x37
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800979c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	2200      	movs	r2, #0
 80097a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	3304      	adds	r3, #4
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe ffce 	bl	8008750 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	3318      	adds	r3, #24
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe ffc9 	bl	8008750 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	3354      	adds	r3, #84	; 0x54
 80097e8:	224c      	movs	r2, #76	; 0x4c
 80097ea:	2100      	movs	r1, #0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f001 fdf1 	bl	800b3d4 <memset>
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	4a0c      	ldr	r2, [pc, #48]	; (8009828 <prvInitialiseNewTask+0x140>)
 80097f6:	659a      	str	r2, [r3, #88]	; 0x58
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	4a0c      	ldr	r2, [pc, #48]	; (800982c <prvInitialiseNewTask+0x144>)
 80097fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	4a0b      	ldr	r2, [pc, #44]	; (8009830 <prvInitialiseNewTask+0x148>)
 8009802:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	69b8      	ldr	r0, [r7, #24]
 800980a:	f001 fa47 	bl	800ac9c <pxPortInitialiseStack>
 800980e:	4602      	mov	r2, r0
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d002      	beq.n	8009820 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800981a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800981e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009820:	bf00      	nop
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20005444 	.word	0x20005444
 800982c:	200054ac 	.word	0x200054ac
 8009830:	20005514 	.word	0x20005514

08009834 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800983c:	f001 fb5a 	bl	800aef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009840:	4b2d      	ldr	r3, [pc, #180]	; (80098f8 <prvAddNewTaskToReadyList+0xc4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3301      	adds	r3, #1
 8009846:	4a2c      	ldr	r2, [pc, #176]	; (80098f8 <prvAddNewTaskToReadyList+0xc4>)
 8009848:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800984a:	4b2c      	ldr	r3, [pc, #176]	; (80098fc <prvAddNewTaskToReadyList+0xc8>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d109      	bne.n	8009866 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009852:	4a2a      	ldr	r2, [pc, #168]	; (80098fc <prvAddNewTaskToReadyList+0xc8>)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009858:	4b27      	ldr	r3, [pc, #156]	; (80098f8 <prvAddNewTaskToReadyList+0xc4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d110      	bne.n	8009882 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009860:	f000 fc2e 	bl	800a0c0 <prvInitialiseTaskLists>
 8009864:	e00d      	b.n	8009882 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009866:	4b26      	ldr	r3, [pc, #152]	; (8009900 <prvAddNewTaskToReadyList+0xcc>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800986e:	4b23      	ldr	r3, [pc, #140]	; (80098fc <prvAddNewTaskToReadyList+0xc8>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009878:	429a      	cmp	r2, r3
 800987a:	d802      	bhi.n	8009882 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800987c:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <prvAddNewTaskToReadyList+0xc8>)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009882:	4b20      	ldr	r3, [pc, #128]	; (8009904 <prvAddNewTaskToReadyList+0xd0>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3301      	adds	r3, #1
 8009888:	4a1e      	ldr	r2, [pc, #120]	; (8009904 <prvAddNewTaskToReadyList+0xd0>)
 800988a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800988c:	4b1d      	ldr	r3, [pc, #116]	; (8009904 <prvAddNewTaskToReadyList+0xd0>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009898:	4b1b      	ldr	r3, [pc, #108]	; (8009908 <prvAddNewTaskToReadyList+0xd4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d903      	bls.n	80098a8 <prvAddNewTaskToReadyList+0x74>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a4:	4a18      	ldr	r2, [pc, #96]	; (8009908 <prvAddNewTaskToReadyList+0xd4>)
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4a15      	ldr	r2, [pc, #84]	; (800990c <prvAddNewTaskToReadyList+0xd8>)
 80098b6:	441a      	add	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	3304      	adds	r3, #4
 80098bc:	4619      	mov	r1, r3
 80098be:	4610      	mov	r0, r2
 80098c0:	f7fe ff53 	bl	800876a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098c4:	f001 fb46 	bl	800af54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098c8:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <prvAddNewTaskToReadyList+0xcc>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00e      	beq.n	80098ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098d0:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <prvAddNewTaskToReadyList+0xc8>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098da:	429a      	cmp	r2, r3
 80098dc:	d207      	bcs.n	80098ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <prvAddNewTaskToReadyList+0xdc>)
 80098e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098ee:	bf00      	nop
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	200032d4 	.word	0x200032d4
 80098fc:	20002e00 	.word	0x20002e00
 8009900:	200032e0 	.word	0x200032e0
 8009904:	200032f0 	.word	0x200032f0
 8009908:	200032dc 	.word	0x200032dc
 800990c:	20002e04 	.word	0x20002e04
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800991c:	2300      	movs	r3, #0
 800991e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d017      	beq.n	8009956 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009926:	4b13      	ldr	r3, [pc, #76]	; (8009974 <vTaskDelay+0x60>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <vTaskDelay+0x30>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	60bb      	str	r3, [r7, #8]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009944:	f000 f88a 	bl	8009a5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fe04 	bl	800a558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009950:	f000 f892 	bl	8009a78 <xTaskResumeAll>
 8009954:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d107      	bne.n	800996c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800995c:	4b06      	ldr	r3, [pc, #24]	; (8009978 <vTaskDelay+0x64>)
 800995e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	f3bf 8f4f 	dsb	sy
 8009968:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800996c:	bf00      	nop
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	200032fc 	.word	0x200032fc
 8009978:	e000ed04 	.word	0xe000ed04

0800997c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08a      	sub	sp, #40	; 0x28
 8009980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009982:	2300      	movs	r3, #0
 8009984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800998a:	463a      	mov	r2, r7
 800998c:	1d39      	adds	r1, r7, #4
 800998e:	f107 0308 	add.w	r3, r7, #8
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fe88 	bl	80086a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	9202      	str	r2, [sp, #8]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	2300      	movs	r3, #0
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	2300      	movs	r3, #0
 80099a8:	460a      	mov	r2, r1
 80099aa:	4924      	ldr	r1, [pc, #144]	; (8009a3c <vTaskStartScheduler+0xc0>)
 80099ac:	4824      	ldr	r0, [pc, #144]	; (8009a40 <vTaskStartScheduler+0xc4>)
 80099ae:	f7ff fdf9 	bl	80095a4 <xTaskCreateStatic>
 80099b2:	4603      	mov	r3, r0
 80099b4:	4a23      	ldr	r2, [pc, #140]	; (8009a44 <vTaskStartScheduler+0xc8>)
 80099b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099b8:	4b22      	ldr	r3, [pc, #136]	; (8009a44 <vTaskStartScheduler+0xc8>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099c0:	2301      	movs	r3, #1
 80099c2:	617b      	str	r3, [r7, #20]
 80099c4:	e001      	b.n	80099ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d102      	bne.n	80099d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099d0:	f000 fe16 	bl	800a600 <xTimerCreateTimerTask>
 80099d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d11b      	bne.n	8009a14 <vTaskStartScheduler+0x98>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	613b      	str	r3, [r7, #16]
}
 80099ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099f0:	4b15      	ldr	r3, [pc, #84]	; (8009a48 <vTaskStartScheduler+0xcc>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3354      	adds	r3, #84	; 0x54
 80099f6:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <vTaskStartScheduler+0xd0>)
 80099f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099fa:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <vTaskStartScheduler+0xd4>)
 80099fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009a00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a02:	4b14      	ldr	r3, [pc, #80]	; (8009a54 <vTaskStartScheduler+0xd8>)
 8009a04:	2201      	movs	r2, #1
 8009a06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a08:	4b13      	ldr	r3, [pc, #76]	; (8009a58 <vTaskStartScheduler+0xdc>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a0e:	f001 f9cf 	bl	800adb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a12:	e00e      	b.n	8009a32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d10a      	bne.n	8009a32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	60fb      	str	r3, [r7, #12]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <vTaskStartScheduler+0xb4>
}
 8009a32:	bf00      	nop
 8009a34:	3718      	adds	r7, #24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	0800bcf0 	.word	0x0800bcf0
 8009a40:	0800a091 	.word	0x0800a091
 8009a44:	200032f8 	.word	0x200032f8
 8009a48:	20002e00 	.word	0x20002e00
 8009a4c:	20000088 	.word	0x20000088
 8009a50:	200032f4 	.word	0x200032f4
 8009a54:	200032e0 	.word	0x200032e0
 8009a58:	200032d8 	.word	0x200032d8

08009a5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a60:	4b04      	ldr	r3, [pc, #16]	; (8009a74 <vTaskSuspendAll+0x18>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3301      	adds	r3, #1
 8009a66:	4a03      	ldr	r2, [pc, #12]	; (8009a74 <vTaskSuspendAll+0x18>)
 8009a68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a6a:	bf00      	nop
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	200032fc 	.word	0x200032fc

08009a78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a86:	4b42      	ldr	r3, [pc, #264]	; (8009b90 <xTaskResumeAll+0x118>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <xTaskResumeAll+0x2c>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	603b      	str	r3, [r7, #0]
}
 8009aa0:	bf00      	nop
 8009aa2:	e7fe      	b.n	8009aa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009aa4:	f001 fa26 	bl	800aef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009aa8:	4b39      	ldr	r3, [pc, #228]	; (8009b90 <xTaskResumeAll+0x118>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	4a38      	ldr	r2, [pc, #224]	; (8009b90 <xTaskResumeAll+0x118>)
 8009ab0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab2:	4b37      	ldr	r3, [pc, #220]	; (8009b90 <xTaskResumeAll+0x118>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d162      	bne.n	8009b80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009aba:	4b36      	ldr	r3, [pc, #216]	; (8009b94 <xTaskResumeAll+0x11c>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d05e      	beq.n	8009b80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ac2:	e02f      	b.n	8009b24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac4:	4b34      	ldr	r3, [pc, #208]	; (8009b98 <xTaskResumeAll+0x120>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	3318      	adds	r3, #24
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe fea7 	bl	8008824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fea2 	bl	8008824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae4:	4b2d      	ldr	r3, [pc, #180]	; (8009b9c <xTaskResumeAll+0x124>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d903      	bls.n	8009af4 <xTaskResumeAll+0x7c>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af0:	4a2a      	ldr	r2, [pc, #168]	; (8009b9c <xTaskResumeAll+0x124>)
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	4613      	mov	r3, r2
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4a27      	ldr	r2, [pc, #156]	; (8009ba0 <xTaskResumeAll+0x128>)
 8009b02:	441a      	add	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3304      	adds	r3, #4
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f7fe fe2d 	bl	800876a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b14:	4b23      	ldr	r3, [pc, #140]	; (8009ba4 <xTaskResumeAll+0x12c>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d302      	bcc.n	8009b24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009b1e:	4b22      	ldr	r3, [pc, #136]	; (8009ba8 <xTaskResumeAll+0x130>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b24:	4b1c      	ldr	r3, [pc, #112]	; (8009b98 <xTaskResumeAll+0x120>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1cb      	bne.n	8009ac4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d001      	beq.n	8009b36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b32:	f000 fb67 	bl	800a204 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b36:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <xTaskResumeAll+0x134>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d010      	beq.n	8009b64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b42:	f000 f847 	bl	8009bd4 <xTaskIncrementTick>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009b4c:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <xTaskResumeAll+0x130>)
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f1      	bne.n	8009b42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009b5e:	4b13      	ldr	r3, [pc, #76]	; (8009bac <xTaskResumeAll+0x134>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b64:	4b10      	ldr	r3, [pc, #64]	; (8009ba8 <xTaskResumeAll+0x130>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d009      	beq.n	8009b80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b70:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <xTaskResumeAll+0x138>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b80:	f001 f9e8 	bl	800af54 <vPortExitCritical>

	return xAlreadyYielded;
 8009b84:	68bb      	ldr	r3, [r7, #8]
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	200032fc 	.word	0x200032fc
 8009b94:	200032d4 	.word	0x200032d4
 8009b98:	20003294 	.word	0x20003294
 8009b9c:	200032dc 	.word	0x200032dc
 8009ba0:	20002e04 	.word	0x20002e04
 8009ba4:	20002e00 	.word	0x20002e00
 8009ba8:	200032e8 	.word	0x200032e8
 8009bac:	200032e4 	.word	0x200032e4
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <xTaskGetTickCount+0x1c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009bc0:	687b      	ldr	r3, [r7, #4]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	370c      	adds	r7, #12
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	200032d8 	.word	0x200032d8

08009bd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bde:	4b53      	ldr	r3, [pc, #332]	; (8009d2c <xTaskIncrementTick+0x158>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	f040 8095 	bne.w	8009d12 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009be8:	4b51      	ldr	r3, [pc, #324]	; (8009d30 <xTaskIncrementTick+0x15c>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3301      	adds	r3, #1
 8009bee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bf0:	4a4f      	ldr	r2, [pc, #316]	; (8009d30 <xTaskIncrementTick+0x15c>)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d120      	bne.n	8009c3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bfc:	4b4d      	ldr	r3, [pc, #308]	; (8009d34 <xTaskIncrementTick+0x160>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00a      	beq.n	8009c1c <xTaskIncrementTick+0x48>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	603b      	str	r3, [r7, #0]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <xTaskIncrementTick+0x46>
 8009c1c:	4b45      	ldr	r3, [pc, #276]	; (8009d34 <xTaskIncrementTick+0x160>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	4b45      	ldr	r3, [pc, #276]	; (8009d38 <xTaskIncrementTick+0x164>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a43      	ldr	r2, [pc, #268]	; (8009d34 <xTaskIncrementTick+0x160>)
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	4a43      	ldr	r2, [pc, #268]	; (8009d38 <xTaskIncrementTick+0x164>)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	4b42      	ldr	r3, [pc, #264]	; (8009d3c <xTaskIncrementTick+0x168>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	4a41      	ldr	r2, [pc, #260]	; (8009d3c <xTaskIncrementTick+0x168>)
 8009c38:	6013      	str	r3, [r2, #0]
 8009c3a:	f000 fae3 	bl	800a204 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c3e:	4b40      	ldr	r3, [pc, #256]	; (8009d40 <xTaskIncrementTick+0x16c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d349      	bcc.n	8009cdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c48:	4b3a      	ldr	r3, [pc, #232]	; (8009d34 <xTaskIncrementTick+0x160>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d104      	bne.n	8009c5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c52:	4b3b      	ldr	r3, [pc, #236]	; (8009d40 <xTaskIncrementTick+0x16c>)
 8009c54:	f04f 32ff 	mov.w	r2, #4294967295
 8009c58:	601a      	str	r2, [r3, #0]
					break;
 8009c5a:	e03f      	b.n	8009cdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c5c:	4b35      	ldr	r3, [pc, #212]	; (8009d34 <xTaskIncrementTick+0x160>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d203      	bcs.n	8009c7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c74:	4a32      	ldr	r2, [pc, #200]	; (8009d40 <xTaskIncrementTick+0x16c>)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c7a:	e02f      	b.n	8009cdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe fdcf 	bl	8008824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d004      	beq.n	8009c98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	3318      	adds	r3, #24
 8009c92:	4618      	mov	r0, r3
 8009c94:	f7fe fdc6 	bl	8008824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c9c:	4b29      	ldr	r3, [pc, #164]	; (8009d44 <xTaskIncrementTick+0x170>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d903      	bls.n	8009cac <xTaskIncrementTick+0xd8>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	4a26      	ldr	r2, [pc, #152]	; (8009d44 <xTaskIncrementTick+0x170>)
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4a23      	ldr	r2, [pc, #140]	; (8009d48 <xTaskIncrementTick+0x174>)
 8009cba:	441a      	add	r2, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	3304      	adds	r3, #4
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	f7fe fd51 	bl	800876a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ccc:	4b1f      	ldr	r3, [pc, #124]	; (8009d4c <xTaskIncrementTick+0x178>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d3b8      	bcc.n	8009c48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cda:	e7b5      	b.n	8009c48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cdc:	4b1b      	ldr	r3, [pc, #108]	; (8009d4c <xTaskIncrementTick+0x178>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce2:	4919      	ldr	r1, [pc, #100]	; (8009d48 <xTaskIncrementTick+0x174>)
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	440b      	add	r3, r1
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d901      	bls.n	8009cf8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8009cf8:	4b15      	ldr	r3, [pc, #84]	; (8009d50 <xTaskIncrementTick+0x17c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8009d00:	f7f7 f822 	bl	8000d48 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d04:	4b13      	ldr	r3, [pc, #76]	; (8009d54 <xTaskIncrementTick+0x180>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d009      	beq.n	8009d20 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	617b      	str	r3, [r7, #20]
 8009d10:	e006      	b.n	8009d20 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d12:	4b0f      	ldr	r3, [pc, #60]	; (8009d50 <xTaskIncrementTick+0x17c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3301      	adds	r3, #1
 8009d18:	4a0d      	ldr	r2, [pc, #52]	; (8009d50 <xTaskIncrementTick+0x17c>)
 8009d1a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8009d1c:	f7f7 f814 	bl	8000d48 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8009d20:	697b      	ldr	r3, [r7, #20]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200032fc 	.word	0x200032fc
 8009d30:	200032d8 	.word	0x200032d8
 8009d34:	2000328c 	.word	0x2000328c
 8009d38:	20003290 	.word	0x20003290
 8009d3c:	200032ec 	.word	0x200032ec
 8009d40:	200032f4 	.word	0x200032f4
 8009d44:	200032dc 	.word	0x200032dc
 8009d48:	20002e04 	.word	0x20002e04
 8009d4c:	20002e00 	.word	0x20002e00
 8009d50:	200032e4 	.word	0x200032e4
 8009d54:	200032e8 	.word	0x200032e8

08009d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d5e:	4b2a      	ldr	r3, [pc, #168]	; (8009e08 <vTaskSwitchContext+0xb0>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d66:	4b29      	ldr	r3, [pc, #164]	; (8009e0c <vTaskSwitchContext+0xb4>)
 8009d68:	2201      	movs	r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d6c:	e046      	b.n	8009dfc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009d6e:	4b27      	ldr	r3, [pc, #156]	; (8009e0c <vTaskSwitchContext+0xb4>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d74:	4b26      	ldr	r3, [pc, #152]	; (8009e10 <vTaskSwitchContext+0xb8>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	e010      	b.n	8009d9e <vTaskSwitchContext+0x46>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	607b      	str	r3, [r7, #4]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <vTaskSwitchContext+0x3e>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	491d      	ldr	r1, [pc, #116]	; (8009e14 <vTaskSwitchContext+0xbc>)
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	440b      	add	r3, r1
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0e4      	beq.n	8009d7c <vTaskSwitchContext+0x24>
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	4613      	mov	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4a15      	ldr	r2, [pc, #84]	; (8009e14 <vTaskSwitchContext+0xbc>)
 8009dbe:	4413      	add	r3, r2
 8009dc0:	60bb      	str	r3, [r7, #8]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	605a      	str	r2, [r3, #4]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	3308      	adds	r3, #8
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d104      	bne.n	8009de2 <vTaskSwitchContext+0x8a>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	605a      	str	r2, [r3, #4]
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	4a0b      	ldr	r2, [pc, #44]	; (8009e18 <vTaskSwitchContext+0xc0>)
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	4a08      	ldr	r2, [pc, #32]	; (8009e10 <vTaskSwitchContext+0xb8>)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009df2:	4b09      	ldr	r3, [pc, #36]	; (8009e18 <vTaskSwitchContext+0xc0>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3354      	adds	r3, #84	; 0x54
 8009df8:	4a08      	ldr	r2, [pc, #32]	; (8009e1c <vTaskSwitchContext+0xc4>)
 8009dfa:	6013      	str	r3, [r2, #0]
}
 8009dfc:	bf00      	nop
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	200032fc 	.word	0x200032fc
 8009e0c:	200032e8 	.word	0x200032e8
 8009e10:	200032dc 	.word	0x200032dc
 8009e14:	20002e04 	.word	0x20002e04
 8009e18:	20002e00 	.word	0x20002e00
 8009e1c:	20000088 	.word	0x20000088

08009e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	60fb      	str	r3, [r7, #12]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e46:	4b07      	ldr	r3, [pc, #28]	; (8009e64 <vTaskPlaceOnEventList+0x44>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3318      	adds	r3, #24
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7fe fcaf 	bl	80087b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e54:	2101      	movs	r1, #1
 8009e56:	6838      	ldr	r0, [r7, #0]
 8009e58:	f000 fb7e 	bl	800a558 <prvAddCurrentTaskToDelayedList>
}
 8009e5c:	bf00      	nop
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	20002e00 	.word	0x20002e00

08009e68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10a      	bne.n	8009e90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	617b      	str	r3, [r7, #20]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e90:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <vTaskPlaceOnEventListRestricted+0x54>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	3318      	adds	r3, #24
 8009e96:	4619      	mov	r1, r3
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7fe fc66 	bl	800876a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ea8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	68b8      	ldr	r0, [r7, #8]
 8009eae:	f000 fb53 	bl	800a558 <prvAddCurrentTaskToDelayedList>
	}
 8009eb2:	bf00      	nop
 8009eb4:	3718      	adds	r7, #24
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	20002e00 	.word	0x20002e00

08009ec0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10a      	bne.n	8009eec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	60fb      	str	r3, [r7, #12]
}
 8009ee8:	bf00      	nop
 8009eea:	e7fe      	b.n	8009eea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	3318      	adds	r3, #24
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe fc97 	bl	8008824 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ef6:	4b1e      	ldr	r3, [pc, #120]	; (8009f70 <xTaskRemoveFromEventList+0xb0>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d11d      	bne.n	8009f3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	3304      	adds	r3, #4
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7fe fc8e 	bl	8008824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0c:	4b19      	ldr	r3, [pc, #100]	; (8009f74 <xTaskRemoveFromEventList+0xb4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d903      	bls.n	8009f1c <xTaskRemoveFromEventList+0x5c>
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f18:	4a16      	ldr	r2, [pc, #88]	; (8009f74 <xTaskRemoveFromEventList+0xb4>)
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4a13      	ldr	r2, [pc, #76]	; (8009f78 <xTaskRemoveFromEventList+0xb8>)
 8009f2a:	441a      	add	r2, r3
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	3304      	adds	r3, #4
 8009f30:	4619      	mov	r1, r3
 8009f32:	4610      	mov	r0, r2
 8009f34:	f7fe fc19 	bl	800876a <vListInsertEnd>
 8009f38:	e005      	b.n	8009f46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	3318      	adds	r3, #24
 8009f3e:	4619      	mov	r1, r3
 8009f40:	480e      	ldr	r0, [pc, #56]	; (8009f7c <xTaskRemoveFromEventList+0xbc>)
 8009f42:	f7fe fc12 	bl	800876a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4a:	4b0d      	ldr	r3, [pc, #52]	; (8009f80 <xTaskRemoveFromEventList+0xc0>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d905      	bls.n	8009f60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f54:	2301      	movs	r3, #1
 8009f56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <xTaskRemoveFromEventList+0xc4>)
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	e001      	b.n	8009f64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f64:	697b      	ldr	r3, [r7, #20]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	200032fc 	.word	0x200032fc
 8009f74:	200032dc 	.word	0x200032dc
 8009f78:	20002e04 	.word	0x20002e04
 8009f7c:	20003294 	.word	0x20003294
 8009f80:	20002e00 	.word	0x20002e00
 8009f84:	200032e8 	.word	0x200032e8

08009f88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f90:	4b06      	ldr	r3, [pc, #24]	; (8009fac <vTaskInternalSetTimeOutState+0x24>)
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f98:	4b05      	ldr	r3, [pc, #20]	; (8009fb0 <vTaskInternalSetTimeOutState+0x28>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	605a      	str	r2, [r3, #4]
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	200032ec 	.word	0x200032ec
 8009fb0:	200032d8 	.word	0x200032d8

08009fb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10a      	bne.n	8009fda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	613b      	str	r3, [r7, #16]
}
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10a      	bne.n	8009ff6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	60fb      	str	r3, [r7, #12]
}
 8009ff2:	bf00      	nop
 8009ff4:	e7fe      	b.n	8009ff4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ff6:	f000 ff7d 	bl	800aef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ffa:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <xTaskCheckForTimeOut+0xbc>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	69ba      	ldr	r2, [r7, #24]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d102      	bne.n	800a01a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a014:	2300      	movs	r3, #0
 800a016:	61fb      	str	r3, [r7, #28]
 800a018:	e023      	b.n	800a062 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	4b15      	ldr	r3, [pc, #84]	; (800a074 <xTaskCheckForTimeOut+0xc0>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d007      	beq.n	800a036 <xTaskCheckForTimeOut+0x82>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d302      	bcc.n	800a036 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a030:	2301      	movs	r3, #1
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	e015      	b.n	800a062 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d20b      	bcs.n	800a058 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	1ad2      	subs	r2, r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7ff ff9b 	bl	8009f88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a052:	2300      	movs	r3, #0
 800a054:	61fb      	str	r3, [r7, #28]
 800a056:	e004      	b.n	800a062 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2200      	movs	r2, #0
 800a05c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a05e:	2301      	movs	r3, #1
 800a060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a062:	f000 ff77 	bl	800af54 <vPortExitCritical>

	return xReturn;
 800a066:	69fb      	ldr	r3, [r7, #28]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3720      	adds	r7, #32
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	200032d8 	.word	0x200032d8
 800a074:	200032ec 	.word	0x200032ec

0800a078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a078:	b480      	push	{r7}
 800a07a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a07c:	4b03      	ldr	r3, [pc, #12]	; (800a08c <vTaskMissedYield+0x14>)
 800a07e:	2201      	movs	r2, #1
 800a080:	601a      	str	r2, [r3, #0]
}
 800a082:	bf00      	nop
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	200032e8 	.word	0x200032e8

0800a090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a098:	f000 f852 	bl	800a140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a09c:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <prvIdleTask+0x28>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d9f9      	bls.n	800a098 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <prvIdleTask+0x2c>)
 800a0a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a0b4:	e7f0      	b.n	800a098 <prvIdleTask+0x8>
 800a0b6:	bf00      	nop
 800a0b8:	20002e04 	.word	0x20002e04
 800a0bc:	e000ed04 	.word	0xe000ed04

0800a0c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	e00c      	b.n	800a0e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4a12      	ldr	r2, [pc, #72]	; (800a120 <prvInitialiseTaskLists+0x60>)
 800a0d8:	4413      	add	r3, r2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe fb18 	bl	8008710 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	607b      	str	r3, [r7, #4]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b37      	cmp	r3, #55	; 0x37
 800a0ea:	d9ef      	bls.n	800a0cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0ec:	480d      	ldr	r0, [pc, #52]	; (800a124 <prvInitialiseTaskLists+0x64>)
 800a0ee:	f7fe fb0f 	bl	8008710 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0f2:	480d      	ldr	r0, [pc, #52]	; (800a128 <prvInitialiseTaskLists+0x68>)
 800a0f4:	f7fe fb0c 	bl	8008710 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0f8:	480c      	ldr	r0, [pc, #48]	; (800a12c <prvInitialiseTaskLists+0x6c>)
 800a0fa:	f7fe fb09 	bl	8008710 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0fe:	480c      	ldr	r0, [pc, #48]	; (800a130 <prvInitialiseTaskLists+0x70>)
 800a100:	f7fe fb06 	bl	8008710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a104:	480b      	ldr	r0, [pc, #44]	; (800a134 <prvInitialiseTaskLists+0x74>)
 800a106:	f7fe fb03 	bl	8008710 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <prvInitialiseTaskLists+0x78>)
 800a10c:	4a05      	ldr	r2, [pc, #20]	; (800a124 <prvInitialiseTaskLists+0x64>)
 800a10e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a110:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <prvInitialiseTaskLists+0x7c>)
 800a112:	4a05      	ldr	r2, [pc, #20]	; (800a128 <prvInitialiseTaskLists+0x68>)
 800a114:	601a      	str	r2, [r3, #0]
}
 800a116:	bf00      	nop
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	20002e04 	.word	0x20002e04
 800a124:	20003264 	.word	0x20003264
 800a128:	20003278 	.word	0x20003278
 800a12c:	20003294 	.word	0x20003294
 800a130:	200032a8 	.word	0x200032a8
 800a134:	200032c0 	.word	0x200032c0
 800a138:	2000328c 	.word	0x2000328c
 800a13c:	20003290 	.word	0x20003290

0800a140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a146:	e019      	b.n	800a17c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a148:	f000 fed4 	bl	800aef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a14c:	4b10      	ldr	r3, [pc, #64]	; (800a190 <prvCheckTasksWaitingTermination+0x50>)
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3304      	adds	r3, #4
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe fb63 	bl	8008824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a15e:	4b0d      	ldr	r3, [pc, #52]	; (800a194 <prvCheckTasksWaitingTermination+0x54>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3b01      	subs	r3, #1
 800a164:	4a0b      	ldr	r2, [pc, #44]	; (800a194 <prvCheckTasksWaitingTermination+0x54>)
 800a166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a168:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <prvCheckTasksWaitingTermination+0x58>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	4a0a      	ldr	r2, [pc, #40]	; (800a198 <prvCheckTasksWaitingTermination+0x58>)
 800a170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a172:	f000 feef 	bl	800af54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f810 	bl	800a19c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a17c:	4b06      	ldr	r3, [pc, #24]	; (800a198 <prvCheckTasksWaitingTermination+0x58>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1e1      	bne.n	800a148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200032a8 	.word	0x200032a8
 800a194:	200032d4 	.word	0x200032d4
 800a198:	200032bc 	.word	0x200032bc

0800a19c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3354      	adds	r3, #84	; 0x54
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f001 f91b 	bl	800b3e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d108      	bne.n	800a1ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 f801 	bl	800b1c4 <vPortFree>
				vPortFree( pxTCB );
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fffe 	bl	800b1c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a1c8:	e018      	b.n	800a1fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d103      	bne.n	800a1dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fff5 	bl	800b1c4 <vPortFree>
	}
 800a1da:	e00f      	b.n	800a1fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d00a      	beq.n	800a1fc <prvDeleteTCB+0x60>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	60fb      	str	r3, [r7, #12]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <prvDeleteTCB+0x5e>
	}
 800a1fc:	bf00      	nop
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a20a:	4b0c      	ldr	r3, [pc, #48]	; (800a23c <prvResetNextTaskUnblockTime+0x38>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d104      	bne.n	800a21e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a214:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <prvResetNextTaskUnblockTime+0x3c>)
 800a216:	f04f 32ff 	mov.w	r2, #4294967295
 800a21a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a21c:	e008      	b.n	800a230 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <prvResetNextTaskUnblockTime+0x38>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	4a04      	ldr	r2, [pc, #16]	; (800a240 <prvResetNextTaskUnblockTime+0x3c>)
 800a22e:	6013      	str	r3, [r2, #0]
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	2000328c 	.word	0x2000328c
 800a240:	200032f4 	.word	0x200032f4

0800a244 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a24a:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <xTaskGetSchedulerState+0x34>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d102      	bne.n	800a258 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a252:	2301      	movs	r3, #1
 800a254:	607b      	str	r3, [r7, #4]
 800a256:	e008      	b.n	800a26a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a258:	4b08      	ldr	r3, [pc, #32]	; (800a27c <xTaskGetSchedulerState+0x38>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d102      	bne.n	800a266 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a260:	2302      	movs	r3, #2
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	e001      	b.n	800a26a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a266:	2300      	movs	r3, #0
 800a268:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a26a:	687b      	ldr	r3, [r7, #4]
	}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	200032e0 	.word	0x200032e0
 800a27c:	200032fc 	.word	0x200032fc

0800a280 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d051      	beq.n	800a33a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29a:	4b2a      	ldr	r3, [pc, #168]	; (800a344 <xTaskPriorityInherit+0xc4>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d241      	bcs.n	800a328 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	db06      	blt.n	800a2ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ac:	4b25      	ldr	r3, [pc, #148]	; (800a344 <xTaskPriorityInherit+0xc4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	6959      	ldr	r1, [r3, #20]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4a1f      	ldr	r2, [pc, #124]	; (800a348 <xTaskPriorityInherit+0xc8>)
 800a2cc:	4413      	add	r3, r2
 800a2ce:	4299      	cmp	r1, r3
 800a2d0:	d122      	bne.n	800a318 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe faa4 	bl	8008824 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2dc:	4b19      	ldr	r3, [pc, #100]	; (800a344 <xTaskPriorityInherit+0xc4>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ea:	4b18      	ldr	r3, [pc, #96]	; (800a34c <xTaskPriorityInherit+0xcc>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d903      	bls.n	800a2fa <xTaskPriorityInherit+0x7a>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	4a15      	ldr	r2, [pc, #84]	; (800a34c <xTaskPriorityInherit+0xcc>)
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2fe:	4613      	mov	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4a10      	ldr	r2, [pc, #64]	; (800a348 <xTaskPriorityInherit+0xc8>)
 800a308:	441a      	add	r2, r3
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f7fe fa2a 	bl	800876a <vListInsertEnd>
 800a316:	e004      	b.n	800a322 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a318:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <xTaskPriorityInherit+0xc4>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a322:	2301      	movs	r3, #1
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	e008      	b.n	800a33a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a32c:	4b05      	ldr	r3, [pc, #20]	; (800a344 <xTaskPriorityInherit+0xc4>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	429a      	cmp	r2, r3
 800a334:	d201      	bcs.n	800a33a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a336:	2301      	movs	r3, #1
 800a338:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a33a:	68fb      	ldr	r3, [r7, #12]
	}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3710      	adds	r7, #16
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20002e00 	.word	0x20002e00
 800a348:	20002e04 	.word	0x20002e04
 800a34c:	200032dc 	.word	0x200032dc

0800a350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a35c:	2300      	movs	r3, #0
 800a35e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d056      	beq.n	800a414 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a366:	4b2e      	ldr	r3, [pc, #184]	; (800a420 <xTaskPriorityDisinherit+0xd0>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d00a      	beq.n	800a386 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	60fb      	str	r3, [r7, #12]
}
 800a382:	bf00      	nop
 800a384:	e7fe      	b.n	800a384 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d10a      	bne.n	800a3a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	60bb      	str	r3, [r7, #8]
}
 800a3a0:	bf00      	nop
 800a3a2:	e7fe      	b.n	800a3a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a8:	1e5a      	subs	r2, r3, #1
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d02c      	beq.n	800a414 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d128      	bne.n	800a414 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7fe fa2c 	bl	8008824 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	4b0f      	ldr	r3, [pc, #60]	; (800a424 <xTaskPriorityDisinherit+0xd4>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d903      	bls.n	800a3f4 <xTaskPriorityDisinherit+0xa4>
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	4a0c      	ldr	r2, [pc, #48]	; (800a424 <xTaskPriorityDisinherit+0xd4>)
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4a09      	ldr	r2, [pc, #36]	; (800a428 <xTaskPriorityDisinherit+0xd8>)
 800a402:	441a      	add	r2, r3
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	3304      	adds	r3, #4
 800a408:	4619      	mov	r1, r3
 800a40a:	4610      	mov	r0, r2
 800a40c:	f7fe f9ad 	bl	800876a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a410:	2301      	movs	r3, #1
 800a412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a414:	697b      	ldr	r3, [r7, #20]
	}
 800a416:	4618      	mov	r0, r3
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20002e00 	.word	0x20002e00
 800a424:	200032dc 	.word	0x200032dc
 800a428:	20002e04 	.word	0x20002e04

0800a42c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a43a:	2301      	movs	r3, #1
 800a43c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d06a      	beq.n	800a51a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10a      	bne.n	800a462 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	60fb      	str	r3, [r7, #12]
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d902      	bls.n	800a472 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	61fb      	str	r3, [r7, #28]
 800a470:	e002      	b.n	800a478 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a476:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47c:	69fa      	ldr	r2, [r7, #28]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d04b      	beq.n	800a51a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d146      	bne.n	800a51a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a48c:	4b25      	ldr	r3, [pc, #148]	; (800a524 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	69ba      	ldr	r2, [r7, #24]
 800a492:	429a      	cmp	r2, r3
 800a494:	d10a      	bne.n	800a4ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	60bb      	str	r3, [r7, #8]
}
 800a4a8:	bf00      	nop
 800a4aa:	e7fe      	b.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	699b      	ldr	r3, [r3, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	db04      	blt.n	800a4ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	6959      	ldr	r1, [r3, #20]
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	4a13      	ldr	r2, [pc, #76]	; (800a528 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a4da:	4413      	add	r3, r2
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	d11c      	bne.n	800a51a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe f99d 	bl	8008824 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ee:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d903      	bls.n	800a4fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fa:	4a0c      	ldr	r2, [pc, #48]	; (800a52c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a4fc:	6013      	str	r3, [r2, #0]
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a502:	4613      	mov	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4a07      	ldr	r2, [pc, #28]	; (800a528 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a50c:	441a      	add	r2, r3
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	3304      	adds	r3, #4
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f7fe f928 	bl	800876a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a51a:	bf00      	nop
 800a51c:	3720      	adds	r7, #32
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20002e00 	.word	0x20002e00
 800a528:	20002e04 	.word	0x20002e04
 800a52c:	200032dc 	.word	0x200032dc

0800a530 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a530:	b480      	push	{r7}
 800a532:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a534:	4b07      	ldr	r3, [pc, #28]	; (800a554 <pvTaskIncrementMutexHeldCount+0x24>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d004      	beq.n	800a546 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a53c:	4b05      	ldr	r3, [pc, #20]	; (800a554 <pvTaskIncrementMutexHeldCount+0x24>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a542:	3201      	adds	r2, #1
 800a544:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a546:	4b03      	ldr	r3, [pc, #12]	; (800a554 <pvTaskIncrementMutexHeldCount+0x24>)
 800a548:	681b      	ldr	r3, [r3, #0]
	}
 800a54a:	4618      	mov	r0, r3
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr
 800a554:	20002e00 	.word	0x20002e00

0800a558 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a562:	4b21      	ldr	r3, [pc, #132]	; (800a5e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a568:	4b20      	ldr	r3, [pc, #128]	; (800a5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3304      	adds	r3, #4
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe f958 	bl	8008824 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57a:	d10a      	bne.n	800a592 <prvAddCurrentTaskToDelayedList+0x3a>
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d007      	beq.n	800a592 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a582:	4b1a      	ldr	r3, [pc, #104]	; (800a5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3304      	adds	r3, #4
 800a588:	4619      	mov	r1, r3
 800a58a:	4819      	ldr	r0, [pc, #100]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a58c:	f7fe f8ed 	bl	800876a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a590:	e026      	b.n	800a5e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4413      	add	r3, r2
 800a598:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a59a:	4b14      	ldr	r3, [pc, #80]	; (800a5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d209      	bcs.n	800a5be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5aa:	4b12      	ldr	r3, [pc, #72]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f7fe f8fb 	bl	80087b2 <vListInsert>
}
 800a5bc:	e010      	b.n	800a5e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5be:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3304      	adds	r3, #4
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	4610      	mov	r0, r2
 800a5cc:	f7fe f8f1 	bl	80087b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5d0:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68ba      	ldr	r2, [r7, #8]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d202      	bcs.n	800a5e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5da:	4a08      	ldr	r2, [pc, #32]	; (800a5fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	6013      	str	r3, [r2, #0]
}
 800a5e0:	bf00      	nop
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200032d8 	.word	0x200032d8
 800a5ec:	20002e00 	.word	0x20002e00
 800a5f0:	200032c0 	.word	0x200032c0
 800a5f4:	20003290 	.word	0x20003290
 800a5f8:	2000328c 	.word	0x2000328c
 800a5fc:	200032f4 	.word	0x200032f4

0800a600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b08a      	sub	sp, #40	; 0x28
 800a604:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a606:	2300      	movs	r3, #0
 800a608:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a60a:	f000 fb07 	bl	800ac1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a60e:	4b1c      	ldr	r3, [pc, #112]	; (800a680 <xTimerCreateTimerTask+0x80>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d021      	beq.n	800a65a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a61e:	1d3a      	adds	r2, r7, #4
 800a620:	f107 0108 	add.w	r1, r7, #8
 800a624:	f107 030c 	add.w	r3, r7, #12
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fe f857 	bl	80086dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	9202      	str	r2, [sp, #8]
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	2302      	movs	r3, #2
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	2300      	movs	r3, #0
 800a63e:	460a      	mov	r2, r1
 800a640:	4910      	ldr	r1, [pc, #64]	; (800a684 <xTimerCreateTimerTask+0x84>)
 800a642:	4811      	ldr	r0, [pc, #68]	; (800a688 <xTimerCreateTimerTask+0x88>)
 800a644:	f7fe ffae 	bl	80095a4 <xTaskCreateStatic>
 800a648:	4603      	mov	r3, r0
 800a64a:	4a10      	ldr	r2, [pc, #64]	; (800a68c <xTimerCreateTimerTask+0x8c>)
 800a64c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <xTimerCreateTimerTask+0x8c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a656:	2301      	movs	r3, #1
 800a658:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	613b      	str	r3, [r7, #16]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a676:	697b      	ldr	r3, [r7, #20]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3718      	adds	r7, #24
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	20003330 	.word	0x20003330
 800a684:	0800bcf8 	.word	0x0800bcf8
 800a688:	0800a7c5 	.word	0x0800a7c5
 800a68c:	20003334 	.word	0x20003334

0800a690 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08a      	sub	sp, #40	; 0x28
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10a      	bne.n	800a6be <xTimerGenericCommand+0x2e>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	623b      	str	r3, [r7, #32]
}
 800a6ba:	bf00      	nop
 800a6bc:	e7fe      	b.n	800a6bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6be:	4b1a      	ldr	r3, [pc, #104]	; (800a728 <xTimerGenericCommand+0x98>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d02a      	beq.n	800a71c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2b05      	cmp	r3, #5
 800a6d6:	dc18      	bgt.n	800a70a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6d8:	f7ff fdb4 	bl	800a244 <xTaskGetSchedulerState>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d109      	bne.n	800a6f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6e2:	4b11      	ldr	r3, [pc, #68]	; (800a728 <xTimerGenericCommand+0x98>)
 800a6e4:	6818      	ldr	r0, [r3, #0]
 800a6e6:	f107 0110 	add.w	r1, r7, #16
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ee:	f7fe fa4d 	bl	8008b8c <xQueueGenericSend>
 800a6f2:	6278      	str	r0, [r7, #36]	; 0x24
 800a6f4:	e012      	b.n	800a71c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	; (800a728 <xTimerGenericCommand+0x98>)
 800a6f8:	6818      	ldr	r0, [r3, #0]
 800a6fa:	f107 0110 	add.w	r1, r7, #16
 800a6fe:	2300      	movs	r3, #0
 800a700:	2200      	movs	r2, #0
 800a702:	f7fe fa43 	bl	8008b8c <xQueueGenericSend>
 800a706:	6278      	str	r0, [r7, #36]	; 0x24
 800a708:	e008      	b.n	800a71c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a70a:	4b07      	ldr	r3, [pc, #28]	; (800a728 <xTimerGenericCommand+0x98>)
 800a70c:	6818      	ldr	r0, [r3, #0]
 800a70e:	f107 0110 	add.w	r1, r7, #16
 800a712:	2300      	movs	r3, #0
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	f7fe fb37 	bl	8008d88 <xQueueGenericSendFromISR>
 800a71a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3728      	adds	r7, #40	; 0x28
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20003330 	.word	0x20003330

0800a72c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af02      	add	r7, sp, #8
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a736:	4b22      	ldr	r3, [pc, #136]	; (800a7c0 <prvProcessExpiredTimer+0x94>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	3304      	adds	r3, #4
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe f86d 	bl	8008824 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d022      	beq.n	800a79e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	699a      	ldr	r2, [r3, #24]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	18d1      	adds	r1, r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	6978      	ldr	r0, [r7, #20]
 800a766:	f000 f8d1 	bl	800a90c <prvInsertTimerInActiveList>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01f      	beq.n	800a7b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a770:	2300      	movs	r3, #0
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	2300      	movs	r3, #0
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	2100      	movs	r1, #0
 800a77a:	6978      	ldr	r0, [r7, #20]
 800a77c:	f7ff ff88 	bl	800a690 <xTimerGenericCommand>
 800a780:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d113      	bne.n	800a7b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	60fb      	str	r3, [r7, #12]
}
 800a79a:	bf00      	nop
 800a79c:	e7fe      	b.n	800a79c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7a4:	f023 0301 	bic.w	r3, r3, #1
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	6978      	ldr	r0, [r7, #20]
 800a7b6:	4798      	blx	r3
}
 800a7b8:	bf00      	nop
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	20003328 	.word	0x20003328

0800a7c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7cc:	f107 0308 	add.w	r3, r7, #8
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 f857 	bl	800a884 <prvGetNextExpireTime>
 800a7d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 f803 	bl	800a7e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7e2:	f000 f8d5 	bl	800a990 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7e6:	e7f1      	b.n	800a7cc <prvTimerTask+0x8>

0800a7e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7f2:	f7ff f933 	bl	8009a5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7f6:	f107 0308 	add.w	r3, r7, #8
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 f866 	bl	800a8cc <prvSampleTimeNow>
 800a800:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d130      	bne.n	800a86a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <prvProcessTimerOrBlockTask+0x3c>
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	429a      	cmp	r2, r3
 800a814:	d806      	bhi.n	800a824 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a816:	f7ff f92f 	bl	8009a78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a81a:	68f9      	ldr	r1, [r7, #12]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff ff85 	bl	800a72c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a822:	e024      	b.n	800a86e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d008      	beq.n	800a83c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a82a:	4b13      	ldr	r3, [pc, #76]	; (800a878 <prvProcessTimerOrBlockTask+0x90>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <prvProcessTimerOrBlockTask+0x50>
 800a834:	2301      	movs	r3, #1
 800a836:	e000      	b.n	800a83a <prvProcessTimerOrBlockTask+0x52>
 800a838:	2300      	movs	r3, #0
 800a83a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a83c:	4b0f      	ldr	r3, [pc, #60]	; (800a87c <prvProcessTimerOrBlockTask+0x94>)
 800a83e:	6818      	ldr	r0, [r3, #0]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	4619      	mov	r1, r3
 800a84a:	f7fe fe77 	bl	800953c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a84e:	f7ff f913 	bl	8009a78 <xTaskResumeAll>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a858:	4b09      	ldr	r3, [pc, #36]	; (800a880 <prvProcessTimerOrBlockTask+0x98>)
 800a85a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	f3bf 8f6f 	isb	sy
}
 800a868:	e001      	b.n	800a86e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a86a:	f7ff f905 	bl	8009a78 <xTaskResumeAll>
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	2000332c 	.word	0x2000332c
 800a87c:	20003330 	.word	0x20003330
 800a880:	e000ed04 	.word	0xe000ed04

0800a884 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a88c:	4b0e      	ldr	r3, [pc, #56]	; (800a8c8 <prvGetNextExpireTime+0x44>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d101      	bne.n	800a89a <prvGetNextExpireTime+0x16>
 800a896:	2201      	movs	r2, #1
 800a898:	e000      	b.n	800a89c <prvGetNextExpireTime+0x18>
 800a89a:	2200      	movs	r2, #0
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d105      	bne.n	800a8b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8a8:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <prvGetNextExpireTime+0x44>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68db      	ldr	r3, [r3, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	e001      	b.n	800a8b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3714      	adds	r7, #20
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	20003328 	.word	0x20003328

0800a8cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8d4:	f7ff f96e 	bl	8009bb4 <xTaskGetTickCount>
 800a8d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8da:	4b0b      	ldr	r3, [pc, #44]	; (800a908 <prvSampleTimeNow+0x3c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d205      	bcs.n	800a8f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8e4:	f000 f936 	bl	800ab54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	e002      	b.n	800a8f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8f6:	4a04      	ldr	r2, [pc, #16]	; (800a908 <prvSampleTimeNow+0x3c>)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20003338 	.word	0x20003338

0800a90c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a91a:	2300      	movs	r3, #0
 800a91c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	68ba      	ldr	r2, [r7, #8]
 800a922:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d812      	bhi.n	800a958 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	1ad2      	subs	r2, r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d302      	bcc.n	800a946 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a940:	2301      	movs	r3, #1
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	e01b      	b.n	800a97e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a946:	4b10      	ldr	r3, [pc, #64]	; (800a988 <prvInsertTimerInActiveList+0x7c>)
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4619      	mov	r1, r3
 800a950:	4610      	mov	r0, r2
 800a952:	f7fd ff2e 	bl	80087b2 <vListInsert>
 800a956:	e012      	b.n	800a97e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d206      	bcs.n	800a96e <prvInsertTimerInActiveList+0x62>
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d302      	bcc.n	800a96e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a968:	2301      	movs	r3, #1
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	e007      	b.n	800a97e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a96e:	4b07      	ldr	r3, [pc, #28]	; (800a98c <prvInsertTimerInActiveList+0x80>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3304      	adds	r3, #4
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f7fd ff1a 	bl	80087b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a97e:	697b      	ldr	r3, [r7, #20]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3718      	adds	r7, #24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	2000332c 	.word	0x2000332c
 800a98c:	20003328 	.word	0x20003328

0800a990 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08e      	sub	sp, #56	; 0x38
 800a994:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a996:	e0ca      	b.n	800ab2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da18      	bge.n	800a9d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a99e:	1d3b      	adds	r3, r7, #4
 800a9a0:	3304      	adds	r3, #4
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d10a      	bne.n	800a9c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	61fb      	str	r3, [r7, #28]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c6:	6850      	ldr	r0, [r2, #4]
 800a9c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9ca:	6892      	ldr	r2, [r2, #8]
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f2c0 80ab 	blt.w	800ab2e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d004      	beq.n	800a9ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fd ff1b 	bl	8008824 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9ee:	463b      	mov	r3, r7
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff ff6b 	bl	800a8cc <prvSampleTimeNow>
 800a9f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b09      	cmp	r3, #9
 800a9fc:	f200 8096 	bhi.w	800ab2c <prvProcessReceivedCommands+0x19c>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <prvProcessReceivedCommands+0x78>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa31 	.word	0x0800aa31
 800aa0c:	0800aa31 	.word	0x0800aa31
 800aa10:	0800aa31 	.word	0x0800aa31
 800aa14:	0800aaa5 	.word	0x0800aaa5
 800aa18:	0800aab9 	.word	0x0800aab9
 800aa1c:	0800ab03 	.word	0x0800ab03
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa31 	.word	0x0800aa31
 800aa28:	0800aaa5 	.word	0x0800aaa5
 800aa2c:	0800aab9 	.word	0x0800aab9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa36:	f043 0301 	orr.w	r3, r3, #1
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	18d1      	adds	r1, r2, r3
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa50:	f7ff ff5c 	bl	800a90c <prvInsertTimerInActiveList>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d069      	beq.n	800ab2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa68:	f003 0304 	and.w	r3, r3, #4
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d05e      	beq.n	800ab2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa74:	699b      	ldr	r3, [r3, #24]
 800aa76:	441a      	add	r2, r3
 800aa78:	2300      	movs	r3, #0
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	2100      	movs	r1, #0
 800aa80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa82:	f7ff fe05 	bl	800a690 <xTimerGenericCommand>
 800aa86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d14f      	bne.n	800ab2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	61bb      	str	r3, [r7, #24]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaaa:	f023 0301 	bic.w	r3, r3, #1
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aab6:	e03a      	b.n	800ab2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aabe:	f043 0301 	orr.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	617b      	str	r3, [r7, #20]
}
 800aaea:	bf00      	nop
 800aaec:	e7fe      	b.n	800aaec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	699a      	ldr	r2, [r3, #24]
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf4:	18d1      	adds	r1, r2, r3
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aafa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aafc:	f7ff ff06 	bl	800a90c <prvInsertTimerInActiveList>
					break;
 800ab00:	e015      	b.n	800ab2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab08:	f003 0302 	and.w	r3, r3, #2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d103      	bne.n	800ab18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab12:	f000 fb57 	bl	800b1c4 <vPortFree>
 800ab16:	e00a      	b.n	800ab2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab1e:	f023 0301 	bic.w	r3, r3, #1
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab2a:	e000      	b.n	800ab2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ab2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab2e:	4b08      	ldr	r3, [pc, #32]	; (800ab50 <prvProcessReceivedCommands+0x1c0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	1d39      	adds	r1, r7, #4
 800ab34:	2200      	movs	r2, #0
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe f9c2 	bl	8008ec0 <xQueueReceive>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f47f af2a 	bne.w	800a998 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	3730      	adds	r7, #48	; 0x30
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20003330 	.word	0x20003330

0800ab54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b088      	sub	sp, #32
 800ab58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab5a:	e048      	b.n	800abee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab5c:	4b2d      	ldr	r3, [pc, #180]	; (800ac14 <prvSwitchTimerLists+0xc0>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab66:	4b2b      	ldr	r3, [pc, #172]	; (800ac14 <prvSwitchTimerLists+0xc0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3304      	adds	r3, #4
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fd fe55 	bl	8008824 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab88:	f003 0304 	and.w	r3, r3, #4
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d02e      	beq.n	800abee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4413      	add	r3, r2
 800ab98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d90e      	bls.n	800abc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abae:	4b19      	ldr	r3, [pc, #100]	; (800ac14 <prvSwitchTimerLists+0xc0>)
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	3304      	adds	r3, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	4610      	mov	r0, r2
 800abba:	f7fd fdfa 	bl	80087b2 <vListInsert>
 800abbe:	e016      	b.n	800abee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abc0:	2300      	movs	r3, #0
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	2300      	movs	r3, #0
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	2100      	movs	r1, #0
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f7ff fd60 	bl	800a690 <xTimerGenericCommand>
 800abd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	603b      	str	r3, [r7, #0]
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abee:	4b09      	ldr	r3, [pc, #36]	; (800ac14 <prvSwitchTimerLists+0xc0>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1b1      	bne.n	800ab5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abf8:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <prvSwitchTimerLists+0xc0>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abfe:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <prvSwitchTimerLists+0xc4>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a04      	ldr	r2, [pc, #16]	; (800ac14 <prvSwitchTimerLists+0xc0>)
 800ac04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac06:	4a04      	ldr	r2, [pc, #16]	; (800ac18 <prvSwitchTimerLists+0xc4>)
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	6013      	str	r3, [r2, #0]
}
 800ac0c:	bf00      	nop
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20003328 	.word	0x20003328
 800ac18:	2000332c 	.word	0x2000332c

0800ac1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac22:	f000 f967 	bl	800aef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac26:	4b15      	ldr	r3, [pc, #84]	; (800ac7c <prvCheckForValidListAndQueue+0x60>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d120      	bne.n	800ac70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac2e:	4814      	ldr	r0, [pc, #80]	; (800ac80 <prvCheckForValidListAndQueue+0x64>)
 800ac30:	f7fd fd6e 	bl	8008710 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac34:	4813      	ldr	r0, [pc, #76]	; (800ac84 <prvCheckForValidListAndQueue+0x68>)
 800ac36:	f7fd fd6b 	bl	8008710 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac3a:	4b13      	ldr	r3, [pc, #76]	; (800ac88 <prvCheckForValidListAndQueue+0x6c>)
 800ac3c:	4a10      	ldr	r2, [pc, #64]	; (800ac80 <prvCheckForValidListAndQueue+0x64>)
 800ac3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac40:	4b12      	ldr	r3, [pc, #72]	; (800ac8c <prvCheckForValidListAndQueue+0x70>)
 800ac42:	4a10      	ldr	r2, [pc, #64]	; (800ac84 <prvCheckForValidListAndQueue+0x68>)
 800ac44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac46:	2300      	movs	r3, #0
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	4b11      	ldr	r3, [pc, #68]	; (800ac90 <prvCheckForValidListAndQueue+0x74>)
 800ac4c:	4a11      	ldr	r2, [pc, #68]	; (800ac94 <prvCheckForValidListAndQueue+0x78>)
 800ac4e:	2110      	movs	r1, #16
 800ac50:	200a      	movs	r0, #10
 800ac52:	f7fd fe79 	bl	8008948 <xQueueGenericCreateStatic>
 800ac56:	4603      	mov	r3, r0
 800ac58:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <prvCheckForValidListAndQueue+0x60>)
 800ac5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac5c:	4b07      	ldr	r3, [pc, #28]	; (800ac7c <prvCheckForValidListAndQueue+0x60>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <prvCheckForValidListAndQueue+0x60>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	490b      	ldr	r1, [pc, #44]	; (800ac98 <prvCheckForValidListAndQueue+0x7c>)
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe fc3c 	bl	80094e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac70:	f000 f970 	bl	800af54 <vPortExitCritical>
}
 800ac74:	bf00      	nop
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20003330 	.word	0x20003330
 800ac80:	20003300 	.word	0x20003300
 800ac84:	20003314 	.word	0x20003314
 800ac88:	20003328 	.word	0x20003328
 800ac8c:	2000332c 	.word	0x2000332c
 800ac90:	200033dc 	.word	0x200033dc
 800ac94:	2000333c 	.word	0x2000333c
 800ac98:	0800bd00 	.word	0x0800bd00

0800ac9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3b04      	subs	r3, #4
 800acac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	3b04      	subs	r3, #4
 800acba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f023 0201 	bic.w	r2, r3, #1
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3b04      	subs	r3, #4
 800acca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800accc:	4a0c      	ldr	r2, [pc, #48]	; (800ad00 <pxPortInitialiseStack+0x64>)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	3b14      	subs	r3, #20
 800acd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3b04      	subs	r3, #4
 800ace2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f06f 0202 	mvn.w	r2, #2
 800acea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3b20      	subs	r3, #32
 800acf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acf2:	68fb      	ldr	r3, [r7, #12]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr
 800ad00:	0800ad05 	.word	0x0800ad05

0800ad04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad0e:	4b12      	ldr	r3, [pc, #72]	; (800ad58 <prvTaskExitError+0x54>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad16:	d00a      	beq.n	800ad2e <prvTaskExitError+0x2a>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	60fb      	str	r3, [r7, #12]
}
 800ad2a:	bf00      	nop
 800ad2c:	e7fe      	b.n	800ad2c <prvTaskExitError+0x28>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60bb      	str	r3, [r7, #8]
}
 800ad40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad42:	bf00      	nop
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d0fc      	beq.n	800ad44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad4a:	bf00      	nop
 800ad4c:	bf00      	nop
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	20000038 	.word	0x20000038
 800ad5c:	00000000 	.word	0x00000000

0800ad60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <pxCurrentTCBConst2>)
 800ad62:	6819      	ldr	r1, [r3, #0]
 800ad64:	6808      	ldr	r0, [r1, #0]
 800ad66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	f380 8809 	msr	PSP, r0
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f380 8811 	msr	BASEPRI, r0
 800ad7a:	4770      	bx	lr
 800ad7c:	f3af 8000 	nop.w

0800ad80 <pxCurrentTCBConst2>:
 800ad80:	20002e00 	.word	0x20002e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop

0800ad88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad88:	4808      	ldr	r0, [pc, #32]	; (800adac <prvPortStartFirstTask+0x24>)
 800ad8a:	6800      	ldr	r0, [r0, #0]
 800ad8c:	6800      	ldr	r0, [r0, #0]
 800ad8e:	f380 8808 	msr	MSP, r0
 800ad92:	f04f 0000 	mov.w	r0, #0
 800ad96:	f380 8814 	msr	CONTROL, r0
 800ad9a:	b662      	cpsie	i
 800ad9c:	b661      	cpsie	f
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	df00      	svc	0
 800ada8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adaa:	bf00      	nop
 800adac:	e000ed08 	.word	0xe000ed08

0800adb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800adb6:	4b46      	ldr	r3, [pc, #280]	; (800aed0 <xPortStartScheduler+0x120>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a46      	ldr	r2, [pc, #280]	; (800aed4 <xPortStartScheduler+0x124>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d10a      	bne.n	800add6 <xPortStartScheduler+0x26>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	613b      	str	r3, [r7, #16]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800add6:	4b3e      	ldr	r3, [pc, #248]	; (800aed0 <xPortStartScheduler+0x120>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a3f      	ldr	r2, [pc, #252]	; (800aed8 <xPortStartScheduler+0x128>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d10a      	bne.n	800adf6 <xPortStartScheduler+0x46>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	60fb      	str	r3, [r7, #12]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adf6:	4b39      	ldr	r3, [pc, #228]	; (800aedc <xPortStartScheduler+0x12c>)
 800adf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	22ff      	movs	r2, #255	; 0xff
 800ae06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	4b31      	ldr	r3, [pc, #196]	; (800aee0 <xPortStartScheduler+0x130>)
 800ae1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae1e:	4b31      	ldr	r3, [pc, #196]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae20:	2207      	movs	r2, #7
 800ae22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae24:	e009      	b.n	800ae3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae26:	4b2f      	ldr	r3, [pc, #188]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	4a2d      	ldr	r2, [pc, #180]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae42:	2b80      	cmp	r3, #128	; 0x80
 800ae44:	d0ef      	beq.n	800ae26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae46:	4b27      	ldr	r3, [pc, #156]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f1c3 0307 	rsb	r3, r3, #7
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	d00a      	beq.n	800ae68 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	60bb      	str	r3, [r7, #8]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae68:	4b1e      	ldr	r3, [pc, #120]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	4a1d      	ldr	r2, [pc, #116]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae72:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae7a:	4a1a      	ldr	r2, [pc, #104]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae86:	4b18      	ldr	r3, [pc, #96]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a17      	ldr	r2, [pc, #92]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae92:	4b15      	ldr	r3, [pc, #84]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a14      	ldr	r2, [pc, #80]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae9e:	f000 f8dd 	bl	800b05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aea2:	4b12      	ldr	r3, [pc, #72]	; (800aeec <xPortStartScheduler+0x13c>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aea8:	f000 f8fc 	bl	800b0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aeac:	4b10      	ldr	r3, [pc, #64]	; (800aef0 <xPortStartScheduler+0x140>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a0f      	ldr	r2, [pc, #60]	; (800aef0 <xPortStartScheduler+0x140>)
 800aeb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aeb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aeb8:	f7ff ff66 	bl	800ad88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aebc:	f7fe ff4c 	bl	8009d58 <vTaskSwitchContext>
	prvTaskExitError();
 800aec0:	f7ff ff20 	bl	800ad04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	e000ed00 	.word	0xe000ed00
 800aed4:	410fc271 	.word	0x410fc271
 800aed8:	410fc270 	.word	0x410fc270
 800aedc:	e000e400 	.word	0xe000e400
 800aee0:	2000342c 	.word	0x2000342c
 800aee4:	20003430 	.word	0x20003430
 800aee8:	e000ed20 	.word	0xe000ed20
 800aeec:	20000038 	.word	0x20000038
 800aef0:	e000ef34 	.word	0xe000ef34

0800aef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	607b      	str	r3, [r7, #4]
}
 800af0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af0e:	4b0f      	ldr	r3, [pc, #60]	; (800af4c <vPortEnterCritical+0x58>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	4a0d      	ldr	r2, [pc, #52]	; (800af4c <vPortEnterCritical+0x58>)
 800af16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af18:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <vPortEnterCritical+0x58>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d10f      	bne.n	800af40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af20:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <vPortEnterCritical+0x5c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <vPortEnterCritical+0x4c>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	603b      	str	r3, [r7, #0]
}
 800af3c:	bf00      	nop
 800af3e:	e7fe      	b.n	800af3e <vPortEnterCritical+0x4a>
	}
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	20000038 	.word	0x20000038
 800af50:	e000ed04 	.word	0xe000ed04

0800af54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af5a:	4b12      	ldr	r3, [pc, #72]	; (800afa4 <vPortExitCritical+0x50>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <vPortExitCritical+0x24>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	607b      	str	r3, [r7, #4]
}
 800af74:	bf00      	nop
 800af76:	e7fe      	b.n	800af76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <vPortExitCritical+0x50>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <vPortExitCritical+0x50>)
 800af80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af82:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <vPortExitCritical+0x50>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d105      	bne.n	800af96 <vPortExitCritical+0x42>
 800af8a:	2300      	movs	r3, #0
 800af8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	f383 8811 	msr	BASEPRI, r3
}
 800af94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af96:	bf00      	nop
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000038 	.word	0x20000038
	...

0800afb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afb0:	f3ef 8009 	mrs	r0, PSP
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	4b15      	ldr	r3, [pc, #84]	; (800b010 <pxCurrentTCBConst>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	f01e 0f10 	tst.w	lr, #16
 800afc0:	bf08      	it	eq
 800afc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	6010      	str	r0, [r2, #0]
 800afcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afd4:	f380 8811 	msr	BASEPRI, r0
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f7fe feba 	bl	8009d58 <vTaskSwitchContext>
 800afe4:	f04f 0000 	mov.w	r0, #0
 800afe8:	f380 8811 	msr	BASEPRI, r0
 800afec:	bc09      	pop	{r0, r3}
 800afee:	6819      	ldr	r1, [r3, #0]
 800aff0:	6808      	ldr	r0, [r1, #0]
 800aff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff6:	f01e 0f10 	tst.w	lr, #16
 800affa:	bf08      	it	eq
 800affc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b000:	f380 8809 	msr	PSP, r0
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	f3af 8000 	nop.w

0800b010 <pxCurrentTCBConst>:
 800b010:	20002e00 	.word	0x20002e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop

0800b018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	607b      	str	r3, [r7, #4]
}
 800b030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b032:	f7fe fdcf 	bl	8009bd4 <xTaskIncrementTick>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b03c:	4b06      	ldr	r3, [pc, #24]	; (800b058 <xPortSysTickHandler+0x40>)
 800b03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	2300      	movs	r3, #0
 800b046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	f383 8811 	msr	BASEPRI, r3
}
 800b04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	e000ed04 	.word	0xe000ed04

0800b05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b060:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <vPortSetupTimerInterrupt+0x34>)
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b066:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <vPortSetupTimerInterrupt+0x38>)
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b06c:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <vPortSetupTimerInterrupt+0x3c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <vPortSetupTimerInterrupt+0x40>)
 800b072:	fba2 2303 	umull	r2, r3, r2, r3
 800b076:	099b      	lsrs	r3, r3, #6
 800b078:	4a09      	ldr	r2, [pc, #36]	; (800b0a0 <vPortSetupTimerInterrupt+0x44>)
 800b07a:	3b01      	subs	r3, #1
 800b07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b07e:	4b04      	ldr	r3, [pc, #16]	; (800b090 <vPortSetupTimerInterrupt+0x34>)
 800b080:	2207      	movs	r2, #7
 800b082:	601a      	str	r2, [r3, #0]
}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	e000e010 	.word	0xe000e010
 800b094:	e000e018 	.word	0xe000e018
 800b098:	20000024 	.word	0x20000024
 800b09c:	10624dd3 	.word	0x10624dd3
 800b0a0:	e000e014 	.word	0xe000e014

0800b0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0b4 <vPortEnableVFP+0x10>
 800b0a8:	6801      	ldr	r1, [r0, #0]
 800b0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0ae:	6001      	str	r1, [r0, #0]
 800b0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0b2:	bf00      	nop
 800b0b4:	e000ed88 	.word	0xe000ed88

0800b0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0be:	f3ef 8305 	mrs	r3, IPSR
 800b0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b0f      	cmp	r3, #15
 800b0c8:	d914      	bls.n	800b0f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0ca:	4a17      	ldr	r2, [pc, #92]	; (800b128 <vPortValidateInterruptPriority+0x70>)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0d4:	4b15      	ldr	r3, [pc, #84]	; (800b12c <vPortValidateInterruptPriority+0x74>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	7afa      	ldrb	r2, [r7, #11]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d20a      	bcs.n	800b0f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	607b      	str	r3, [r7, #4]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0f4:	4b0e      	ldr	r3, [pc, #56]	; (800b130 <vPortValidateInterruptPriority+0x78>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0fc:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <vPortValidateInterruptPriority+0x7c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d90a      	bls.n	800b11a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	603b      	str	r3, [r7, #0]
}
 800b116:	bf00      	nop
 800b118:	e7fe      	b.n	800b118 <vPortValidateInterruptPriority+0x60>
	}
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	e000e3f0 	.word	0xe000e3f0
 800b12c:	2000342c 	.word	0x2000342c
 800b130:	e000ed0c 	.word	0xe000ed0c
 800b134:	20003430 	.word	0x20003430

0800b138 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f003 0307 	and.w	r3, r3, #7
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d004      	beq.n	800b158 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f023 0307 	bic.w	r3, r3, #7
 800b154:	3308      	adds	r3, #8
 800b156:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 800b158:	f7fe fc80 	bl	8009a5c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 800b15c:	4b16      	ldr	r3, [pc, #88]	; (800b1b8 <pvPortMalloc+0x80>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d105      	bne.n	800b170 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800b164:	4b15      	ldr	r3, [pc, #84]	; (800b1bc <pvPortMalloc+0x84>)
 800b166:	f023 0307 	bic.w	r3, r3, #7
 800b16a:	461a      	mov	r2, r3
 800b16c:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <pvPortMalloc+0x80>)
 800b16e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b170:	4b13      	ldr	r3, [pc, #76]	; (800b1c0 <pvPortMalloc+0x88>)
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4413      	add	r3, r2
 800b178:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d813      	bhi.n	800b1a8 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 800b180:	4b0f      	ldr	r3, [pc, #60]	; (800b1c0 <pvPortMalloc+0x88>)
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	441a      	add	r2, r3
 800b188:	4b0d      	ldr	r3, [pc, #52]	; (800b1c0 <pvPortMalloc+0x88>)
 800b18a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d90b      	bls.n	800b1a8 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 800b190:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <pvPortMalloc+0x80>)
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	4b0a      	ldr	r3, [pc, #40]	; (800b1c0 <pvPortMalloc+0x88>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4413      	add	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 800b19c:	4b08      	ldr	r3, [pc, #32]	; (800b1c0 <pvPortMalloc+0x88>)
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	4a06      	ldr	r2, [pc, #24]	; (800b1c0 <pvPortMalloc+0x88>)
 800b1a6:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1a8:	f7fe fc66 	bl	8009a78 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	20005438 	.word	0x20005438
 800b1bc:	2000343c 	.word	0x2000343c
 800b1c0:	20005434 	.word	0x20005434

0800b1c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00a      	beq.n	800b1e8 <vPortFree+0x24>
	__asm volatile
 800b1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d6:	f383 8811 	msr	BASEPRI, r3
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	f3bf 8f4f 	dsb	sy
 800b1e2:	60fb      	str	r3, [r7, #12]
}
 800b1e4:	bf00      	nop
 800b1e6:	e7fe      	b.n	800b1e6 <vPortFree+0x22>
}
 800b1e8:	bf00      	nop
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <malloc>:
 800b1f4:	4b02      	ldr	r3, [pc, #8]	; (800b200 <malloc+0xc>)
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	6818      	ldr	r0, [r3, #0]
 800b1fa:	f000 b82b 	b.w	800b254 <_malloc_r>
 800b1fe:	bf00      	nop
 800b200:	20000088 	.word	0x20000088

0800b204 <free>:
 800b204:	4b02      	ldr	r3, [pc, #8]	; (800b210 <free+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f000 b98b 	b.w	800b524 <_free_r>
 800b20e:	bf00      	nop
 800b210:	20000088 	.word	0x20000088

0800b214 <sbrk_aligned>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	4e0e      	ldr	r6, [pc, #56]	; (800b250 <sbrk_aligned+0x3c>)
 800b218:	460c      	mov	r4, r1
 800b21a:	6831      	ldr	r1, [r6, #0]
 800b21c:	4605      	mov	r5, r0
 800b21e:	b911      	cbnz	r1, 800b226 <sbrk_aligned+0x12>
 800b220:	f000 f936 	bl	800b490 <_sbrk_r>
 800b224:	6030      	str	r0, [r6, #0]
 800b226:	4621      	mov	r1, r4
 800b228:	4628      	mov	r0, r5
 800b22a:	f000 f931 	bl	800b490 <_sbrk_r>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d00a      	beq.n	800b248 <sbrk_aligned+0x34>
 800b232:	1cc4      	adds	r4, r0, #3
 800b234:	f024 0403 	bic.w	r4, r4, #3
 800b238:	42a0      	cmp	r0, r4
 800b23a:	d007      	beq.n	800b24c <sbrk_aligned+0x38>
 800b23c:	1a21      	subs	r1, r4, r0
 800b23e:	4628      	mov	r0, r5
 800b240:	f000 f926 	bl	800b490 <_sbrk_r>
 800b244:	3001      	adds	r0, #1
 800b246:	d101      	bne.n	800b24c <sbrk_aligned+0x38>
 800b248:	f04f 34ff 	mov.w	r4, #4294967295
 800b24c:	4620      	mov	r0, r4
 800b24e:	bd70      	pop	{r4, r5, r6, pc}
 800b250:	20005440 	.word	0x20005440

0800b254 <_malloc_r>:
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	1ccd      	adds	r5, r1, #3
 800b25a:	f025 0503 	bic.w	r5, r5, #3
 800b25e:	3508      	adds	r5, #8
 800b260:	2d0c      	cmp	r5, #12
 800b262:	bf38      	it	cc
 800b264:	250c      	movcc	r5, #12
 800b266:	2d00      	cmp	r5, #0
 800b268:	4607      	mov	r7, r0
 800b26a:	db01      	blt.n	800b270 <_malloc_r+0x1c>
 800b26c:	42a9      	cmp	r1, r5
 800b26e:	d905      	bls.n	800b27c <_malloc_r+0x28>
 800b270:	230c      	movs	r3, #12
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	2600      	movs	r6, #0
 800b276:	4630      	mov	r0, r6
 800b278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b350 <_malloc_r+0xfc>
 800b280:	f000 f868 	bl	800b354 <__malloc_lock>
 800b284:	f8d8 3000 	ldr.w	r3, [r8]
 800b288:	461c      	mov	r4, r3
 800b28a:	bb5c      	cbnz	r4, 800b2e4 <_malloc_r+0x90>
 800b28c:	4629      	mov	r1, r5
 800b28e:	4638      	mov	r0, r7
 800b290:	f7ff ffc0 	bl	800b214 <sbrk_aligned>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	4604      	mov	r4, r0
 800b298:	d155      	bne.n	800b346 <_malloc_r+0xf2>
 800b29a:	f8d8 4000 	ldr.w	r4, [r8]
 800b29e:	4626      	mov	r6, r4
 800b2a0:	2e00      	cmp	r6, #0
 800b2a2:	d145      	bne.n	800b330 <_malloc_r+0xdc>
 800b2a4:	2c00      	cmp	r4, #0
 800b2a6:	d048      	beq.n	800b33a <_malloc_r+0xe6>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	eb04 0903 	add.w	r9, r4, r3
 800b2b2:	f000 f8ed 	bl	800b490 <_sbrk_r>
 800b2b6:	4581      	cmp	r9, r0
 800b2b8:	d13f      	bne.n	800b33a <_malloc_r+0xe6>
 800b2ba:	6821      	ldr	r1, [r4, #0]
 800b2bc:	1a6d      	subs	r5, r5, r1
 800b2be:	4629      	mov	r1, r5
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f7ff ffa7 	bl	800b214 <sbrk_aligned>
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d037      	beq.n	800b33a <_malloc_r+0xe6>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	442b      	add	r3, r5
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d038      	beq.n	800b34a <_malloc_r+0xf6>
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	42a2      	cmp	r2, r4
 800b2dc:	d12b      	bne.n	800b336 <_malloc_r+0xe2>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	605a      	str	r2, [r3, #4]
 800b2e2:	e00f      	b.n	800b304 <_malloc_r+0xb0>
 800b2e4:	6822      	ldr	r2, [r4, #0]
 800b2e6:	1b52      	subs	r2, r2, r5
 800b2e8:	d41f      	bmi.n	800b32a <_malloc_r+0xd6>
 800b2ea:	2a0b      	cmp	r2, #11
 800b2ec:	d917      	bls.n	800b31e <_malloc_r+0xca>
 800b2ee:	1961      	adds	r1, r4, r5
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	6025      	str	r5, [r4, #0]
 800b2f4:	bf18      	it	ne
 800b2f6:	6059      	strne	r1, [r3, #4]
 800b2f8:	6863      	ldr	r3, [r4, #4]
 800b2fa:	bf08      	it	eq
 800b2fc:	f8c8 1000 	streq.w	r1, [r8]
 800b300:	5162      	str	r2, [r4, r5]
 800b302:	604b      	str	r3, [r1, #4]
 800b304:	4638      	mov	r0, r7
 800b306:	f104 060b 	add.w	r6, r4, #11
 800b30a:	f000 f829 	bl	800b360 <__malloc_unlock>
 800b30e:	f026 0607 	bic.w	r6, r6, #7
 800b312:	1d23      	adds	r3, r4, #4
 800b314:	1af2      	subs	r2, r6, r3
 800b316:	d0ae      	beq.n	800b276 <_malloc_r+0x22>
 800b318:	1b9b      	subs	r3, r3, r6
 800b31a:	50a3      	str	r3, [r4, r2]
 800b31c:	e7ab      	b.n	800b276 <_malloc_r+0x22>
 800b31e:	42a3      	cmp	r3, r4
 800b320:	6862      	ldr	r2, [r4, #4]
 800b322:	d1dd      	bne.n	800b2e0 <_malloc_r+0x8c>
 800b324:	f8c8 2000 	str.w	r2, [r8]
 800b328:	e7ec      	b.n	800b304 <_malloc_r+0xb0>
 800b32a:	4623      	mov	r3, r4
 800b32c:	6864      	ldr	r4, [r4, #4]
 800b32e:	e7ac      	b.n	800b28a <_malloc_r+0x36>
 800b330:	4634      	mov	r4, r6
 800b332:	6876      	ldr	r6, [r6, #4]
 800b334:	e7b4      	b.n	800b2a0 <_malloc_r+0x4c>
 800b336:	4613      	mov	r3, r2
 800b338:	e7cc      	b.n	800b2d4 <_malloc_r+0x80>
 800b33a:	230c      	movs	r3, #12
 800b33c:	603b      	str	r3, [r7, #0]
 800b33e:	4638      	mov	r0, r7
 800b340:	f000 f80e 	bl	800b360 <__malloc_unlock>
 800b344:	e797      	b.n	800b276 <_malloc_r+0x22>
 800b346:	6025      	str	r5, [r4, #0]
 800b348:	e7dc      	b.n	800b304 <_malloc_r+0xb0>
 800b34a:	605b      	str	r3, [r3, #4]
 800b34c:	deff      	udf	#255	; 0xff
 800b34e:	bf00      	nop
 800b350:	2000543c 	.word	0x2000543c

0800b354 <__malloc_lock>:
 800b354:	4801      	ldr	r0, [pc, #4]	; (800b35c <__malloc_lock+0x8>)
 800b356:	f000 b8d5 	b.w	800b504 <__retarget_lock_acquire_recursive>
 800b35a:	bf00      	nop
 800b35c:	20005580 	.word	0x20005580

0800b360 <__malloc_unlock>:
 800b360:	4801      	ldr	r0, [pc, #4]	; (800b368 <__malloc_unlock+0x8>)
 800b362:	f000 b8d0 	b.w	800b506 <__retarget_lock_release_recursive>
 800b366:	bf00      	nop
 800b368:	20005580 	.word	0x20005580

0800b36c <sniprintf>:
 800b36c:	b40c      	push	{r2, r3}
 800b36e:	b530      	push	{r4, r5, lr}
 800b370:	4b17      	ldr	r3, [pc, #92]	; (800b3d0 <sniprintf+0x64>)
 800b372:	1e0c      	subs	r4, r1, #0
 800b374:	681d      	ldr	r5, [r3, #0]
 800b376:	b09d      	sub	sp, #116	; 0x74
 800b378:	da08      	bge.n	800b38c <sniprintf+0x20>
 800b37a:	238b      	movs	r3, #139	; 0x8b
 800b37c:	602b      	str	r3, [r5, #0]
 800b37e:	f04f 30ff 	mov.w	r0, #4294967295
 800b382:	b01d      	add	sp, #116	; 0x74
 800b384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b388:	b002      	add	sp, #8
 800b38a:	4770      	bx	lr
 800b38c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b390:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b394:	bf14      	ite	ne
 800b396:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b39a:	4623      	moveq	r3, r4
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	9307      	str	r3, [sp, #28]
 800b3a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3a4:	9002      	str	r0, [sp, #8]
 800b3a6:	9006      	str	r0, [sp, #24]
 800b3a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b3ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b3ae:	ab21      	add	r3, sp, #132	; 0x84
 800b3b0:	a902      	add	r1, sp, #8
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	f000 f95b 	bl	800b670 <_svfiprintf_r>
 800b3ba:	1c43      	adds	r3, r0, #1
 800b3bc:	bfbc      	itt	lt
 800b3be:	238b      	movlt	r3, #139	; 0x8b
 800b3c0:	602b      	strlt	r3, [r5, #0]
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	d0dd      	beq.n	800b382 <sniprintf+0x16>
 800b3c6:	9b02      	ldr	r3, [sp, #8]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	701a      	strb	r2, [r3, #0]
 800b3cc:	e7d9      	b.n	800b382 <sniprintf+0x16>
 800b3ce:	bf00      	nop
 800b3d0:	20000088 	.word	0x20000088

0800b3d4 <memset>:
 800b3d4:	4402      	add	r2, r0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d100      	bne.n	800b3de <memset+0xa>
 800b3dc:	4770      	bx	lr
 800b3de:	f803 1b01 	strb.w	r1, [r3], #1
 800b3e2:	e7f9      	b.n	800b3d8 <memset+0x4>

0800b3e4 <_reclaim_reent>:
 800b3e4:	4b29      	ldr	r3, [pc, #164]	; (800b48c <_reclaim_reent+0xa8>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4283      	cmp	r3, r0
 800b3ea:	b570      	push	{r4, r5, r6, lr}
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	d04b      	beq.n	800b488 <_reclaim_reent+0xa4>
 800b3f0:	69c3      	ldr	r3, [r0, #28]
 800b3f2:	b143      	cbz	r3, 800b406 <_reclaim_reent+0x22>
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d144      	bne.n	800b484 <_reclaim_reent+0xa0>
 800b3fa:	69e3      	ldr	r3, [r4, #28]
 800b3fc:	6819      	ldr	r1, [r3, #0]
 800b3fe:	b111      	cbz	r1, 800b406 <_reclaim_reent+0x22>
 800b400:	4620      	mov	r0, r4
 800b402:	f000 f88f 	bl	800b524 <_free_r>
 800b406:	6961      	ldr	r1, [r4, #20]
 800b408:	b111      	cbz	r1, 800b410 <_reclaim_reent+0x2c>
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 f88a 	bl	800b524 <_free_r>
 800b410:	69e1      	ldr	r1, [r4, #28]
 800b412:	b111      	cbz	r1, 800b41a <_reclaim_reent+0x36>
 800b414:	4620      	mov	r0, r4
 800b416:	f000 f885 	bl	800b524 <_free_r>
 800b41a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b41c:	b111      	cbz	r1, 800b424 <_reclaim_reent+0x40>
 800b41e:	4620      	mov	r0, r4
 800b420:	f000 f880 	bl	800b524 <_free_r>
 800b424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b426:	b111      	cbz	r1, 800b42e <_reclaim_reent+0x4a>
 800b428:	4620      	mov	r0, r4
 800b42a:	f000 f87b 	bl	800b524 <_free_r>
 800b42e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b430:	b111      	cbz	r1, 800b438 <_reclaim_reent+0x54>
 800b432:	4620      	mov	r0, r4
 800b434:	f000 f876 	bl	800b524 <_free_r>
 800b438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b43a:	b111      	cbz	r1, 800b442 <_reclaim_reent+0x5e>
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 f871 	bl	800b524 <_free_r>
 800b442:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b444:	b111      	cbz	r1, 800b44c <_reclaim_reent+0x68>
 800b446:	4620      	mov	r0, r4
 800b448:	f000 f86c 	bl	800b524 <_free_r>
 800b44c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b44e:	b111      	cbz	r1, 800b456 <_reclaim_reent+0x72>
 800b450:	4620      	mov	r0, r4
 800b452:	f000 f867 	bl	800b524 <_free_r>
 800b456:	6a23      	ldr	r3, [r4, #32]
 800b458:	b1b3      	cbz	r3, 800b488 <_reclaim_reent+0xa4>
 800b45a:	4620      	mov	r0, r4
 800b45c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b460:	4718      	bx	r3
 800b462:	5949      	ldr	r1, [r1, r5]
 800b464:	b941      	cbnz	r1, 800b478 <_reclaim_reent+0x94>
 800b466:	3504      	adds	r5, #4
 800b468:	69e3      	ldr	r3, [r4, #28]
 800b46a:	2d80      	cmp	r5, #128	; 0x80
 800b46c:	68d9      	ldr	r1, [r3, #12]
 800b46e:	d1f8      	bne.n	800b462 <_reclaim_reent+0x7e>
 800b470:	4620      	mov	r0, r4
 800b472:	f000 f857 	bl	800b524 <_free_r>
 800b476:	e7c0      	b.n	800b3fa <_reclaim_reent+0x16>
 800b478:	680e      	ldr	r6, [r1, #0]
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 f852 	bl	800b524 <_free_r>
 800b480:	4631      	mov	r1, r6
 800b482:	e7ef      	b.n	800b464 <_reclaim_reent+0x80>
 800b484:	2500      	movs	r5, #0
 800b486:	e7ef      	b.n	800b468 <_reclaim_reent+0x84>
 800b488:	bd70      	pop	{r4, r5, r6, pc}
 800b48a:	bf00      	nop
 800b48c:	20000088 	.word	0x20000088

0800b490 <_sbrk_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4d06      	ldr	r5, [pc, #24]	; (800b4ac <_sbrk_r+0x1c>)
 800b494:	2300      	movs	r3, #0
 800b496:	4604      	mov	r4, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	602b      	str	r3, [r5, #0]
 800b49c:	f7f6 fae4 	bl	8001a68 <_sbrk>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_sbrk_r+0x1a>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_sbrk_r+0x1a>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	2000557c 	.word	0x2000557c

0800b4b0 <__errno>:
 800b4b0:	4b01      	ldr	r3, [pc, #4]	; (800b4b8 <__errno+0x8>)
 800b4b2:	6818      	ldr	r0, [r3, #0]
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	20000088 	.word	0x20000088

0800b4bc <__libc_init_array>:
 800b4bc:	b570      	push	{r4, r5, r6, lr}
 800b4be:	4d0d      	ldr	r5, [pc, #52]	; (800b4f4 <__libc_init_array+0x38>)
 800b4c0:	4c0d      	ldr	r4, [pc, #52]	; (800b4f8 <__libc_init_array+0x3c>)
 800b4c2:	1b64      	subs	r4, r4, r5
 800b4c4:	10a4      	asrs	r4, r4, #2
 800b4c6:	2600      	movs	r6, #0
 800b4c8:	42a6      	cmp	r6, r4
 800b4ca:	d109      	bne.n	800b4e0 <__libc_init_array+0x24>
 800b4cc:	4d0b      	ldr	r5, [pc, #44]	; (800b4fc <__libc_init_array+0x40>)
 800b4ce:	4c0c      	ldr	r4, [pc, #48]	; (800b500 <__libc_init_array+0x44>)
 800b4d0:	f000 fbae 	bl	800bc30 <_init>
 800b4d4:	1b64      	subs	r4, r4, r5
 800b4d6:	10a4      	asrs	r4, r4, #2
 800b4d8:	2600      	movs	r6, #0
 800b4da:	42a6      	cmp	r6, r4
 800b4dc:	d105      	bne.n	800b4ea <__libc_init_array+0x2e>
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4e4:	4798      	blx	r3
 800b4e6:	3601      	adds	r6, #1
 800b4e8:	e7ee      	b.n	800b4c8 <__libc_init_array+0xc>
 800b4ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4ee:	4798      	blx	r3
 800b4f0:	3601      	adds	r6, #1
 800b4f2:	e7f2      	b.n	800b4da <__libc_init_array+0x1e>
 800b4f4:	0800c6b4 	.word	0x0800c6b4
 800b4f8:	0800c6b4 	.word	0x0800c6b4
 800b4fc:	0800c6b4 	.word	0x0800c6b4
 800b500:	0800c6b8 	.word	0x0800c6b8

0800b504 <__retarget_lock_acquire_recursive>:
 800b504:	4770      	bx	lr

0800b506 <__retarget_lock_release_recursive>:
 800b506:	4770      	bx	lr

0800b508 <memcpy>:
 800b508:	440a      	add	r2, r1
 800b50a:	4291      	cmp	r1, r2
 800b50c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b510:	d100      	bne.n	800b514 <memcpy+0xc>
 800b512:	4770      	bx	lr
 800b514:	b510      	push	{r4, lr}
 800b516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b51a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b51e:	4291      	cmp	r1, r2
 800b520:	d1f9      	bne.n	800b516 <memcpy+0xe>
 800b522:	bd10      	pop	{r4, pc}

0800b524 <_free_r>:
 800b524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b526:	2900      	cmp	r1, #0
 800b528:	d044      	beq.n	800b5b4 <_free_r+0x90>
 800b52a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b52e:	9001      	str	r0, [sp, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	f1a1 0404 	sub.w	r4, r1, #4
 800b536:	bfb8      	it	lt
 800b538:	18e4      	addlt	r4, r4, r3
 800b53a:	f7ff ff0b 	bl	800b354 <__malloc_lock>
 800b53e:	4a1e      	ldr	r2, [pc, #120]	; (800b5b8 <_free_r+0x94>)
 800b540:	9801      	ldr	r0, [sp, #4]
 800b542:	6813      	ldr	r3, [r2, #0]
 800b544:	b933      	cbnz	r3, 800b554 <_free_r+0x30>
 800b546:	6063      	str	r3, [r4, #4]
 800b548:	6014      	str	r4, [r2, #0]
 800b54a:	b003      	add	sp, #12
 800b54c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b550:	f7ff bf06 	b.w	800b360 <__malloc_unlock>
 800b554:	42a3      	cmp	r3, r4
 800b556:	d908      	bls.n	800b56a <_free_r+0x46>
 800b558:	6825      	ldr	r5, [r4, #0]
 800b55a:	1961      	adds	r1, r4, r5
 800b55c:	428b      	cmp	r3, r1
 800b55e:	bf01      	itttt	eq
 800b560:	6819      	ldreq	r1, [r3, #0]
 800b562:	685b      	ldreq	r3, [r3, #4]
 800b564:	1949      	addeq	r1, r1, r5
 800b566:	6021      	streq	r1, [r4, #0]
 800b568:	e7ed      	b.n	800b546 <_free_r+0x22>
 800b56a:	461a      	mov	r2, r3
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	b10b      	cbz	r3, 800b574 <_free_r+0x50>
 800b570:	42a3      	cmp	r3, r4
 800b572:	d9fa      	bls.n	800b56a <_free_r+0x46>
 800b574:	6811      	ldr	r1, [r2, #0]
 800b576:	1855      	adds	r5, r2, r1
 800b578:	42a5      	cmp	r5, r4
 800b57a:	d10b      	bne.n	800b594 <_free_r+0x70>
 800b57c:	6824      	ldr	r4, [r4, #0]
 800b57e:	4421      	add	r1, r4
 800b580:	1854      	adds	r4, r2, r1
 800b582:	42a3      	cmp	r3, r4
 800b584:	6011      	str	r1, [r2, #0]
 800b586:	d1e0      	bne.n	800b54a <_free_r+0x26>
 800b588:	681c      	ldr	r4, [r3, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	6053      	str	r3, [r2, #4]
 800b58e:	440c      	add	r4, r1
 800b590:	6014      	str	r4, [r2, #0]
 800b592:	e7da      	b.n	800b54a <_free_r+0x26>
 800b594:	d902      	bls.n	800b59c <_free_r+0x78>
 800b596:	230c      	movs	r3, #12
 800b598:	6003      	str	r3, [r0, #0]
 800b59a:	e7d6      	b.n	800b54a <_free_r+0x26>
 800b59c:	6825      	ldr	r5, [r4, #0]
 800b59e:	1961      	adds	r1, r4, r5
 800b5a0:	428b      	cmp	r3, r1
 800b5a2:	bf04      	itt	eq
 800b5a4:	6819      	ldreq	r1, [r3, #0]
 800b5a6:	685b      	ldreq	r3, [r3, #4]
 800b5a8:	6063      	str	r3, [r4, #4]
 800b5aa:	bf04      	itt	eq
 800b5ac:	1949      	addeq	r1, r1, r5
 800b5ae:	6021      	streq	r1, [r4, #0]
 800b5b0:	6054      	str	r4, [r2, #4]
 800b5b2:	e7ca      	b.n	800b54a <_free_r+0x26>
 800b5b4:	b003      	add	sp, #12
 800b5b6:	bd30      	pop	{r4, r5, pc}
 800b5b8:	2000543c 	.word	0x2000543c

0800b5bc <__ssputs_r>:
 800b5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5c0:	688e      	ldr	r6, [r1, #8]
 800b5c2:	461f      	mov	r7, r3
 800b5c4:	42be      	cmp	r6, r7
 800b5c6:	680b      	ldr	r3, [r1, #0]
 800b5c8:	4682      	mov	sl, r0
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	4690      	mov	r8, r2
 800b5ce:	d82c      	bhi.n	800b62a <__ssputs_r+0x6e>
 800b5d0:	898a      	ldrh	r2, [r1, #12]
 800b5d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5d6:	d026      	beq.n	800b626 <__ssputs_r+0x6a>
 800b5d8:	6965      	ldr	r5, [r4, #20]
 800b5da:	6909      	ldr	r1, [r1, #16]
 800b5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5e0:	eba3 0901 	sub.w	r9, r3, r1
 800b5e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5e8:	1c7b      	adds	r3, r7, #1
 800b5ea:	444b      	add	r3, r9
 800b5ec:	106d      	asrs	r5, r5, #1
 800b5ee:	429d      	cmp	r5, r3
 800b5f0:	bf38      	it	cc
 800b5f2:	461d      	movcc	r5, r3
 800b5f4:	0553      	lsls	r3, r2, #21
 800b5f6:	d527      	bpl.n	800b648 <__ssputs_r+0x8c>
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	f7ff fe2b 	bl	800b254 <_malloc_r>
 800b5fe:	4606      	mov	r6, r0
 800b600:	b360      	cbz	r0, 800b65c <__ssputs_r+0xa0>
 800b602:	6921      	ldr	r1, [r4, #16]
 800b604:	464a      	mov	r2, r9
 800b606:	f7ff ff7f 	bl	800b508 <memcpy>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b614:	81a3      	strh	r3, [r4, #12]
 800b616:	6126      	str	r6, [r4, #16]
 800b618:	6165      	str	r5, [r4, #20]
 800b61a:	444e      	add	r6, r9
 800b61c:	eba5 0509 	sub.w	r5, r5, r9
 800b620:	6026      	str	r6, [r4, #0]
 800b622:	60a5      	str	r5, [r4, #8]
 800b624:	463e      	mov	r6, r7
 800b626:	42be      	cmp	r6, r7
 800b628:	d900      	bls.n	800b62c <__ssputs_r+0x70>
 800b62a:	463e      	mov	r6, r7
 800b62c:	6820      	ldr	r0, [r4, #0]
 800b62e:	4632      	mov	r2, r6
 800b630:	4641      	mov	r1, r8
 800b632:	f000 faab 	bl	800bb8c <memmove>
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	1b9b      	subs	r3, r3, r6
 800b63a:	60a3      	str	r3, [r4, #8]
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	4433      	add	r3, r6
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	2000      	movs	r0, #0
 800b644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b648:	462a      	mov	r2, r5
 800b64a:	f000 fab9 	bl	800bbc0 <_realloc_r>
 800b64e:	4606      	mov	r6, r0
 800b650:	2800      	cmp	r0, #0
 800b652:	d1e0      	bne.n	800b616 <__ssputs_r+0x5a>
 800b654:	6921      	ldr	r1, [r4, #16]
 800b656:	4650      	mov	r0, sl
 800b658:	f7ff ff64 	bl	800b524 <_free_r>
 800b65c:	230c      	movs	r3, #12
 800b65e:	f8ca 3000 	str.w	r3, [sl]
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b668:	81a3      	strh	r3, [r4, #12]
 800b66a:	f04f 30ff 	mov.w	r0, #4294967295
 800b66e:	e7e9      	b.n	800b644 <__ssputs_r+0x88>

0800b670 <_svfiprintf_r>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	4698      	mov	r8, r3
 800b676:	898b      	ldrh	r3, [r1, #12]
 800b678:	061b      	lsls	r3, r3, #24
 800b67a:	b09d      	sub	sp, #116	; 0x74
 800b67c:	4607      	mov	r7, r0
 800b67e:	460d      	mov	r5, r1
 800b680:	4614      	mov	r4, r2
 800b682:	d50e      	bpl.n	800b6a2 <_svfiprintf_r+0x32>
 800b684:	690b      	ldr	r3, [r1, #16]
 800b686:	b963      	cbnz	r3, 800b6a2 <_svfiprintf_r+0x32>
 800b688:	2140      	movs	r1, #64	; 0x40
 800b68a:	f7ff fde3 	bl	800b254 <_malloc_r>
 800b68e:	6028      	str	r0, [r5, #0]
 800b690:	6128      	str	r0, [r5, #16]
 800b692:	b920      	cbnz	r0, 800b69e <_svfiprintf_r+0x2e>
 800b694:	230c      	movs	r3, #12
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	f04f 30ff 	mov.w	r0, #4294967295
 800b69c:	e0d0      	b.n	800b840 <_svfiprintf_r+0x1d0>
 800b69e:	2340      	movs	r3, #64	; 0x40
 800b6a0:	616b      	str	r3, [r5, #20]
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a6:	2320      	movs	r3, #32
 800b6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6b0:	2330      	movs	r3, #48	; 0x30
 800b6b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b858 <_svfiprintf_r+0x1e8>
 800b6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6ba:	f04f 0901 	mov.w	r9, #1
 800b6be:	4623      	mov	r3, r4
 800b6c0:	469a      	mov	sl, r3
 800b6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6c6:	b10a      	cbz	r2, 800b6cc <_svfiprintf_r+0x5c>
 800b6c8:	2a25      	cmp	r2, #37	; 0x25
 800b6ca:	d1f9      	bne.n	800b6c0 <_svfiprintf_r+0x50>
 800b6cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b6d0:	d00b      	beq.n	800b6ea <_svfiprintf_r+0x7a>
 800b6d2:	465b      	mov	r3, fp
 800b6d4:	4622      	mov	r2, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7ff ff6f 	bl	800b5bc <__ssputs_r>
 800b6de:	3001      	adds	r0, #1
 800b6e0:	f000 80a9 	beq.w	800b836 <_svfiprintf_r+0x1c6>
 800b6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6e6:	445a      	add	r2, fp
 800b6e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 80a1 	beq.w	800b836 <_svfiprintf_r+0x1c6>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6fe:	f10a 0a01 	add.w	sl, sl, #1
 800b702:	9304      	str	r3, [sp, #16]
 800b704:	9307      	str	r3, [sp, #28]
 800b706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b70a:	931a      	str	r3, [sp, #104]	; 0x68
 800b70c:	4654      	mov	r4, sl
 800b70e:	2205      	movs	r2, #5
 800b710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b714:	4850      	ldr	r0, [pc, #320]	; (800b858 <_svfiprintf_r+0x1e8>)
 800b716:	f7f4 fd5b 	bl	80001d0 <memchr>
 800b71a:	9a04      	ldr	r2, [sp, #16]
 800b71c:	b9d8      	cbnz	r0, 800b756 <_svfiprintf_r+0xe6>
 800b71e:	06d0      	lsls	r0, r2, #27
 800b720:	bf44      	itt	mi
 800b722:	2320      	movmi	r3, #32
 800b724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b728:	0711      	lsls	r1, r2, #28
 800b72a:	bf44      	itt	mi
 800b72c:	232b      	movmi	r3, #43	; 0x2b
 800b72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b732:	f89a 3000 	ldrb.w	r3, [sl]
 800b736:	2b2a      	cmp	r3, #42	; 0x2a
 800b738:	d015      	beq.n	800b766 <_svfiprintf_r+0xf6>
 800b73a:	9a07      	ldr	r2, [sp, #28]
 800b73c:	4654      	mov	r4, sl
 800b73e:	2000      	movs	r0, #0
 800b740:	f04f 0c0a 	mov.w	ip, #10
 800b744:	4621      	mov	r1, r4
 800b746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b74a:	3b30      	subs	r3, #48	; 0x30
 800b74c:	2b09      	cmp	r3, #9
 800b74e:	d94d      	bls.n	800b7ec <_svfiprintf_r+0x17c>
 800b750:	b1b0      	cbz	r0, 800b780 <_svfiprintf_r+0x110>
 800b752:	9207      	str	r2, [sp, #28]
 800b754:	e014      	b.n	800b780 <_svfiprintf_r+0x110>
 800b756:	eba0 0308 	sub.w	r3, r0, r8
 800b75a:	fa09 f303 	lsl.w	r3, r9, r3
 800b75e:	4313      	orrs	r3, r2
 800b760:	9304      	str	r3, [sp, #16]
 800b762:	46a2      	mov	sl, r4
 800b764:	e7d2      	b.n	800b70c <_svfiprintf_r+0x9c>
 800b766:	9b03      	ldr	r3, [sp, #12]
 800b768:	1d19      	adds	r1, r3, #4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	9103      	str	r1, [sp, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bfbb      	ittet	lt
 800b772:	425b      	neglt	r3, r3
 800b774:	f042 0202 	orrlt.w	r2, r2, #2
 800b778:	9307      	strge	r3, [sp, #28]
 800b77a:	9307      	strlt	r3, [sp, #28]
 800b77c:	bfb8      	it	lt
 800b77e:	9204      	strlt	r2, [sp, #16]
 800b780:	7823      	ldrb	r3, [r4, #0]
 800b782:	2b2e      	cmp	r3, #46	; 0x2e
 800b784:	d10c      	bne.n	800b7a0 <_svfiprintf_r+0x130>
 800b786:	7863      	ldrb	r3, [r4, #1]
 800b788:	2b2a      	cmp	r3, #42	; 0x2a
 800b78a:	d134      	bne.n	800b7f6 <_svfiprintf_r+0x186>
 800b78c:	9b03      	ldr	r3, [sp, #12]
 800b78e:	1d1a      	adds	r2, r3, #4
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	9203      	str	r2, [sp, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	bfb8      	it	lt
 800b798:	f04f 33ff 	movlt.w	r3, #4294967295
 800b79c:	3402      	adds	r4, #2
 800b79e:	9305      	str	r3, [sp, #20]
 800b7a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b868 <_svfiprintf_r+0x1f8>
 800b7a4:	7821      	ldrb	r1, [r4, #0]
 800b7a6:	2203      	movs	r2, #3
 800b7a8:	4650      	mov	r0, sl
 800b7aa:	f7f4 fd11 	bl	80001d0 <memchr>
 800b7ae:	b138      	cbz	r0, 800b7c0 <_svfiprintf_r+0x150>
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	eba0 000a 	sub.w	r0, r0, sl
 800b7b6:	2240      	movs	r2, #64	; 0x40
 800b7b8:	4082      	lsls	r2, r0
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	3401      	adds	r4, #1
 800b7be:	9304      	str	r3, [sp, #16]
 800b7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c4:	4825      	ldr	r0, [pc, #148]	; (800b85c <_svfiprintf_r+0x1ec>)
 800b7c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7ca:	2206      	movs	r2, #6
 800b7cc:	f7f4 fd00 	bl	80001d0 <memchr>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d038      	beq.n	800b846 <_svfiprintf_r+0x1d6>
 800b7d4:	4b22      	ldr	r3, [pc, #136]	; (800b860 <_svfiprintf_r+0x1f0>)
 800b7d6:	bb1b      	cbnz	r3, 800b820 <_svfiprintf_r+0x1b0>
 800b7d8:	9b03      	ldr	r3, [sp, #12]
 800b7da:	3307      	adds	r3, #7
 800b7dc:	f023 0307 	bic.w	r3, r3, #7
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	9303      	str	r3, [sp, #12]
 800b7e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e6:	4433      	add	r3, r6
 800b7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ea:	e768      	b.n	800b6be <_svfiprintf_r+0x4e>
 800b7ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	2001      	movs	r0, #1
 800b7f4:	e7a6      	b.n	800b744 <_svfiprintf_r+0xd4>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	3401      	adds	r4, #1
 800b7fa:	9305      	str	r3, [sp, #20]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f04f 0c0a 	mov.w	ip, #10
 800b802:	4620      	mov	r0, r4
 800b804:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b808:	3a30      	subs	r2, #48	; 0x30
 800b80a:	2a09      	cmp	r2, #9
 800b80c:	d903      	bls.n	800b816 <_svfiprintf_r+0x1a6>
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d0c6      	beq.n	800b7a0 <_svfiprintf_r+0x130>
 800b812:	9105      	str	r1, [sp, #20]
 800b814:	e7c4      	b.n	800b7a0 <_svfiprintf_r+0x130>
 800b816:	fb0c 2101 	mla	r1, ip, r1, r2
 800b81a:	4604      	mov	r4, r0
 800b81c:	2301      	movs	r3, #1
 800b81e:	e7f0      	b.n	800b802 <_svfiprintf_r+0x192>
 800b820:	ab03      	add	r3, sp, #12
 800b822:	9300      	str	r3, [sp, #0]
 800b824:	462a      	mov	r2, r5
 800b826:	4b0f      	ldr	r3, [pc, #60]	; (800b864 <_svfiprintf_r+0x1f4>)
 800b828:	a904      	add	r1, sp, #16
 800b82a:	4638      	mov	r0, r7
 800b82c:	f3af 8000 	nop.w
 800b830:	1c42      	adds	r2, r0, #1
 800b832:	4606      	mov	r6, r0
 800b834:	d1d6      	bne.n	800b7e4 <_svfiprintf_r+0x174>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	065b      	lsls	r3, r3, #25
 800b83a:	f53f af2d 	bmi.w	800b698 <_svfiprintf_r+0x28>
 800b83e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b840:	b01d      	add	sp, #116	; 0x74
 800b842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b846:	ab03      	add	r3, sp, #12
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	462a      	mov	r2, r5
 800b84c:	4b05      	ldr	r3, [pc, #20]	; (800b864 <_svfiprintf_r+0x1f4>)
 800b84e:	a904      	add	r1, sp, #16
 800b850:	4638      	mov	r0, r7
 800b852:	f000 f879 	bl	800b948 <_printf_i>
 800b856:	e7eb      	b.n	800b830 <_svfiprintf_r+0x1c0>
 800b858:	0800c678 	.word	0x0800c678
 800b85c:	0800c682 	.word	0x0800c682
 800b860:	00000000 	.word	0x00000000
 800b864:	0800b5bd 	.word	0x0800b5bd
 800b868:	0800c67e 	.word	0x0800c67e

0800b86c <_printf_common>:
 800b86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	4616      	mov	r6, r2
 800b872:	4699      	mov	r9, r3
 800b874:	688a      	ldr	r2, [r1, #8]
 800b876:	690b      	ldr	r3, [r1, #16]
 800b878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b87c:	4293      	cmp	r3, r2
 800b87e:	bfb8      	it	lt
 800b880:	4613      	movlt	r3, r2
 800b882:	6033      	str	r3, [r6, #0]
 800b884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b888:	4607      	mov	r7, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	b10a      	cbz	r2, 800b892 <_printf_common+0x26>
 800b88e:	3301      	adds	r3, #1
 800b890:	6033      	str	r3, [r6, #0]
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	0699      	lsls	r1, r3, #26
 800b896:	bf42      	ittt	mi
 800b898:	6833      	ldrmi	r3, [r6, #0]
 800b89a:	3302      	addmi	r3, #2
 800b89c:	6033      	strmi	r3, [r6, #0]
 800b89e:	6825      	ldr	r5, [r4, #0]
 800b8a0:	f015 0506 	ands.w	r5, r5, #6
 800b8a4:	d106      	bne.n	800b8b4 <_printf_common+0x48>
 800b8a6:	f104 0a19 	add.w	sl, r4, #25
 800b8aa:	68e3      	ldr	r3, [r4, #12]
 800b8ac:	6832      	ldr	r2, [r6, #0]
 800b8ae:	1a9b      	subs	r3, r3, r2
 800b8b0:	42ab      	cmp	r3, r5
 800b8b2:	dc26      	bgt.n	800b902 <_printf_common+0x96>
 800b8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8b8:	1e13      	subs	r3, r2, #0
 800b8ba:	6822      	ldr	r2, [r4, #0]
 800b8bc:	bf18      	it	ne
 800b8be:	2301      	movne	r3, #1
 800b8c0:	0692      	lsls	r2, r2, #26
 800b8c2:	d42b      	bmi.n	800b91c <_printf_common+0xb0>
 800b8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b8c8:	4649      	mov	r1, r9
 800b8ca:	4638      	mov	r0, r7
 800b8cc:	47c0      	blx	r8
 800b8ce:	3001      	adds	r0, #1
 800b8d0:	d01e      	beq.n	800b910 <_printf_common+0xa4>
 800b8d2:	6823      	ldr	r3, [r4, #0]
 800b8d4:	6922      	ldr	r2, [r4, #16]
 800b8d6:	f003 0306 	and.w	r3, r3, #6
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	bf02      	ittt	eq
 800b8de:	68e5      	ldreq	r5, [r4, #12]
 800b8e0:	6833      	ldreq	r3, [r6, #0]
 800b8e2:	1aed      	subeq	r5, r5, r3
 800b8e4:	68a3      	ldr	r3, [r4, #8]
 800b8e6:	bf0c      	ite	eq
 800b8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b8ec:	2500      	movne	r5, #0
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	bfc4      	itt	gt
 800b8f2:	1a9b      	subgt	r3, r3, r2
 800b8f4:	18ed      	addgt	r5, r5, r3
 800b8f6:	2600      	movs	r6, #0
 800b8f8:	341a      	adds	r4, #26
 800b8fa:	42b5      	cmp	r5, r6
 800b8fc:	d11a      	bne.n	800b934 <_printf_common+0xc8>
 800b8fe:	2000      	movs	r0, #0
 800b900:	e008      	b.n	800b914 <_printf_common+0xa8>
 800b902:	2301      	movs	r3, #1
 800b904:	4652      	mov	r2, sl
 800b906:	4649      	mov	r1, r9
 800b908:	4638      	mov	r0, r7
 800b90a:	47c0      	blx	r8
 800b90c:	3001      	adds	r0, #1
 800b90e:	d103      	bne.n	800b918 <_printf_common+0xac>
 800b910:	f04f 30ff 	mov.w	r0, #4294967295
 800b914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b918:	3501      	adds	r5, #1
 800b91a:	e7c6      	b.n	800b8aa <_printf_common+0x3e>
 800b91c:	18e1      	adds	r1, r4, r3
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	2030      	movs	r0, #48	; 0x30
 800b922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b926:	4422      	add	r2, r4
 800b928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b930:	3302      	adds	r3, #2
 800b932:	e7c7      	b.n	800b8c4 <_printf_common+0x58>
 800b934:	2301      	movs	r3, #1
 800b936:	4622      	mov	r2, r4
 800b938:	4649      	mov	r1, r9
 800b93a:	4638      	mov	r0, r7
 800b93c:	47c0      	blx	r8
 800b93e:	3001      	adds	r0, #1
 800b940:	d0e6      	beq.n	800b910 <_printf_common+0xa4>
 800b942:	3601      	adds	r6, #1
 800b944:	e7d9      	b.n	800b8fa <_printf_common+0x8e>
	...

0800b948 <_printf_i>:
 800b948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b94c:	7e0f      	ldrb	r7, [r1, #24]
 800b94e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b950:	2f78      	cmp	r7, #120	; 0x78
 800b952:	4691      	mov	r9, r2
 800b954:	4680      	mov	r8, r0
 800b956:	460c      	mov	r4, r1
 800b958:	469a      	mov	sl, r3
 800b95a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b95e:	d807      	bhi.n	800b970 <_printf_i+0x28>
 800b960:	2f62      	cmp	r7, #98	; 0x62
 800b962:	d80a      	bhi.n	800b97a <_printf_i+0x32>
 800b964:	2f00      	cmp	r7, #0
 800b966:	f000 80d4 	beq.w	800bb12 <_printf_i+0x1ca>
 800b96a:	2f58      	cmp	r7, #88	; 0x58
 800b96c:	f000 80c0 	beq.w	800baf0 <_printf_i+0x1a8>
 800b970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b978:	e03a      	b.n	800b9f0 <_printf_i+0xa8>
 800b97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b97e:	2b15      	cmp	r3, #21
 800b980:	d8f6      	bhi.n	800b970 <_printf_i+0x28>
 800b982:	a101      	add	r1, pc, #4	; (adr r1, 800b988 <_printf_i+0x40>)
 800b984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b988:	0800b9e1 	.word	0x0800b9e1
 800b98c:	0800b9f5 	.word	0x0800b9f5
 800b990:	0800b971 	.word	0x0800b971
 800b994:	0800b971 	.word	0x0800b971
 800b998:	0800b971 	.word	0x0800b971
 800b99c:	0800b971 	.word	0x0800b971
 800b9a0:	0800b9f5 	.word	0x0800b9f5
 800b9a4:	0800b971 	.word	0x0800b971
 800b9a8:	0800b971 	.word	0x0800b971
 800b9ac:	0800b971 	.word	0x0800b971
 800b9b0:	0800b971 	.word	0x0800b971
 800b9b4:	0800baf9 	.word	0x0800baf9
 800b9b8:	0800ba21 	.word	0x0800ba21
 800b9bc:	0800bab3 	.word	0x0800bab3
 800b9c0:	0800b971 	.word	0x0800b971
 800b9c4:	0800b971 	.word	0x0800b971
 800b9c8:	0800bb1b 	.word	0x0800bb1b
 800b9cc:	0800b971 	.word	0x0800b971
 800b9d0:	0800ba21 	.word	0x0800ba21
 800b9d4:	0800b971 	.word	0x0800b971
 800b9d8:	0800b971 	.word	0x0800b971
 800b9dc:	0800babb 	.word	0x0800babb
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	1d1a      	adds	r2, r3, #4
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	602a      	str	r2, [r5, #0]
 800b9e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e09f      	b.n	800bb34 <_printf_i+0x1ec>
 800b9f4:	6820      	ldr	r0, [r4, #0]
 800b9f6:	682b      	ldr	r3, [r5, #0]
 800b9f8:	0607      	lsls	r7, r0, #24
 800b9fa:	f103 0104 	add.w	r1, r3, #4
 800b9fe:	6029      	str	r1, [r5, #0]
 800ba00:	d501      	bpl.n	800ba06 <_printf_i+0xbe>
 800ba02:	681e      	ldr	r6, [r3, #0]
 800ba04:	e003      	b.n	800ba0e <_printf_i+0xc6>
 800ba06:	0646      	lsls	r6, r0, #25
 800ba08:	d5fb      	bpl.n	800ba02 <_printf_i+0xba>
 800ba0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba0e:	2e00      	cmp	r6, #0
 800ba10:	da03      	bge.n	800ba1a <_printf_i+0xd2>
 800ba12:	232d      	movs	r3, #45	; 0x2d
 800ba14:	4276      	negs	r6, r6
 800ba16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba1a:	485a      	ldr	r0, [pc, #360]	; (800bb84 <_printf_i+0x23c>)
 800ba1c:	230a      	movs	r3, #10
 800ba1e:	e012      	b.n	800ba46 <_printf_i+0xfe>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	6820      	ldr	r0, [r4, #0]
 800ba24:	1d19      	adds	r1, r3, #4
 800ba26:	6029      	str	r1, [r5, #0]
 800ba28:	0605      	lsls	r5, r0, #24
 800ba2a:	d501      	bpl.n	800ba30 <_printf_i+0xe8>
 800ba2c:	681e      	ldr	r6, [r3, #0]
 800ba2e:	e002      	b.n	800ba36 <_printf_i+0xee>
 800ba30:	0641      	lsls	r1, r0, #25
 800ba32:	d5fb      	bpl.n	800ba2c <_printf_i+0xe4>
 800ba34:	881e      	ldrh	r6, [r3, #0]
 800ba36:	4853      	ldr	r0, [pc, #332]	; (800bb84 <_printf_i+0x23c>)
 800ba38:	2f6f      	cmp	r7, #111	; 0x6f
 800ba3a:	bf0c      	ite	eq
 800ba3c:	2308      	moveq	r3, #8
 800ba3e:	230a      	movne	r3, #10
 800ba40:	2100      	movs	r1, #0
 800ba42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba46:	6865      	ldr	r5, [r4, #4]
 800ba48:	60a5      	str	r5, [r4, #8]
 800ba4a:	2d00      	cmp	r5, #0
 800ba4c:	bfa2      	ittt	ge
 800ba4e:	6821      	ldrge	r1, [r4, #0]
 800ba50:	f021 0104 	bicge.w	r1, r1, #4
 800ba54:	6021      	strge	r1, [r4, #0]
 800ba56:	b90e      	cbnz	r6, 800ba5c <_printf_i+0x114>
 800ba58:	2d00      	cmp	r5, #0
 800ba5a:	d04b      	beq.n	800baf4 <_printf_i+0x1ac>
 800ba5c:	4615      	mov	r5, r2
 800ba5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ba62:	fb03 6711 	mls	r7, r3, r1, r6
 800ba66:	5dc7      	ldrb	r7, [r0, r7]
 800ba68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ba6c:	4637      	mov	r7, r6
 800ba6e:	42bb      	cmp	r3, r7
 800ba70:	460e      	mov	r6, r1
 800ba72:	d9f4      	bls.n	800ba5e <_printf_i+0x116>
 800ba74:	2b08      	cmp	r3, #8
 800ba76:	d10b      	bne.n	800ba90 <_printf_i+0x148>
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	07de      	lsls	r6, r3, #31
 800ba7c:	d508      	bpl.n	800ba90 <_printf_i+0x148>
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	6861      	ldr	r1, [r4, #4]
 800ba82:	4299      	cmp	r1, r3
 800ba84:	bfde      	ittt	le
 800ba86:	2330      	movle	r3, #48	; 0x30
 800ba88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba90:	1b52      	subs	r2, r2, r5
 800ba92:	6122      	str	r2, [r4, #16]
 800ba94:	f8cd a000 	str.w	sl, [sp]
 800ba98:	464b      	mov	r3, r9
 800ba9a:	aa03      	add	r2, sp, #12
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4640      	mov	r0, r8
 800baa0:	f7ff fee4 	bl	800b86c <_printf_common>
 800baa4:	3001      	adds	r0, #1
 800baa6:	d14a      	bne.n	800bb3e <_printf_i+0x1f6>
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295
 800baac:	b004      	add	sp, #16
 800baae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab2:	6823      	ldr	r3, [r4, #0]
 800bab4:	f043 0320 	orr.w	r3, r3, #32
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	4833      	ldr	r0, [pc, #204]	; (800bb88 <_printf_i+0x240>)
 800babc:	2778      	movs	r7, #120	; 0x78
 800babe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	6829      	ldr	r1, [r5, #0]
 800bac6:	061f      	lsls	r7, r3, #24
 800bac8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bacc:	d402      	bmi.n	800bad4 <_printf_i+0x18c>
 800bace:	065f      	lsls	r7, r3, #25
 800bad0:	bf48      	it	mi
 800bad2:	b2b6      	uxthmi	r6, r6
 800bad4:	07df      	lsls	r7, r3, #31
 800bad6:	bf48      	it	mi
 800bad8:	f043 0320 	orrmi.w	r3, r3, #32
 800badc:	6029      	str	r1, [r5, #0]
 800bade:	bf48      	it	mi
 800bae0:	6023      	strmi	r3, [r4, #0]
 800bae2:	b91e      	cbnz	r6, 800baec <_printf_i+0x1a4>
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	f023 0320 	bic.w	r3, r3, #32
 800baea:	6023      	str	r3, [r4, #0]
 800baec:	2310      	movs	r3, #16
 800baee:	e7a7      	b.n	800ba40 <_printf_i+0xf8>
 800baf0:	4824      	ldr	r0, [pc, #144]	; (800bb84 <_printf_i+0x23c>)
 800baf2:	e7e4      	b.n	800babe <_printf_i+0x176>
 800baf4:	4615      	mov	r5, r2
 800baf6:	e7bd      	b.n	800ba74 <_printf_i+0x12c>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	6826      	ldr	r6, [r4, #0]
 800bafc:	6961      	ldr	r1, [r4, #20]
 800bafe:	1d18      	adds	r0, r3, #4
 800bb00:	6028      	str	r0, [r5, #0]
 800bb02:	0635      	lsls	r5, r6, #24
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	d501      	bpl.n	800bb0c <_printf_i+0x1c4>
 800bb08:	6019      	str	r1, [r3, #0]
 800bb0a:	e002      	b.n	800bb12 <_printf_i+0x1ca>
 800bb0c:	0670      	lsls	r0, r6, #25
 800bb0e:	d5fb      	bpl.n	800bb08 <_printf_i+0x1c0>
 800bb10:	8019      	strh	r1, [r3, #0]
 800bb12:	2300      	movs	r3, #0
 800bb14:	6123      	str	r3, [r4, #16]
 800bb16:	4615      	mov	r5, r2
 800bb18:	e7bc      	b.n	800ba94 <_printf_i+0x14c>
 800bb1a:	682b      	ldr	r3, [r5, #0]
 800bb1c:	1d1a      	adds	r2, r3, #4
 800bb1e:	602a      	str	r2, [r5, #0]
 800bb20:	681d      	ldr	r5, [r3, #0]
 800bb22:	6862      	ldr	r2, [r4, #4]
 800bb24:	2100      	movs	r1, #0
 800bb26:	4628      	mov	r0, r5
 800bb28:	f7f4 fb52 	bl	80001d0 <memchr>
 800bb2c:	b108      	cbz	r0, 800bb32 <_printf_i+0x1ea>
 800bb2e:	1b40      	subs	r0, r0, r5
 800bb30:	6060      	str	r0, [r4, #4]
 800bb32:	6863      	ldr	r3, [r4, #4]
 800bb34:	6123      	str	r3, [r4, #16]
 800bb36:	2300      	movs	r3, #0
 800bb38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb3c:	e7aa      	b.n	800ba94 <_printf_i+0x14c>
 800bb3e:	6923      	ldr	r3, [r4, #16]
 800bb40:	462a      	mov	r2, r5
 800bb42:	4649      	mov	r1, r9
 800bb44:	4640      	mov	r0, r8
 800bb46:	47d0      	blx	sl
 800bb48:	3001      	adds	r0, #1
 800bb4a:	d0ad      	beq.n	800baa8 <_printf_i+0x160>
 800bb4c:	6823      	ldr	r3, [r4, #0]
 800bb4e:	079b      	lsls	r3, r3, #30
 800bb50:	d413      	bmi.n	800bb7a <_printf_i+0x232>
 800bb52:	68e0      	ldr	r0, [r4, #12]
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	4298      	cmp	r0, r3
 800bb58:	bfb8      	it	lt
 800bb5a:	4618      	movlt	r0, r3
 800bb5c:	e7a6      	b.n	800baac <_printf_i+0x164>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	4632      	mov	r2, r6
 800bb62:	4649      	mov	r1, r9
 800bb64:	4640      	mov	r0, r8
 800bb66:	47d0      	blx	sl
 800bb68:	3001      	adds	r0, #1
 800bb6a:	d09d      	beq.n	800baa8 <_printf_i+0x160>
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	68e3      	ldr	r3, [r4, #12]
 800bb70:	9903      	ldr	r1, [sp, #12]
 800bb72:	1a5b      	subs	r3, r3, r1
 800bb74:	42ab      	cmp	r3, r5
 800bb76:	dcf2      	bgt.n	800bb5e <_printf_i+0x216>
 800bb78:	e7eb      	b.n	800bb52 <_printf_i+0x20a>
 800bb7a:	2500      	movs	r5, #0
 800bb7c:	f104 0619 	add.w	r6, r4, #25
 800bb80:	e7f5      	b.n	800bb6e <_printf_i+0x226>
 800bb82:	bf00      	nop
 800bb84:	0800c689 	.word	0x0800c689
 800bb88:	0800c69a 	.word	0x0800c69a

0800bb8c <memmove>:
 800bb8c:	4288      	cmp	r0, r1
 800bb8e:	b510      	push	{r4, lr}
 800bb90:	eb01 0402 	add.w	r4, r1, r2
 800bb94:	d902      	bls.n	800bb9c <memmove+0x10>
 800bb96:	4284      	cmp	r4, r0
 800bb98:	4623      	mov	r3, r4
 800bb9a:	d807      	bhi.n	800bbac <memmove+0x20>
 800bb9c:	1e43      	subs	r3, r0, #1
 800bb9e:	42a1      	cmp	r1, r4
 800bba0:	d008      	beq.n	800bbb4 <memmove+0x28>
 800bba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbaa:	e7f8      	b.n	800bb9e <memmove+0x12>
 800bbac:	4402      	add	r2, r0
 800bbae:	4601      	mov	r1, r0
 800bbb0:	428a      	cmp	r2, r1
 800bbb2:	d100      	bne.n	800bbb6 <memmove+0x2a>
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbbe:	e7f7      	b.n	800bbb0 <memmove+0x24>

0800bbc0 <_realloc_r>:
 800bbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbc4:	4680      	mov	r8, r0
 800bbc6:	4614      	mov	r4, r2
 800bbc8:	460e      	mov	r6, r1
 800bbca:	b921      	cbnz	r1, 800bbd6 <_realloc_r+0x16>
 800bbcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	f7ff bb3f 	b.w	800b254 <_malloc_r>
 800bbd6:	b92a      	cbnz	r2, 800bbe4 <_realloc_r+0x24>
 800bbd8:	f7ff fca4 	bl	800b524 <_free_r>
 800bbdc:	4625      	mov	r5, r4
 800bbde:	4628      	mov	r0, r5
 800bbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe4:	f000 f81b 	bl	800bc1e <_malloc_usable_size_r>
 800bbe8:	4284      	cmp	r4, r0
 800bbea:	4607      	mov	r7, r0
 800bbec:	d802      	bhi.n	800bbf4 <_realloc_r+0x34>
 800bbee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbf2:	d812      	bhi.n	800bc1a <_realloc_r+0x5a>
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	f7ff fb2c 	bl	800b254 <_malloc_r>
 800bbfc:	4605      	mov	r5, r0
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	d0ed      	beq.n	800bbde <_realloc_r+0x1e>
 800bc02:	42bc      	cmp	r4, r7
 800bc04:	4622      	mov	r2, r4
 800bc06:	4631      	mov	r1, r6
 800bc08:	bf28      	it	cs
 800bc0a:	463a      	movcs	r2, r7
 800bc0c:	f7ff fc7c 	bl	800b508 <memcpy>
 800bc10:	4631      	mov	r1, r6
 800bc12:	4640      	mov	r0, r8
 800bc14:	f7ff fc86 	bl	800b524 <_free_r>
 800bc18:	e7e1      	b.n	800bbde <_realloc_r+0x1e>
 800bc1a:	4635      	mov	r5, r6
 800bc1c:	e7df      	b.n	800bbde <_realloc_r+0x1e>

0800bc1e <_malloc_usable_size_r>:
 800bc1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc22:	1f18      	subs	r0, r3, #4
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	bfbc      	itt	lt
 800bc28:	580b      	ldrlt	r3, [r1, r0]
 800bc2a:	18c0      	addlt	r0, r0, r3
 800bc2c:	4770      	bx	lr
	...

0800bc30 <_init>:
 800bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc32:	bf00      	nop
 800bc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc36:	bc08      	pop	{r3}
 800bc38:	469e      	mov	lr, r3
 800bc3a:	4770      	bx	lr

0800bc3c <_fini>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	bf00      	nop
 800bc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc42:	bc08      	pop	{r3}
 800bc44:	469e      	mov	lr, r3
 800bc46:	4770      	bx	lr
